//==============================================================================
// DUT Wrapper for RTL Integration
// Generated by AMBA Bus Matrix Configuration Tool
// Date: 2025-08-05 10:53:21
// Supports 11 masters and 11 slaves with full interconnect
// Master ID widths: CPU_Cluster_0=6, CPU_Cluster_1=6, GPU=8, Video_Encoder=4, Video_Decoder=4, DMA_Engine_0=4, DMA_Engine_1=4, PCIe_Controller=8, Master0=4, Master1=4, Master2=4
//==============================================================================

module dut_wrapper #(
    parameter ADDR_WIDTH = 64,
    parameter DATA_WIDTH = 128,
    parameter ID_WIDTH   = 8,
    parameter NUM_MASTERS = 11,
    parameter NUM_SLAVES = 11
) (
    input  logic clk,
    input  logic rst_n,
    axi4_if.slave master_if[NUM_MASTERS],  // Master interfaces from VIP
    axi4_if.master slave_if[NUM_SLAVES]    // Slave interfaces to VIP slave BFMs
);

    // Instantiate the gen_amba_axi generated 11x11 AXI interconnect
    amba_axi_m11s11 #(
        .NUM_MASTER(NUM_MASTERS),
        .NUM_SLAVE(NUM_SLAVES),
        .WIDTH_ID(ID_WIDTH),
        .WIDTH_AD(ADDR_WIDTH),
        .WIDTH_DA(DATA_WIDTH)
    ) axi_interconnect (
        .ARESETn(rst_n),
        .ACLK(clk),
        
        // Master 0 connections
        .M0_AWID(master_if[0].awid),
        .M0_AWADDR(master_if[0].awaddr),
        .M0_AWLEN(master_if[0].awlen),
        .M0_AWSIZE(master_if[0].awsize),
        .M0_AWBURST(master_if[0].awburst),
        .M0_AWLOCK(master_if[0].awlock),
        .M0_AWCACHE(master_if[0].awcache),
        .M0_AWPROT(master_if[0].awprot),
        .M0_AWQOS(master_if[0].awqos),
        .M0_AWVALID(master_if[0].awvalid),
        .M0_AWREADY(master_if[0].awready),
        
        // Write data channel
        .M0_WDATA(master_if[0].wdata),
        .M0_WSTRB(master_if[0].wstrb),
        .M0_WLAST(master_if[0].wlast),
        .M0_WVALID(master_if[0].wvalid),
        .M0_WREADY(master_if[0].wready),
        
        // Write response channel
        .M0_BID(master_if[0].bid),
        .M0_BRESP(master_if[0].bresp),
        .M0_BVALID(master_if[0].bvalid),
        .M0_BREADY(master_if[0].bready),
        
        // Read address channel
        .M0_ARID(master_if[0].arid),
        .M0_ARADDR(master_if[0].araddr),
        .M0_ARLEN(master_if[0].arlen),
        .M0_ARSIZE(master_if[0].arsize),
        .M0_ARBURST(master_if[0].arburst),
        .M0_ARLOCK(master_if[0].arlock),
        .M0_ARCACHE(master_if[0].arcache),
        .M0_ARPROT(master_if[0].arprot),
        .M0_ARQOS(master_if[0].arqos),
        .M0_ARVALID(master_if[0].arvalid),
        .M0_ARREADY(master_if[0].arready),
        
        // Read data channel
        .M0_RID(master_if[0].rid),
        .M0_RDATA(master_if[0].rdata),
        .M0_RRESP(master_if[0].rresp),
        .M0_RLAST(master_if[0].rlast),
        .M0_RVALID(master_if[0].rvalid),
        .M0_RREADY(master_if[0].rready),
        // Master 1 connections
        .M1_AWID(master_if[1].awid),
        .M1_AWADDR(master_if[1].awaddr),
        .M1_AWLEN(master_if[1].awlen),
        .M1_AWSIZE(master_if[1].awsize),
        .M1_AWBURST(master_if[1].awburst),
        .M1_AWLOCK(master_if[1].awlock),
        .M1_AWCACHE(master_if[1].awcache),
        .M1_AWPROT(master_if[1].awprot),
        .M1_AWQOS(master_if[1].awqos),
        .M1_AWVALID(master_if[1].awvalid),
        .M1_AWREADY(master_if[1].awready),
        
        // Write data channel
        .M1_WDATA(master_if[1].wdata),
        .M1_WSTRB(master_if[1].wstrb),
        .M1_WLAST(master_if[1].wlast),
        .M1_WVALID(master_if[1].wvalid),
        .M1_WREADY(master_if[1].wready),
        
        // Write response channel
        .M1_BID(master_if[1].bid),
        .M1_BRESP(master_if[1].bresp),
        .M1_BVALID(master_if[1].bvalid),
        .M1_BREADY(master_if[1].bready),
        
        // Read address channel
        .M1_ARID(master_if[1].arid),
        .M1_ARADDR(master_if[1].araddr),
        .M1_ARLEN(master_if[1].arlen),
        .M1_ARSIZE(master_if[1].arsize),
        .M1_ARBURST(master_if[1].arburst),
        .M1_ARLOCK(master_if[1].arlock),
        .M1_ARCACHE(master_if[1].arcache),
        .M1_ARPROT(master_if[1].arprot),
        .M1_ARQOS(master_if[1].arqos),
        .M1_ARVALID(master_if[1].arvalid),
        .M1_ARREADY(master_if[1].arready),
        
        // Read data channel
        .M1_RID(master_if[1].rid),
        .M1_RDATA(master_if[1].rdata),
        .M1_RRESP(master_if[1].rresp),
        .M1_RLAST(master_if[1].rlast),
        .M1_RVALID(master_if[1].rvalid),
        .M1_RREADY(master_if[1].rready),
        // Master 2 connections
        .M2_AWID(master_if[2].awid),
        .M2_AWADDR(master_if[2].awaddr),
        .M2_AWLEN(master_if[2].awlen),
        .M2_AWSIZE(master_if[2].awsize),
        .M2_AWBURST(master_if[2].awburst),
        .M2_AWLOCK(master_if[2].awlock),
        .M2_AWCACHE(master_if[2].awcache),
        .M2_AWPROT(master_if[2].awprot),
        .M2_AWQOS(master_if[2].awqos),
        .M2_AWVALID(master_if[2].awvalid),
        .M2_AWREADY(master_if[2].awready),
        
        // Write data channel
        .M2_WDATA(master_if[2].wdata),
        .M2_WSTRB(master_if[2].wstrb),
        .M2_WLAST(master_if[2].wlast),
        .M2_WVALID(master_if[2].wvalid),
        .M2_WREADY(master_if[2].wready),
        
        // Write response channel
        .M2_BID(master_if[2].bid),
        .M2_BRESP(master_if[2].bresp),
        .M2_BVALID(master_if[2].bvalid),
        .M2_BREADY(master_if[2].bready),
        
        // Read address channel
        .M2_ARID(master_if[2].arid),
        .M2_ARADDR(master_if[2].araddr),
        .M2_ARLEN(master_if[2].arlen),
        .M2_ARSIZE(master_if[2].arsize),
        .M2_ARBURST(master_if[2].arburst),
        .M2_ARLOCK(master_if[2].arlock),
        .M2_ARCACHE(master_if[2].arcache),
        .M2_ARPROT(master_if[2].arprot),
        .M2_ARQOS(master_if[2].arqos),
        .M2_ARVALID(master_if[2].arvalid),
        .M2_ARREADY(master_if[2].arready),
        
        // Read data channel
        .M2_RID(master_if[2].rid),
        .M2_RDATA(master_if[2].rdata),
        .M2_RRESP(master_if[2].rresp),
        .M2_RLAST(master_if[2].rlast),
        .M2_RVALID(master_if[2].rvalid),
        .M2_RREADY(master_if[2].rready),
        // Master 3 connections
        .M3_AWID(master_if[3].awid),
        .M3_AWADDR(master_if[3].awaddr),
        .M3_AWLEN(master_if[3].awlen),
        .M3_AWSIZE(master_if[3].awsize),
        .M3_AWBURST(master_if[3].awburst),
        .M3_AWLOCK(master_if[3].awlock),
        .M3_AWCACHE(master_if[3].awcache),
        .M3_AWPROT(master_if[3].awprot),
        .M3_AWQOS(master_if[3].awqos),
        .M3_AWVALID(master_if[3].awvalid),
        .M3_AWREADY(master_if[3].awready),
        
        // Write data channel
        .M3_WDATA(master_if[3].wdata),
        .M3_WSTRB(master_if[3].wstrb),
        .M3_WLAST(master_if[3].wlast),
        .M3_WVALID(master_if[3].wvalid),
        .M3_WREADY(master_if[3].wready),
        
        // Write response channel
        .M3_BID(master_if[3].bid),
        .M3_BRESP(master_if[3].bresp),
        .M3_BVALID(master_if[3].bvalid),
        .M3_BREADY(master_if[3].bready),
        
        // Read address channel
        .M3_ARID(master_if[3].arid),
        .M3_ARADDR(master_if[3].araddr),
        .M3_ARLEN(master_if[3].arlen),
        .M3_ARSIZE(master_if[3].arsize),
        .M3_ARBURST(master_if[3].arburst),
        .M3_ARLOCK(master_if[3].arlock),
        .M3_ARCACHE(master_if[3].arcache),
        .M3_ARPROT(master_if[3].arprot),
        .M3_ARQOS(master_if[3].arqos),
        .M3_ARVALID(master_if[3].arvalid),
        .M3_ARREADY(master_if[3].arready),
        
        // Read data channel
        .M3_RID(master_if[3].rid),
        .M3_RDATA(master_if[3].rdata),
        .M3_RRESP(master_if[3].rresp),
        .M3_RLAST(master_if[3].rlast),
        .M3_RVALID(master_if[3].rvalid),
        .M3_RREADY(master_if[3].rready),
        // Master 4 connections
        .M4_AWID(master_if[4].awid),
        .M4_AWADDR(master_if[4].awaddr),
        .M4_AWLEN(master_if[4].awlen),
        .M4_AWSIZE(master_if[4].awsize),
        .M4_AWBURST(master_if[4].awburst),
        .M4_AWLOCK(master_if[4].awlock),
        .M4_AWCACHE(master_if[4].awcache),
        .M4_AWPROT(master_if[4].awprot),
        .M4_AWQOS(master_if[4].awqos),
        .M4_AWVALID(master_if[4].awvalid),
        .M4_AWREADY(master_if[4].awready),
        
        // Write data channel
        .M4_WDATA(master_if[4].wdata),
        .M4_WSTRB(master_if[4].wstrb),
        .M4_WLAST(master_if[4].wlast),
        .M4_WVALID(master_if[4].wvalid),
        .M4_WREADY(master_if[4].wready),
        
        // Write response channel
        .M4_BID(master_if[4].bid),
        .M4_BRESP(master_if[4].bresp),
        .M4_BVALID(master_if[4].bvalid),
        .M4_BREADY(master_if[4].bready),
        
        // Read address channel
        .M4_ARID(master_if[4].arid),
        .M4_ARADDR(master_if[4].araddr),
        .M4_ARLEN(master_if[4].arlen),
        .M4_ARSIZE(master_if[4].arsize),
        .M4_ARBURST(master_if[4].arburst),
        .M4_ARLOCK(master_if[4].arlock),
        .M4_ARCACHE(master_if[4].arcache),
        .M4_ARPROT(master_if[4].arprot),
        .M4_ARQOS(master_if[4].arqos),
        .M4_ARVALID(master_if[4].arvalid),
        .M4_ARREADY(master_if[4].arready),
        
        // Read data channel
        .M4_RID(master_if[4].rid),
        .M4_RDATA(master_if[4].rdata),
        .M4_RRESP(master_if[4].rresp),
        .M4_RLAST(master_if[4].rlast),
        .M4_RVALID(master_if[4].rvalid),
        .M4_RREADY(master_if[4].rready),
        // Master 5 connections
        .M5_AWID(master_if[5].awid),
        .M5_AWADDR(master_if[5].awaddr),
        .M5_AWLEN(master_if[5].awlen),
        .M5_AWSIZE(master_if[5].awsize),
        .M5_AWBURST(master_if[5].awburst),
        .M5_AWLOCK(master_if[5].awlock),
        .M5_AWCACHE(master_if[5].awcache),
        .M5_AWPROT(master_if[5].awprot),
        .M5_AWQOS(master_if[5].awqos),
        .M5_AWVALID(master_if[5].awvalid),
        .M5_AWREADY(master_if[5].awready),
        
        // Write data channel
        .M5_WDATA(master_if[5].wdata),
        .M5_WSTRB(master_if[5].wstrb),
        .M5_WLAST(master_if[5].wlast),
        .M5_WVALID(master_if[5].wvalid),
        .M5_WREADY(master_if[5].wready),
        
        // Write response channel
        .M5_BID(master_if[5].bid),
        .M5_BRESP(master_if[5].bresp),
        .M5_BVALID(master_if[5].bvalid),
        .M5_BREADY(master_if[5].bready),
        
        // Read address channel
        .M5_ARID(master_if[5].arid),
        .M5_ARADDR(master_if[5].araddr),
        .M5_ARLEN(master_if[5].arlen),
        .M5_ARSIZE(master_if[5].arsize),
        .M5_ARBURST(master_if[5].arburst),
        .M5_ARLOCK(master_if[5].arlock),
        .M5_ARCACHE(master_if[5].arcache),
        .M5_ARPROT(master_if[5].arprot),
        .M5_ARQOS(master_if[5].arqos),
        .M5_ARVALID(master_if[5].arvalid),
        .M5_ARREADY(master_if[5].arready),
        
        // Read data channel
        .M5_RID(master_if[5].rid),
        .M5_RDATA(master_if[5].rdata),
        .M5_RRESP(master_if[5].rresp),
        .M5_RLAST(master_if[5].rlast),
        .M5_RVALID(master_if[5].rvalid),
        .M5_RREADY(master_if[5].rready),
        // Master 6 connections
        .M6_AWID(master_if[6].awid),
        .M6_AWADDR(master_if[6].awaddr),
        .M6_AWLEN(master_if[6].awlen),
        .M6_AWSIZE(master_if[6].awsize),
        .M6_AWBURST(master_if[6].awburst),
        .M6_AWLOCK(master_if[6].awlock),
        .M6_AWCACHE(master_if[6].awcache),
        .M6_AWPROT(master_if[6].awprot),
        .M6_AWQOS(master_if[6].awqos),
        .M6_AWVALID(master_if[6].awvalid),
        .M6_AWREADY(master_if[6].awready),
        
        // Write data channel
        .M6_WDATA(master_if[6].wdata),
        .M6_WSTRB(master_if[6].wstrb),
        .M6_WLAST(master_if[6].wlast),
        .M6_WVALID(master_if[6].wvalid),
        .M6_WREADY(master_if[6].wready),
        
        // Write response channel
        .M6_BID(master_if[6].bid),
        .M6_BRESP(master_if[6].bresp),
        .M6_BVALID(master_if[6].bvalid),
        .M6_BREADY(master_if[6].bready),
        
        // Read address channel
        .M6_ARID(master_if[6].arid),
        .M6_ARADDR(master_if[6].araddr),
        .M6_ARLEN(master_if[6].arlen),
        .M6_ARSIZE(master_if[6].arsize),
        .M6_ARBURST(master_if[6].arburst),
        .M6_ARLOCK(master_if[6].arlock),
        .M6_ARCACHE(master_if[6].arcache),
        .M6_ARPROT(master_if[6].arprot),
        .M6_ARQOS(master_if[6].arqos),
        .M6_ARVALID(master_if[6].arvalid),
        .M6_ARREADY(master_if[6].arready),
        
        // Read data channel
        .M6_RID(master_if[6].rid),
        .M6_RDATA(master_if[6].rdata),
        .M6_RRESP(master_if[6].rresp),
        .M6_RLAST(master_if[6].rlast),
        .M6_RVALID(master_if[6].rvalid),
        .M6_RREADY(master_if[6].rready),
        // Master 7 connections
        .M7_AWID(master_if[7].awid),
        .M7_AWADDR(master_if[7].awaddr),
        .M7_AWLEN(master_if[7].awlen),
        .M7_AWSIZE(master_if[7].awsize),
        .M7_AWBURST(master_if[7].awburst),
        .M7_AWLOCK(master_if[7].awlock),
        .M7_AWCACHE(master_if[7].awcache),
        .M7_AWPROT(master_if[7].awprot),
        .M7_AWQOS(master_if[7].awqos),
        .M7_AWVALID(master_if[7].awvalid),
        .M7_AWREADY(master_if[7].awready),
        
        // Write data channel
        .M7_WDATA(master_if[7].wdata),
        .M7_WSTRB(master_if[7].wstrb),
        .M7_WLAST(master_if[7].wlast),
        .M7_WVALID(master_if[7].wvalid),
        .M7_WREADY(master_if[7].wready),
        
        // Write response channel
        .M7_BID(master_if[7].bid),
        .M7_BRESP(master_if[7].bresp),
        .M7_BVALID(master_if[7].bvalid),
        .M7_BREADY(master_if[7].bready),
        
        // Read address channel
        .M7_ARID(master_if[7].arid),
        .M7_ARADDR(master_if[7].araddr),
        .M7_ARLEN(master_if[7].arlen),
        .M7_ARSIZE(master_if[7].arsize),
        .M7_ARBURST(master_if[7].arburst),
        .M7_ARLOCK(master_if[7].arlock),
        .M7_ARCACHE(master_if[7].arcache),
        .M7_ARPROT(master_if[7].arprot),
        .M7_ARQOS(master_if[7].arqos),
        .M7_ARVALID(master_if[7].arvalid),
        .M7_ARREADY(master_if[7].arready),
        
        // Read data channel
        .M7_RID(master_if[7].rid),
        .M7_RDATA(master_if[7].rdata),
        .M7_RRESP(master_if[7].rresp),
        .M7_RLAST(master_if[7].rlast),
        .M7_RVALID(master_if[7].rvalid),
        .M7_RREADY(master_if[7].rready),
        // Master 8 connections
        .M8_AWID(master_if[8].awid),
        .M8_AWADDR(master_if[8].awaddr),
        .M8_AWLEN(master_if[8].awlen),
        .M8_AWSIZE(master_if[8].awsize),
        .M8_AWBURST(master_if[8].awburst),
        .M8_AWLOCK(master_if[8].awlock),
        .M8_AWCACHE(master_if[8].awcache),
        .M8_AWPROT(master_if[8].awprot),
        .M8_AWQOS(master_if[8].awqos),
        .M8_AWVALID(master_if[8].awvalid),
        .M8_AWREADY(master_if[8].awready),
        
        // Write data channel
        .M8_WDATA(master_if[8].wdata),
        .M8_WSTRB(master_if[8].wstrb),
        .M8_WLAST(master_if[8].wlast),
        .M8_WVALID(master_if[8].wvalid),
        .M8_WREADY(master_if[8].wready),
        
        // Write response channel
        .M8_BID(master_if[8].bid),
        .M8_BRESP(master_if[8].bresp),
        .M8_BVALID(master_if[8].bvalid),
        .M8_BREADY(master_if[8].bready),
        
        // Read address channel
        .M8_ARID(master_if[8].arid),
        .M8_ARADDR(master_if[8].araddr),
        .M8_ARLEN(master_if[8].arlen),
        .M8_ARSIZE(master_if[8].arsize),
        .M8_ARBURST(master_if[8].arburst),
        .M8_ARLOCK(master_if[8].arlock),
        .M8_ARCACHE(master_if[8].arcache),
        .M8_ARPROT(master_if[8].arprot),
        .M8_ARQOS(master_if[8].arqos),
        .M8_ARVALID(master_if[8].arvalid),
        .M8_ARREADY(master_if[8].arready),
        
        // Read data channel
        .M8_RID(master_if[8].rid),
        .M8_RDATA(master_if[8].rdata),
        .M8_RRESP(master_if[8].rresp),
        .M8_RLAST(master_if[8].rlast),
        .M8_RVALID(master_if[8].rvalid),
        .M8_RREADY(master_if[8].rready),
        // Master 9 connections
        .M9_AWID(master_if[9].awid),
        .M9_AWADDR(master_if[9].awaddr),
        .M9_AWLEN(master_if[9].awlen),
        .M9_AWSIZE(master_if[9].awsize),
        .M9_AWBURST(master_if[9].awburst),
        .M9_AWLOCK(master_if[9].awlock),
        .M9_AWCACHE(master_if[9].awcache),
        .M9_AWPROT(master_if[9].awprot),
        .M9_AWQOS(master_if[9].awqos),
        .M9_AWVALID(master_if[9].awvalid),
        .M9_AWREADY(master_if[9].awready),
        
        // Write data channel
        .M9_WDATA(master_if[9].wdata),
        .M9_WSTRB(master_if[9].wstrb),
        .M9_WLAST(master_if[9].wlast),
        .M9_WVALID(master_if[9].wvalid),
        .M9_WREADY(master_if[9].wready),
        
        // Write response channel
        .M9_BID(master_if[9].bid),
        .M9_BRESP(master_if[9].bresp),
        .M9_BVALID(master_if[9].bvalid),
        .M9_BREADY(master_if[9].bready),
        
        // Read address channel
        .M9_ARID(master_if[9].arid),
        .M9_ARADDR(master_if[9].araddr),
        .M9_ARLEN(master_if[9].arlen),
        .M9_ARSIZE(master_if[9].arsize),
        .M9_ARBURST(master_if[9].arburst),
        .M9_ARLOCK(master_if[9].arlock),
        .M9_ARCACHE(master_if[9].arcache),
        .M9_ARPROT(master_if[9].arprot),
        .M9_ARQOS(master_if[9].arqos),
        .M9_ARVALID(master_if[9].arvalid),
        .M9_ARREADY(master_if[9].arready),
        
        // Read data channel
        .M9_RID(master_if[9].rid),
        .M9_RDATA(master_if[9].rdata),
        .M9_RRESP(master_if[9].rresp),
        .M9_RLAST(master_if[9].rlast),
        .M9_RVALID(master_if[9].rvalid),
        .M9_RREADY(master_if[9].rready),
        // Master 10 connections
        .M10_AWID(master_if[10].awid),
        .M10_AWADDR(master_if[10].awaddr),
        .M10_AWLEN(master_if[10].awlen),
        .M10_AWSIZE(master_if[10].awsize),
        .M10_AWBURST(master_if[10].awburst),
        .M10_AWLOCK(master_if[10].awlock),
        .M10_AWCACHE(master_if[10].awcache),
        .M10_AWPROT(master_if[10].awprot),
        .M10_AWQOS(master_if[10].awqos),
        .M10_AWVALID(master_if[10].awvalid),
        .M10_AWREADY(master_if[10].awready),
        
        // Write data channel
        .M10_WDATA(master_if[10].wdata),
        .M10_WSTRB(master_if[10].wstrb),
        .M10_WLAST(master_if[10].wlast),
        .M10_WVALID(master_if[10].wvalid),
        .M10_WREADY(master_if[10].wready),
        
        // Write response channel
        .M10_BID(master_if[10].bid),
        .M10_BRESP(master_if[10].bresp),
        .M10_BVALID(master_if[10].bvalid),
        .M10_BREADY(master_if[10].bready),
        
        // Read address channel
        .M10_ARID(master_if[10].arid),
        .M10_ARADDR(master_if[10].araddr),
        .M10_ARLEN(master_if[10].arlen),
        .M10_ARSIZE(master_if[10].arsize),
        .M10_ARBURST(master_if[10].arburst),
        .M10_ARLOCK(master_if[10].arlock),
        .M10_ARCACHE(master_if[10].arcache),
        .M10_ARPROT(master_if[10].arprot),
        .M10_ARQOS(master_if[10].arqos),
        .M10_ARVALID(master_if[10].arvalid),
        .M10_ARREADY(master_if[10].arready),
        
        // Read data channel
        .M10_RID(master_if[10].rid),
        .M10_RDATA(master_if[10].rdata),
        .M10_RRESP(master_if[10].rresp),
        .M10_RLAST(master_if[10].rlast),
        .M10_RVALID(master_if[10].rvalid),
        .M10_RREADY(master_if[10].rready),
        
        // Slave 0 connections
        .S0_AWID(slave_if[0].awid),
        .S0_AWADDR(slave_if[0].awaddr),
        .S0_AWLEN(slave_if[0].awlen),
        .S0_AWSIZE(slave_if[0].awsize),
        .S0_AWBURST(slave_if[0].awburst),
        .S0_AWLOCK(slave_if[0].awlock),
        .S0_AWCACHE(slave_if[0].awcache),
        .S0_AWPROT(slave_if[0].awprot),
        .S0_AWQOS(slave_if[0].awqos),
        .S0_AWVALID(slave_if[0].awvalid),
        .S0_AWREADY(slave_if[0].awready),
        
        // Write data channel
        .S0_WDATA(slave_if[0].wdata),
        .S0_WSTRB(slave_if[0].wstrb),
        .S0_WLAST(slave_if[0].wlast),
        .S0_WVALID(slave_if[0].wvalid),
        .S0_WREADY(slave_if[0].wready),
        
        // Write response channel
        .S0_BID(slave_if[0].bid),
        .S0_BRESP(slave_if[0].bresp),
        .S0_BVALID(slave_if[0].bvalid),
        .S0_BREADY(slave_if[0].bready),
        
        // Read address channel
        .S0_ARID(slave_if[0].arid),
        .S0_ARADDR(slave_if[0].araddr),
        .S0_ARLEN(slave_if[0].arlen),
        .S0_ARSIZE(slave_if[0].arsize),
        .S0_ARBURST(slave_if[0].arburst),
        .S0_ARLOCK(slave_if[0].arlock),
        .S0_ARCACHE(slave_if[0].arcache),
        .S0_ARPROT(slave_if[0].arprot),
        .S0_ARQOS(slave_if[0].arqos),
        .S0_ARVALID(slave_if[0].arvalid),
        .S0_ARREADY(slave_if[0].arready),
        
        // Read data channel
        .S0_RID(slave_if[0].rid),
        .S0_RDATA(slave_if[0].rdata),
        .S0_RRESP(slave_if[0].rresp),
        .S0_RLAST(slave_if[0].rlast),
        .S0_RVALID(slave_if[0].rvalid),
        .S0_RREADY(slave_if[0].rready),
        
        // Slave 1 connections
        .S1_AWID(slave_if[1].awid),
        .S1_AWADDR(slave_if[1].awaddr),
        .S1_AWLEN(slave_if[1].awlen),
        .S1_AWSIZE(slave_if[1].awsize),
        .S1_AWBURST(slave_if[1].awburst),
        .S1_AWLOCK(slave_if[1].awlock),
        .S1_AWCACHE(slave_if[1].awcache),
        .S1_AWPROT(slave_if[1].awprot),
        .S1_AWQOS(slave_if[1].awqos),
        .S1_AWVALID(slave_if[1].awvalid),
        .S1_AWREADY(slave_if[1].awready),
        
        // Write data channel
        .S1_WDATA(slave_if[1].wdata),
        .S1_WSTRB(slave_if[1].wstrb),
        .S1_WLAST(slave_if[1].wlast),
        .S1_WVALID(slave_if[1].wvalid),
        .S1_WREADY(slave_if[1].wready),
        
        // Write response channel
        .S1_BID(slave_if[1].bid),
        .S1_BRESP(slave_if[1].bresp),
        .S1_BVALID(slave_if[1].bvalid),
        .S1_BREADY(slave_if[1].bready),
        
        // Read address channel
        .S1_ARID(slave_if[1].arid),
        .S1_ARADDR(slave_if[1].araddr),
        .S1_ARLEN(slave_if[1].arlen),
        .S1_ARSIZE(slave_if[1].arsize),
        .S1_ARBURST(slave_if[1].arburst),
        .S1_ARLOCK(slave_if[1].arlock),
        .S1_ARCACHE(slave_if[1].arcache),
        .S1_ARPROT(slave_if[1].arprot),
        .S1_ARQOS(slave_if[1].arqos),
        .S1_ARVALID(slave_if[1].arvalid),
        .S1_ARREADY(slave_if[1].arready),
        
        // Read data channel
        .S1_RID(slave_if[1].rid),
        .S1_RDATA(slave_if[1].rdata),
        .S1_RRESP(slave_if[1].rresp),
        .S1_RLAST(slave_if[1].rlast),
        .S1_RVALID(slave_if[1].rvalid),
        .S1_RREADY(slave_if[1].rready),
        
        // Slave 2 connections
        .S2_AWID(slave_if[2].awid),
        .S2_AWADDR(slave_if[2].awaddr),
        .S2_AWLEN(slave_if[2].awlen),
        .S2_AWSIZE(slave_if[2].awsize),
        .S2_AWBURST(slave_if[2].awburst),
        .S2_AWLOCK(slave_if[2].awlock),
        .S2_AWCACHE(slave_if[2].awcache),
        .S2_AWPROT(slave_if[2].awprot),
        .S2_AWQOS(slave_if[2].awqos),
        .S2_AWVALID(slave_if[2].awvalid),
        .S2_AWREADY(slave_if[2].awready),
        
        // Write data channel
        .S2_WDATA(slave_if[2].wdata),
        .S2_WSTRB(slave_if[2].wstrb),
        .S2_WLAST(slave_if[2].wlast),
        .S2_WVALID(slave_if[2].wvalid),
        .S2_WREADY(slave_if[2].wready),
        
        // Write response channel
        .S2_BID(slave_if[2].bid),
        .S2_BRESP(slave_if[2].bresp),
        .S2_BVALID(slave_if[2].bvalid),
        .S2_BREADY(slave_if[2].bready),
        
        // Read address channel
        .S2_ARID(slave_if[2].arid),
        .S2_ARADDR(slave_if[2].araddr),
        .S2_ARLEN(slave_if[2].arlen),
        .S2_ARSIZE(slave_if[2].arsize),
        .S2_ARBURST(slave_if[2].arburst),
        .S2_ARLOCK(slave_if[2].arlock),
        .S2_ARCACHE(slave_if[2].arcache),
        .S2_ARPROT(slave_if[2].arprot),
        .S2_ARQOS(slave_if[2].arqos),
        .S2_ARVALID(slave_if[2].arvalid),
        .S2_ARREADY(slave_if[2].arready),
        
        // Read data channel
        .S2_RID(slave_if[2].rid),
        .S2_RDATA(slave_if[2].rdata),
        .S2_RRESP(slave_if[2].rresp),
        .S2_RLAST(slave_if[2].rlast),
        .S2_RVALID(slave_if[2].rvalid),
        .S2_RREADY(slave_if[2].rready),
        
        // Slave 3 connections
        .S3_AWID(slave_if[3].awid),
        .S3_AWADDR(slave_if[3].awaddr),
        .S3_AWLEN(slave_if[3].awlen),
        .S3_AWSIZE(slave_if[3].awsize),
        .S3_AWBURST(slave_if[3].awburst),
        .S3_AWLOCK(slave_if[3].awlock),
        .S3_AWCACHE(slave_if[3].awcache),
        .S3_AWPROT(slave_if[3].awprot),
        .S3_AWQOS(slave_if[3].awqos),
        .S3_AWVALID(slave_if[3].awvalid),
        .S3_AWREADY(slave_if[3].awready),
        
        // Write data channel
        .S3_WDATA(slave_if[3].wdata),
        .S3_WSTRB(slave_if[3].wstrb),
        .S3_WLAST(slave_if[3].wlast),
        .S3_WVALID(slave_if[3].wvalid),
        .S3_WREADY(slave_if[3].wready),
        
        // Write response channel
        .S3_BID(slave_if[3].bid),
        .S3_BRESP(slave_if[3].bresp),
        .S3_BVALID(slave_if[3].bvalid),
        .S3_BREADY(slave_if[3].bready),
        
        // Read address channel
        .S3_ARID(slave_if[3].arid),
        .S3_ARADDR(slave_if[3].araddr),
        .S3_ARLEN(slave_if[3].arlen),
        .S3_ARSIZE(slave_if[3].arsize),
        .S3_ARBURST(slave_if[3].arburst),
        .S3_ARLOCK(slave_if[3].arlock),
        .S3_ARCACHE(slave_if[3].arcache),
        .S3_ARPROT(slave_if[3].arprot),
        .S3_ARQOS(slave_if[3].arqos),
        .S3_ARVALID(slave_if[3].arvalid),
        .S3_ARREADY(slave_if[3].arready),
        
        // Read data channel
        .S3_RID(slave_if[3].rid),
        .S3_RDATA(slave_if[3].rdata),
        .S3_RRESP(slave_if[3].rresp),
        .S3_RLAST(slave_if[3].rlast),
        .S3_RVALID(slave_if[3].rvalid),
        .S3_RREADY(slave_if[3].rready),
        
        // Slave 4 connections
        .S4_AWID(slave_if[4].awid),
        .S4_AWADDR(slave_if[4].awaddr),
        .S4_AWLEN(slave_if[4].awlen),
        .S4_AWSIZE(slave_if[4].awsize),
        .S4_AWBURST(slave_if[4].awburst),
        .S4_AWLOCK(slave_if[4].awlock),
        .S4_AWCACHE(slave_if[4].awcache),
        .S4_AWPROT(slave_if[4].awprot),
        .S4_AWQOS(slave_if[4].awqos),
        .S4_AWVALID(slave_if[4].awvalid),
        .S4_AWREADY(slave_if[4].awready),
        
        // Write data channel
        .S4_WDATA(slave_if[4].wdata),
        .S4_WSTRB(slave_if[4].wstrb),
        .S4_WLAST(slave_if[4].wlast),
        .S4_WVALID(slave_if[4].wvalid),
        .S4_WREADY(slave_if[4].wready),
        
        // Write response channel
        .S4_BID(slave_if[4].bid),
        .S4_BRESP(slave_if[4].bresp),
        .S4_BVALID(slave_if[4].bvalid),
        .S4_BREADY(slave_if[4].bready),
        
        // Read address channel
        .S4_ARID(slave_if[4].arid),
        .S4_ARADDR(slave_if[4].araddr),
        .S4_ARLEN(slave_if[4].arlen),
        .S4_ARSIZE(slave_if[4].arsize),
        .S4_ARBURST(slave_if[4].arburst),
        .S4_ARLOCK(slave_if[4].arlock),
        .S4_ARCACHE(slave_if[4].arcache),
        .S4_ARPROT(slave_if[4].arprot),
        .S4_ARQOS(slave_if[4].arqos),
        .S4_ARVALID(slave_if[4].arvalid),
        .S4_ARREADY(slave_if[4].arready),
        
        // Read data channel
        .S4_RID(slave_if[4].rid),
        .S4_RDATA(slave_if[4].rdata),
        .S4_RRESP(slave_if[4].rresp),
        .S4_RLAST(slave_if[4].rlast),
        .S4_RVALID(slave_if[4].rvalid),
        .S4_RREADY(slave_if[4].rready),
        
        // Slave 5 connections
        .S5_AWID(slave_if[5].awid),
        .S5_AWADDR(slave_if[5].awaddr),
        .S5_AWLEN(slave_if[5].awlen),
        .S5_AWSIZE(slave_if[5].awsize),
        .S5_AWBURST(slave_if[5].awburst),
        .S5_AWLOCK(slave_if[5].awlock),
        .S5_AWCACHE(slave_if[5].awcache),
        .S5_AWPROT(slave_if[5].awprot),
        .S5_AWQOS(slave_if[5].awqos),
        .S5_AWVALID(slave_if[5].awvalid),
        .S5_AWREADY(slave_if[5].awready),
        
        // Write data channel
        .S5_WDATA(slave_if[5].wdata),
        .S5_WSTRB(slave_if[5].wstrb),
        .S5_WLAST(slave_if[5].wlast),
        .S5_WVALID(slave_if[5].wvalid),
        .S5_WREADY(slave_if[5].wready),
        
        // Write response channel
        .S5_BID(slave_if[5].bid),
        .S5_BRESP(slave_if[5].bresp),
        .S5_BVALID(slave_if[5].bvalid),
        .S5_BREADY(slave_if[5].bready),
        
        // Read address channel
        .S5_ARID(slave_if[5].arid),
        .S5_ARADDR(slave_if[5].araddr),
        .S5_ARLEN(slave_if[5].arlen),
        .S5_ARSIZE(slave_if[5].arsize),
        .S5_ARBURST(slave_if[5].arburst),
        .S5_ARLOCK(slave_if[5].arlock),
        .S5_ARCACHE(slave_if[5].arcache),
        .S5_ARPROT(slave_if[5].arprot),
        .S5_ARQOS(slave_if[5].arqos),
        .S5_ARVALID(slave_if[5].arvalid),
        .S5_ARREADY(slave_if[5].arready),
        
        // Read data channel
        .S5_RID(slave_if[5].rid),
        .S5_RDATA(slave_if[5].rdata),
        .S5_RRESP(slave_if[5].rresp),
        .S5_RLAST(slave_if[5].rlast),
        .S5_RVALID(slave_if[5].rvalid),
        .S5_RREADY(slave_if[5].rready),
        
        // Slave 6 connections
        .S6_AWID(slave_if[6].awid),
        .S6_AWADDR(slave_if[6].awaddr),
        .S6_AWLEN(slave_if[6].awlen),
        .S6_AWSIZE(slave_if[6].awsize),
        .S6_AWBURST(slave_if[6].awburst),
        .S6_AWLOCK(slave_if[6].awlock),
        .S6_AWCACHE(slave_if[6].awcache),
        .S6_AWPROT(slave_if[6].awprot),
        .S6_AWQOS(slave_if[6].awqos),
        .S6_AWVALID(slave_if[6].awvalid),
        .S6_AWREADY(slave_if[6].awready),
        
        // Write data channel
        .S6_WDATA(slave_if[6].wdata),
        .S6_WSTRB(slave_if[6].wstrb),
        .S6_WLAST(slave_if[6].wlast),
        .S6_WVALID(slave_if[6].wvalid),
        .S6_WREADY(slave_if[6].wready),
        
        // Write response channel
        .S6_BID(slave_if[6].bid),
        .S6_BRESP(slave_if[6].bresp),
        .S6_BVALID(slave_if[6].bvalid),
        .S6_BREADY(slave_if[6].bready),
        
        // Read address channel
        .S6_ARID(slave_if[6].arid),
        .S6_ARADDR(slave_if[6].araddr),
        .S6_ARLEN(slave_if[6].arlen),
        .S6_ARSIZE(slave_if[6].arsize),
        .S6_ARBURST(slave_if[6].arburst),
        .S6_ARLOCK(slave_if[6].arlock),
        .S6_ARCACHE(slave_if[6].arcache),
        .S6_ARPROT(slave_if[6].arprot),
        .S6_ARQOS(slave_if[6].arqos),
        .S6_ARVALID(slave_if[6].arvalid),
        .S6_ARREADY(slave_if[6].arready),
        
        // Read data channel
        .S6_RID(slave_if[6].rid),
        .S6_RDATA(slave_if[6].rdata),
        .S6_RRESP(slave_if[6].rresp),
        .S6_RLAST(slave_if[6].rlast),
        .S6_RVALID(slave_if[6].rvalid),
        .S6_RREADY(slave_if[6].rready),
        
        // Slave 7 connections
        .S7_AWID(slave_if[7].awid),
        .S7_AWADDR(slave_if[7].awaddr),
        .S7_AWLEN(slave_if[7].awlen),
        .S7_AWSIZE(slave_if[7].awsize),
        .S7_AWBURST(slave_if[7].awburst),
        .S7_AWLOCK(slave_if[7].awlock),
        .S7_AWCACHE(slave_if[7].awcache),
        .S7_AWPROT(slave_if[7].awprot),
        .S7_AWQOS(slave_if[7].awqos),
        .S7_AWVALID(slave_if[7].awvalid),
        .S7_AWREADY(slave_if[7].awready),
        
        // Write data channel
        .S7_WDATA(slave_if[7].wdata),
        .S7_WSTRB(slave_if[7].wstrb),
        .S7_WLAST(slave_if[7].wlast),
        .S7_WVALID(slave_if[7].wvalid),
        .S7_WREADY(slave_if[7].wready),
        
        // Write response channel
        .S7_BID(slave_if[7].bid),
        .S7_BRESP(slave_if[7].bresp),
        .S7_BVALID(slave_if[7].bvalid),
        .S7_BREADY(slave_if[7].bready),
        
        // Read address channel
        .S7_ARID(slave_if[7].arid),
        .S7_ARADDR(slave_if[7].araddr),
        .S7_ARLEN(slave_if[7].arlen),
        .S7_ARSIZE(slave_if[7].arsize),
        .S7_ARBURST(slave_if[7].arburst),
        .S7_ARLOCK(slave_if[7].arlock),
        .S7_ARCACHE(slave_if[7].arcache),
        .S7_ARPROT(slave_if[7].arprot),
        .S7_ARQOS(slave_if[7].arqos),
        .S7_ARVALID(slave_if[7].arvalid),
        .S7_ARREADY(slave_if[7].arready),
        
        // Read data channel
        .S7_RID(slave_if[7].rid),
        .S7_RDATA(slave_if[7].rdata),
        .S7_RRESP(slave_if[7].rresp),
        .S7_RLAST(slave_if[7].rlast),
        .S7_RVALID(slave_if[7].rvalid),
        .S7_RREADY(slave_if[7].rready),
        
        // Slave 8 connections
        .S8_AWID(slave_if[8].awid),
        .S8_AWADDR(slave_if[8].awaddr),
        .S8_AWLEN(slave_if[8].awlen),
        .S8_AWSIZE(slave_if[8].awsize),
        .S8_AWBURST(slave_if[8].awburst),
        .S8_AWLOCK(slave_if[8].awlock),
        .S8_AWCACHE(slave_if[8].awcache),
        .S8_AWPROT(slave_if[8].awprot),
        .S8_AWQOS(slave_if[8].awqos),
        .S8_AWVALID(slave_if[8].awvalid),
        .S8_AWREADY(slave_if[8].awready),
        
        // Write data channel
        .S8_WDATA(slave_if[8].wdata),
        .S8_WSTRB(slave_if[8].wstrb),
        .S8_WLAST(slave_if[8].wlast),
        .S8_WVALID(slave_if[8].wvalid),
        .S8_WREADY(slave_if[8].wready),
        
        // Write response channel
        .S8_BID(slave_if[8].bid),
        .S8_BRESP(slave_if[8].bresp),
        .S8_BVALID(slave_if[8].bvalid),
        .S8_BREADY(slave_if[8].bready),
        
        // Read address channel
        .S8_ARID(slave_if[8].arid),
        .S8_ARADDR(slave_if[8].araddr),
        .S8_ARLEN(slave_if[8].arlen),
        .S8_ARSIZE(slave_if[8].arsize),
        .S8_ARBURST(slave_if[8].arburst),
        .S8_ARLOCK(slave_if[8].arlock),
        .S8_ARCACHE(slave_if[8].arcache),
        .S8_ARPROT(slave_if[8].arprot),
        .S8_ARQOS(slave_if[8].arqos),
        .S8_ARVALID(slave_if[8].arvalid),
        .S8_ARREADY(slave_if[8].arready),
        
        // Read data channel
        .S8_RID(slave_if[8].rid),
        .S8_RDATA(slave_if[8].rdata),
        .S8_RRESP(slave_if[8].rresp),
        .S8_RLAST(slave_if[8].rlast),
        .S8_RVALID(slave_if[8].rvalid),
        .S8_RREADY(slave_if[8].rready),
        
        // Slave 9 connections
        .S9_AWID(slave_if[9].awid),
        .S9_AWADDR(slave_if[9].awaddr),
        .S9_AWLEN(slave_if[9].awlen),
        .S9_AWSIZE(slave_if[9].awsize),
        .S9_AWBURST(slave_if[9].awburst),
        .S9_AWLOCK(slave_if[9].awlock),
        .S9_AWCACHE(slave_if[9].awcache),
        .S9_AWPROT(slave_if[9].awprot),
        .S9_AWQOS(slave_if[9].awqos),
        .S9_AWVALID(slave_if[9].awvalid),
        .S9_AWREADY(slave_if[9].awready),
        
        // Write data channel
        .S9_WDATA(slave_if[9].wdata),
        .S9_WSTRB(slave_if[9].wstrb),
        .S9_WLAST(slave_if[9].wlast),
        .S9_WVALID(slave_if[9].wvalid),
        .S9_WREADY(slave_if[9].wready),
        
        // Write response channel
        .S9_BID(slave_if[9].bid),
        .S9_BRESP(slave_if[9].bresp),
        .S9_BVALID(slave_if[9].bvalid),
        .S9_BREADY(slave_if[9].bready),
        
        // Read address channel
        .S9_ARID(slave_if[9].arid),
        .S9_ARADDR(slave_if[9].araddr),
        .S9_ARLEN(slave_if[9].arlen),
        .S9_ARSIZE(slave_if[9].arsize),
        .S9_ARBURST(slave_if[9].arburst),
        .S9_ARLOCK(slave_if[9].arlock),
        .S9_ARCACHE(slave_if[9].arcache),
        .S9_ARPROT(slave_if[9].arprot),
        .S9_ARQOS(slave_if[9].arqos),
        .S9_ARVALID(slave_if[9].arvalid),
        .S9_ARREADY(slave_if[9].arready),
        
        // Read data channel
        .S9_RID(slave_if[9].rid),
        .S9_RDATA(slave_if[9].rdata),
        .S9_RRESP(slave_if[9].rresp),
        .S9_RLAST(slave_if[9].rlast),
        .S9_RVALID(slave_if[9].rvalid),
        .S9_RREADY(slave_if[9].rready),
        
        // Slave 10 connections
        .S10_AWID(slave_if[10].awid),
        .S10_AWADDR(slave_if[10].awaddr),
        .S10_AWLEN(slave_if[10].awlen),
        .S10_AWSIZE(slave_if[10].awsize),
        .S10_AWBURST(slave_if[10].awburst),
        .S10_AWLOCK(slave_if[10].awlock),
        .S10_AWCACHE(slave_if[10].awcache),
        .S10_AWPROT(slave_if[10].awprot),
        .S10_AWQOS(slave_if[10].awqos),
        .S10_AWVALID(slave_if[10].awvalid),
        .S10_AWREADY(slave_if[10].awready),
        
        // Write data channel
        .S10_WDATA(slave_if[10].wdata),
        .S10_WSTRB(slave_if[10].wstrb),
        .S10_WLAST(slave_if[10].wlast),
        .S10_WVALID(slave_if[10].wvalid),
        .S10_WREADY(slave_if[10].wready),
        
        // Write response channel
        .S10_BID(slave_if[10].bid),
        .S10_BRESP(slave_if[10].bresp),
        .S10_BVALID(slave_if[10].bvalid),
        .S10_BREADY(slave_if[10].bready),
        
        // Read address channel
        .S10_ARID(slave_if[10].arid),
        .S10_ARADDR(slave_if[10].araddr),
        .S10_ARLEN(slave_if[10].arlen),
        .S10_ARSIZE(slave_if[10].arsize),
        .S10_ARBURST(slave_if[10].arburst),
        .S10_ARLOCK(slave_if[10].arlock),
        .S10_ARCACHE(slave_if[10].arcache),
        .S10_ARPROT(slave_if[10].arprot),
        .S10_ARQOS(slave_if[10].arqos),
        .S10_ARVALID(slave_if[10].arvalid),
        .S10_ARREADY(slave_if[10].arready),
        
        // Read data channel
        .S10_RID(slave_if[10].rid),
        .S10_RDATA(slave_if[10].rdata),
        .S10_RRESP(slave_if[10].rresp),
        .S10_RLAST(slave_if[10].rlast),
        .S10_RVALID(slave_if[10].rvalid),
        .S10_RREADY(slave_if[10].rready)
    );

endmodule : dut_wrapper
