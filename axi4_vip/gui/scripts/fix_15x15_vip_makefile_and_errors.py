#!/usr/bin/env python3
"""
Comprehensive fix for 15x15 VIP Makefile and compilation errors
1. Fix Makefile to match working 16x16 reference
2. Fix syntax errors in BFM files  
3. Update VIP generator script
"""

import os
import sys
import shutil
from datetime import datetime

def fix_15x15_makefile():
    """Fix the 15x15 Makefile to match the working 16x16 structure"""
    
    vip_15x15_makefile = "/home/timtim01/eda_test/project/gen_amba_2025/15x15_vip2/axi4_vip_env_rtl_integration/sim/Makefile"
    vip_16x16_makefile = "/home/timtim01/eda_test/project/gen_amba_2025/16x16_vip/axi4_vip_env_rtl_integration/sim/Makefile"
    
    if not os.path.exists(vip_15x15_makefile):
        print(f"‚ùå 15x15 Makefile not found: {vip_15x15_makefile}")
        return False
    
    if not os.path.exists(vip_16x16_makefile):
        print(f"‚ùå 16x16 reference Makefile not found: {vip_16x16_makefile}")
        return False
    
    # Backup the original
    backup_file = vip_15x15_makefile + ".backup_" + datetime.now().strftime("%Y%m%d_%H%M%S")
    shutil.copy2(vip_15x15_makefile, backup_file)
    print(f"‚úÖ Backed up original: {backup_file}")
    
    # Read the working 16x16 Makefile
    with open(vip_16x16_makefile, 'r') as f:
        reference_content = f.read()
    
    # Update the date and comment to reflect 15x15
    updated_content = reference_content.replace(
        "# Date: 2025-08-04 09:53:21",
        f"# Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )
    
    updated_content = updated_content.replace(
        "# Generated by AMBA Bus Matrix Configuration Tool",
        "# Generated by AMBA Bus Matrix Configuration Tool (15x15 Matrix)"
    )
    
    # Write the fixed Makefile
    with open(vip_15x15_makefile, 'w') as f:
        f.write(updated_content)
    
    print(f"‚úÖ Fixed 15x15 Makefile using working 16x16 structure")
    return True

def fix_bfm_syntax_errors():
    """Fix syntax errors in BFM files"""
    
    fixes_applied = 0
    
    # Fix 1: Slave driver BFM automatic keyword issue
    slave_driver_bfm = "/home/timtim01/eda_test/project/gen_amba_2025/15x15_vip2/axi4_vip_env_rtl_integration/agent/slave_agent_bfm/axi4_slave_driver_bfm.sv"
    
    if os.path.exists(slave_driver_bfm):
        print(f"üîß Fixing slave driver BFM: {slave_driver_bfm}")
        
        # Backup
        backup_file = slave_driver_bfm + ".backup_" + datetime.now().strftime("%Y%m%d_%H%M%S")
        shutil.copy2(slave_driver_bfm, backup_file)
        
        with open(slave_driver_bfm, 'r') as f:
            content = f.read()
        
        # Fix the automatic keyword syntax error
        old_line = "                automatic logic [ADDR_WIDTH-1:0] beat_addr = pending_awaddr + (write_beat_count * (DATA_WIDTH/8));"
        new_line = "                logic [ADDR_WIDTH-1:0] beat_addr = pending_awaddr + (write_beat_count * (DATA_WIDTH/8));"
        
        if old_line in content:
            content = content.replace(old_line, new_line)
            fixes_applied += 1
            print(f"   ‚úÖ Fixed automatic keyword syntax error")
        else:
            # Try to find similar pattern
            import re
            pattern = r'automatic\s+logic\s+\[ADDR_WIDTH-1:0\]\s+beat_addr\s*='
            if re.search(pattern, content):
                content = re.sub(pattern, 'logic [ADDR_WIDTH-1:0] beat_addr =', content)
                fixes_applied += 1
                print(f"   ‚úÖ Fixed automatic keyword using regex pattern")
        
        with open(slave_driver_bfm, 'w') as f:
            f.write(content)
    
    # Fix 2: Master driver BFM duplicate identifiers
    master_driver_bfm = "/home/timtim01/eda_test/project/gen_amba_2025/15x15_vip2/axi4_vip_env_rtl_integration/agent/master_agent_bfm/axi4_master_driver_bfm.sv"
    
    if os.path.exists(master_driver_bfm):
        print(f"üîß Fixing master driver BFM: {master_driver_bfm}")
        
        # Backup
        backup_file = master_driver_bfm + ".backup_" + datetime.now().strftime("%Y%m%d_%H%M%S")
        shutil.copy2(master_driver_bfm, backup_file)
        
        with open(master_driver_bfm, 'r') as f:
            content = f.read()
        
        # Find duplicate declarations (typically around line 224-226)
        lines = content.split('\n')
        
        # Look for duplicate declarations
        seen_declarations = set()
        fixed_lines = []
        
        for i, line in enumerate(lines):
            # Check for duplicate bit/int declarations
            if ('bit enable_auto_drive' in line or 
                'bit bfm_enable' in line or 
                'int transaction_count' in line) and i > 50:  # Skip the original declarations
                
                # This is likely a duplicate, comment it out
                if not line.strip().startswith('//'):
                    fixed_lines.append('    // DUPLICATE REMOVED: ' + line.strip())
                    fixes_applied += 1
                else:
                    fixed_lines.append(line)
            else:
                fixed_lines.append(line)
        
        if fixes_applied > 0:
            content = '\n'.join(fixed_lines)
            with open(master_driver_bfm, 'w') as f:
                f.write(content)
            print(f"   ‚úÖ Fixed {fixes_applied} duplicate identifier declarations")
    
    return fixes_applied > 0

def update_vip_generator_makefile():
    """Update the VIP generator to use the working 16x16 Makefile structure"""
    
    generator_file = "/home/timtim01/eda_test/project/gen_amba_2025/axi4_vip/gui/src/vip_environment_generator.py"
    
    if not os.path.exists(generator_file):
        print(f"‚ùå VIP generator not found: {generator_file}")
        return False
    
    # Backup
    backup_file = generator_file + ".backup_makefile_fix_" + datetime.now().strftime("%Y%m%d_%H%M%S")
    shutil.copy2(generator_file, backup_file)
    
    with open(generator_file, 'r') as f:
        content = f.read()
    
    # Read the working 16x16 Makefile to use as template
    vip_16x16_makefile = "/home/timtim01/eda_test/project/gen_amba_2025/16x16_vip/axi4_vip_env_rtl_integration/sim/Makefile"
    
    if not os.path.exists(vip_16x16_makefile):
        print(f"‚ùå 16x16 reference Makefile not found")
        return False
    
    with open(vip_16x16_makefile, 'r') as f:
        working_makefile = f.read()
    
    # Find the makefile generation function for VIP+RTL integration
    import re
    
    # Look for the _create_vip_rtl_makefile function
    makefile_func_pattern = r'def _create_vip_rtl_makefile\(self, env_path, timestamp\):(.*?)(?=\n    def|\nclass|\Z)'
    
    match = re.search(makefile_func_pattern, content, re.DOTALL)
    
    if match:
        print("üîß Updating VIP+RTL Makefile generation...")
        
        # Create new makefile generation code using working 16x16 template
        new_makefile_func = f'''def _create_vip_rtl_makefile(self, env_path, timestamp):
        """Create VIP+RTL integration makefile using working 16x16 structure"""
        sim_dir = os.path.join(env_path, "sim")
        makefile_path = os.path.join(sim_dir, "Makefile")
        
        num_masters = len(self.config.masters)
        num_slaves = len(self.config.slaves)
        
        # Use the working 16x16 Makefile structure as template
        makefile_content = f"""#==============================================================================
# Makefile for AXI4 VIP Simulation
# Generated by AMBA Bus Matrix Configuration Tool ({{num_masters}}x{{num_slaves}} Matrix)
# Date: {{timestamp}}
#==============================================================================

# Default simulator
SIM ?= vcs

# Test name
TEST ?= axi4_base_test

# Random seed
SEED ?= 1

# Directories
VIP_ROOT = ..
SIM_DIR = .
SCRIPT_DIR = $(SIM_DIR)/scripts
LOG_DIR = $(SIM_DIR)/logs
WAVE_DIR = $(SIM_DIR)/waves
COV_DIR = $(SIM_DIR)/coverage

# Export VIP_ROOT for use in compile file
export VIP_ROOT

# Create directories
$(shell mkdir -p $(LOG_DIR) $(WAVE_DIR) $(COV_DIR))

# Common compile options
COMMON_OPTS = +define+UVM_NO_DEPRECATED +define+UVM_OBJECT_MUST_HAVE_CONSTRUCTOR

# Waveform dump options
DUMP_FSDB ?= 0
DUMP_VCD ?= 0
FSDB_FILE ?= $(WAVE_DIR)/$(TEST)_$(SEED).fsdb
VCD_FILE ?= $(WAVE_DIR)/$(TEST)_$(SEED).vcd

# Add waveform defines
ifeq ($(DUMP_FSDB), 1)
    COMMON_OPTS += +define+DUMP_FSDB
    VERDI_HOME ?= /home/eda_tools/synopsys/verdi/W-2024.09-SP1
    VCS_COMP_OPTS += -P $(VERDI_HOME)/share/PLI/VCS/LINUX64/novas.tab $(VERDI_HOME)/share/PLI/VCS/LINUX64/pli.a
endif

ifeq ($(DUMP_VCD), 1)
    COMMON_OPTS += +define+DUMP_VCD
endif

# VCS options
VCS_COMP_OPTS = -full64 -sverilog -ntb_opts uvm-1.2 -timescale=1ns/1ps
VCS_COMP_OPTS += -debug_access+all +vcs+lic+wait -lca -kdb
VCS_COMP_OPTS += +lint=PCWM +lint=TFIPC-L
VCS_COMP_OPTS += $(COMMON_OPTS)

VCS_RUN_OPTS = +UVM_TESTNAME=$(TEST) +UVM_VERBOSITY=UVM_MEDIUM
VCS_RUN_OPTS += +ntb_random_seed=$(SEED)

# Add FSDB runtime options
ifeq ($(DUMP_FSDB), 1)
    VCS_RUN_OPTS += +fsdb_file=$(FSDB_FILE)
endif

# Questa options
QUESTA_COMP_OPTS = -64 -sv -mfcu -cuname design_cuname
QUESTA_COMP_OPTS += +define+QUESTA
QUESTA_COMP_OPTS += $(COMMON_OPTS)

QUESTA_RUN_OPTS = +UVM_TESTNAME=$(TEST) +UVM_VERBOSITY=UVM_MEDIUM
QUESTA_RUN_OPTS += -sv_seed $(SEED)

# Targets
.PHONY: all compile run clean

all: run

compile:
ifeq ($(SIM), vcs)
\tVIP_ROOT=$(VIP_ROOT) vcs $(VCS_COMP_OPTS) -f $(VIP_ROOT)/sim/axi4_compile.f -l $(LOG_DIR)/compile.log
else ifeq ($(SIM), questa)
\tVIP_ROOT=$(VIP_ROOT) vlog $(QUESTA_COMP_OPTS) -f $(VIP_ROOT)/sim/axi4_compile.f -l $(LOG_DIR)/compile.log
endif

run: compile
ifeq ($(SIM), vcs)
\t./simv $(VCS_RUN_OPTS) -l $(LOG_DIR)/$(TEST)_$(SEED).log
else ifeq ($(SIM), questa)
\tvsim -c design_cuname.hvl_top design_cuname.hdl_top $(QUESTA_RUN_OPTS) -do "run -all; quit" -l $(LOG_DIR)/$(TEST)_$(SEED).log
endif

# Run with FSDB dumping
run_fsdb:
\t$(MAKE) run DUMP_FSDB=1
\t@echo "FSDB file generated: $(FSDB_FILE)"

# Run with VCD dumping
run_vcd:
\t$(MAKE) run DUMP_VCD=1
\t@echo "VCD file generated: $(VCD_FILE)"

# Open waveform in Verdi with auto-load last run
verdi:
\t@echo "Auto-loading last run in Verdi..."
\t@# Find the most recent FSDB file
\t@LAST_FSDB=$$(ls -t $(WAVE_DIR)/*.fsdb 2>/dev/null | head -1); \\
\tif [ -z "$$LAST_FSDB" ]; then \\
\t\techo "No FSDB files found. Run 'make run_fsdb' first."; \\
\t\texit 1; \\
\tfi; \\
\techo "Loading FSDB: $$LAST_FSDB"; \\
\techo "Loading KDB: ./simv.daidir/kdb"; \\
\tverdi -ssf $$LAST_FSDB -elab ./simv.daidir/kdb -nologo &

# Open waveform in DVE
dve:
\tdve -vpd $(VCD_FILE) &

clean:
\trm -rf csrc simv* *.log ucli.key
\trm -rf work transcript vsim.wlf
\trm -rf $(LOG_DIR)/* $(WAVE_DIR)/* $(COV_DIR)/*

help:
\t@echo "Usage: make [target] [options]"
\t@echo "Targets:"
\t@echo "  compile    - Compile the design"
\t@echo "  run        - Compile and run simulation"
\t@echo "  run_fsdb   - Run with FSDB dumping enabled"
\t@echo "  run_vcd    - Run with VCD dumping enabled"
\t@echo "  verdi      - Open FSDB in Verdi"
\t@echo "  dve        - Open VCD in DVE"
\t@echo "  clean      - Clean simulation files"
\t@echo "Options:"
\t@echo "  SIM=vcs      - Simulator (vcs, questa)"
\t@echo "  TEST=test_name    - Test to run"
\t@echo "  SEED=value        - Random seed"
\t@echo "  DUMP_FSDB=1       - Enable FSDB dumping"
\t@echo "  DUMP_VCD=1        - Enable VCD dumping"
\t@echo "  FSDB_FILE=path    - FSDB output file"
\t@echo "  VCD_FILE=path     - VCD output file"
"""
        
        with open(makefile_path, "w") as f:
            f.write(makefile_content)
        
        print(f"Created VIP+RTL Makefile: {{makefile_path}}")'''
        
        # Replace the old function
        content = re.sub(makefile_func_pattern, new_makefile_func, content, flags=re.DOTALL)
        
        with open(generator_file, 'w') as f:
            f.write(content)
        
        print("‚úÖ Updated VIP generator to use working 16x16 Makefile structure")
        return True
    else:
        print("‚ö†Ô∏è  Could not find _create_vip_rtl_makefile function to update")
        return False

def test_compilation():
    """Test if the fixes resolve compilation errors"""
    
    print("\nüß™ Testing compilation after fixes...")
    
    vip_15x15_sim_dir = "/home/timtim01/eda_test/project/gen_amba_2025/15x15_vip2/axi4_vip_env_rtl_integration/sim"
    
    if not os.path.exists(vip_15x15_sim_dir):
        print(f"‚ùå 15x15 sim directory not found: {vip_15x15_sim_dir}")
        return False
    
    # Change to sim directory and run compilation
    import subprocess
    import os
    
    original_dir = os.getcwd()
    try:
        os.chdir(vip_15x15_sim_dir)
        
        # Clean first
        subprocess.run(['make', 'clean'], capture_output=True)
        
        # Try compilation
        result = subprocess.run(['make', 'compile'], capture_output=True, text=True, timeout=300)
        
        if result.returncode == 0:
            print("‚úÖ Compilation SUCCESSFUL!")
            return True
        else:
            print("‚ùå Compilation still has errors:")
            print(result.stdout[-500:] if result.stdout else "")  # Last 500 chars
            print(result.stderr[-500:] if result.stderr else "")  # Last 500 chars
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ö†Ô∏è  Compilation timed out after 5 minutes")
        return False
    except Exception as e:
        print(f"‚ùå Compilation test failed: {e}")
        return False
    finally:
        os.chdir(original_dir)

if __name__ == "__main__":
    print("=== Comprehensive Fix for 15x15 VIP Makefile and Compilation Errors ===")
    print("This fixes Makefile structure, BFM syntax errors, and updates generator\n")
    
    success = True
    
    # Step 1: Fix the Makefile
    print("üìã Step 1: Fixing 15x15 Makefile structure...")
    if fix_15x15_makefile():
        print("‚úÖ Makefile fixed")
    else:
        print("‚ùå Makefile fix failed")
        success = False
    
    # Step 2: Fix BFM syntax errors
    print("\nüìã Step 2: Fixing BFM syntax errors...")
    if fix_bfm_syntax_errors():
        print("‚úÖ BFM syntax errors fixed")
    else:
        print("‚ùå BFM fix failed")
        success = False
    
    # Step 3: Update VIP generator
    print("\nüìã Step 3: Updating VIP generator...")
    if update_vip_generator_makefile():
        print("‚úÖ VIP generator updated")
    else:
        print("‚ö†Ô∏è  VIP generator update partial")
    
    # Step 4: Test compilation
    print("\nüìã Step 4: Testing compilation...")
    if test_compilation():
        print("‚úÖ All fixes successful - compilation passes!")
    else:
        print("‚ö†Ô∏è  Compilation issues remain")
        success = False
    
    if success:
        print(f"\nüéâ SUCCESS: 15x15 VIP is now fixed and ready!")
        print("You can now:")
        print("  cd /home/timtim01/eda_test/project/gen_amba_2025/15x15_vip2/axi4_vip_env_rtl_integration/sim")
        print("  make run_fsdb TEST=axi4_base_test")
        print("\nFuture VIP generations will use the correct Makefile structure.")
    else:
        print(f"\n‚ö†Ô∏è  Some issues remain - check compilation log for details")
    
    sys.exit(0 if success else 1)