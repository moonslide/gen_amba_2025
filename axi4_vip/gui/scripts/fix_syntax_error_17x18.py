#!/usr/bin/env python3
"""
Fix syntax error in vip_environment_generator.py at line 1218
The issue is an unclosed f-string that causes generation to fail at step 6/10
"""

import os
import sys
import shutil
from datetime import datetime

def fix_syntax_error():
    """Fix the unclosed f-string syntax error"""
    
    script_dir = os.path.dirname(os.path.abspath(__file__))
    src_dir = os.path.join(script_dir, "..", "src")
    
    # Path to the file to fix
    generator_file = os.path.join(src_dir, "vip_environment_generator.py")
    
    if not os.path.exists(generator_file):
        print(f"Error: Cannot find {generator_file}")
        return False
    
    # Backup original file
    backup_file = generator_file + ".backup_syntax_fix_" + datetime.now().strftime("%Y%m%d_%H%M%S")
    shutil.copy2(generator_file, backup_file)
    print(f"Created backup: {backup_file}")
    
    # Read the file
    with open(generator_file, 'r') as f:
        lines = f.readlines()
    
    # Find the problematic section (around line 1210-1217)
    # We need to insert the missing content between line 1215 and 1217
    
    # The missing content for the master base sequence
    missing_content = '''class axi4_master_base_seq extends uvm_sequence #(axi4_master_tx);
    
    `uvm_object_utils(axi4_master_base_seq)
    
    // Number of transactions
    int num_trans = 1;
    
    // Constructor
    function new(string name = "axi4_master_base_seq");
        super.new(name);
    endfunction
    
    // Pre body
    virtual task pre_body();
        // Objection handling if needed
    endtask
    
    // Post body  
    virtual task post_body();
        // Objection handling if needed
    endtask
    
    // Body method
    virtual task body();
        `uvm_info(get_type_name(), "Starting base sequence", UVM_MEDIUM)
    endtask : body
    
endclass : axi4_master_base_seq
""")
'''
    
    # Find the line with the incomplete f-string
    for i in range(len(lines)):
        # Look for the specific pattern where the error occurs
        if i >= 1214 and i <= 1216:
            if '//==============================================================================' in lines[i-1]:
                # Check if next line is empty and then jumps to def
                if i+1 < len(lines) and i+2 < len(lines):
                    if lines[i+1].strip() == '' and 'def _create_makefile_enhanced' in lines[i+2]:
                        # Found the problematic section
                        print(f"Found syntax error at line {i+1}")
                        
                        # Insert the missing content
                        lines[i+1] = missing_content
                        print(f"✓ Fixed unclosed f-string by adding missing sequence content")
                        break
    
    # Write the fixed content back
    with open(generator_file, 'w') as f:
        f.writelines(lines)
    
    print(f"✅ Syntax error fixed successfully")
    print(f"📁 Backup saved as: {backup_file}")
    
    return True

def verify_fix():
    """Verify the fix by checking Python syntax"""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    src_dir = os.path.join(script_dir, "..", "src")
    generator_file = os.path.join(src_dir, "vip_environment_generator.py")
    
    # Try to compile the file to check for syntax errors
    try:
        with open(generator_file, 'r') as f:
            code = f.read()
        compile(code, generator_file, 'exec')
        print("✅ Python syntax check: PASSED")
        return True
    except SyntaxError as e:
        print(f"❌ Python syntax check: FAILED")
        print(f"   Error: {e}")
        print(f"   Line: {e.lineno}")
        return False

def alternative_fix():
    """Alternative approach: directly fix the specific lines"""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    src_dir = os.path.join(script_dir, "..", "src")
    generator_file = os.path.join(src_dir, "vip_environment_generator.py")
    
    # Read the entire file
    with open(generator_file, 'r') as f:
        content = f.read()
    
    # Look for the problematic pattern and fix it
    # The issue is an unclosed f""" string starting around line 1210
    
    # Find the section with the unclosed f-string
    problem_start = 'f"""//=============================================================================='
    problem_section = """// AXI4 Master Base Sequence
// Generated by AMBA Bus Matrix Configuration Tool
// Date: {self.timestamp}
//==============================================================================


    def _create_makefile_enhanced"""
    
    if problem_section in content:
        # Replace with properly closed f-string
        fixed_section = """// AXI4 Master Base Sequence
// Generated by AMBA Bus Matrix Configuration Tool
// Date: {self.timestamp}
//==============================================================================

class axi4_master_base_seq extends uvm_sequence #(axi4_master_tx);
    
    `uvm_object_utils(axi4_master_base_seq)
    
    // Number of transactions
    int num_trans = 1;
    
    // Constructor
    function new(string name = "axi4_master_base_seq");
        super.new(name);
    endfunction
    
    // Pre body
    virtual task pre_body();
        // Objection handling if needed
    endtask
    
    // Post body  
    virtual task post_body();
        // Objection handling if needed
    endtask
    
    // Body method
    virtual task body();
        `uvm_info(get_type_name(), "Starting base sequence", UVM_MEDIUM)
    endtask : body
    
endclass : axi4_master_base_seq
""")

    def _create_makefile_enhanced"""
        
        content = content.replace(problem_section, fixed_section)
        
        # Write back the fixed content
        with open(generator_file, 'w') as f:
            f.write(content)
        
        print("✅ Applied alternative fix")
        return True
    
    return False

if __name__ == "__main__":
    print("=== Fix VIP Generator Syntax Error (17x18 Issue) ===")
    print("Fixing unclosed f-string at line 1218 causing step 6/10 failure\n")
    
    # First try the main fix
    if fix_syntax_error():
        print("\n🔍 Verifying fix...")
        if verify_fix():
            print("\n✅ SUCCESS: Syntax error fixed!")
            print("The 17x18 configuration should now generate successfully.")
        else:
            print("\n⚠️  Main fix didn't work, trying alternative approach...")
            if alternative_fix():
                if verify_fix():
                    print("\n✅ SUCCESS: Alternative fix worked!")
                else:
                    print("\n❌ Failed to fix the syntax error")
                    sys.exit(1)
    else:
        print("\n❌ Failed to apply fix")
        sys.exit(1)