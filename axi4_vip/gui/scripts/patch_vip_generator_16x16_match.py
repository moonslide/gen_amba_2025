#!/usr/bin/env python3
"""
Patch VIP Environment Generator to match 16x16_vip reference structure
Ensures generated VIP/RTL structure matches exactly with the working 16x16 reference
"""

import os
import sys
import shutil
from datetime import datetime

def patch_vip_environment_generator():
    """Patch the VIP environment generator to match 16x16 structure"""
    
    script_dir = os.path.dirname(os.path.abspath(__file__))
    src_dir = os.path.join(script_dir, "..", "src")
    
    # Path to the file to patch
    generator_file = os.path.join(src_dir, "vip_environment_generator.py")
    
    if not os.path.exists(generator_file):
        print(f"Error: Cannot find {generator_file}")
        return False
    
    # Backup original file
    backup_file = generator_file + ".backup_" + datetime.now().strftime("%Y%m%d_%H%M%S")
    shutil.copy2(generator_file, backup_file)
    print(f"Created backup: {backup_file}")
    
    # Read the file
    with open(generator_file, 'r') as f:
        content = f.read()
    
    # Apply patches to match 16x16 structure
    patches_applied = 0
    
    # Patch 1: Fix compile file name for large matrices (use axi4_compile.f not axi4_vip_rtl_compile.f)
    old_pattern1 = 'compile_file_path = os.path.join(sim_dir, "axi4_vip_rtl_compile.f")'
    new_pattern1 = 'compile_file_path = os.path.join(sim_dir, "axi4_compile.f")'
    if old_pattern1 in content:
        content = content.replace(old_pattern1, new_pattern1)
        patches_applied += 1
        print(f"‚úì Patch {patches_applied}: Fixed compile file name to axi4_compile.f")
    
    # Patch 2: Fix Makefile reference to compile file
    old_pattern2 = '-f $(VIP_ROOT)/sim/axi4_vip_rtl_compile.f'
    new_pattern2 = '-f $(VIP_ROOT)/sim/axi4_compile.f'
    if old_pattern2 in content:
        content = content.replace(old_pattern2, new_pattern2)
        patches_applied += 1
        print(f"‚úì Patch {patches_applied}: Fixed Makefile compile file reference")
    
    # Patch 3: Update the compile file header comment
    old_pattern3 = '# VIP+RTL Integration Compile File List'
    new_pattern3 = '# Compile File List'
    if old_pattern3 in content:
        content = content.replace(old_pattern3, new_pattern3)
        patches_applied += 1
        print(f"‚úì Patch {patches_applied}: Updated compile file header")
    
    # Patch 4: Ensure Makefile uses correct title format
    old_pattern4 = '# Makefile for AXI4 VIP+RTL Integration'
    new_pattern4 = '# Makefile for AXI4 VIP Simulation'
    if old_pattern4 in content:
        content = content.replace(old_pattern4, new_pattern4)
        patches_applied += 1
        print(f"‚úì Patch {patches_applied}: Updated Makefile title")
    
    # Patch 5: Use consistent test name
    old_pattern5 = 'TEST ?= axi4_rtl_integration_test'
    new_pattern5 = 'TEST ?= axi4_base_test'
    if old_pattern5 in content:
        content = content.replace(old_pattern5, new_pattern5)
        patches_applied += 1
        print(f"‚úì Patch {patches_applied}: Fixed default test name")
    
    # Patch 6: Add enhanced Makefile creation
    if 'def _create_enhanced_makefile' not in content:
        # Add the enhanced makefile creation method
        enhanced_makefile_method = '''
    def _create_enhanced_makefile(self, env_path):
        """Create enhanced Makefile matching 16x16_vip structure"""
        sim_dir = os.path.join(env_path, "sim")
        
        # Create both Makefile and Makefile.enhanced
        self._create_standard_makefile(sim_dir)
        self._create_enhanced_makefile_variant(sim_dir)
        
    def _create_standard_makefile(self, sim_dir):
        """Create standard Makefile matching 16x16 reference"""
        makefile_path = os.path.join(sim_dir, "Makefile")
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        makefile_content = f"""#==============================================================================
# Makefile for AXI4 VIP Simulation
# Generated by AMBA Bus Matrix Configuration Tool
# Date: {timestamp}
#==============================================================================

# Default simulator
SIM ?= vcs

# Test name
TEST ?= axi4_base_test

# Random seed
SEED ?= 1

# Directories
VIP_ROOT = ..
SIM_DIR = .
SCRIPT_DIR = $(SIM_DIR)/scripts
LOG_DIR = $(SIM_DIR)/logs
WAVE_DIR = $(SIM_DIR)/waves
COV_DIR = $(SIM_DIR)/coverage

# Export VIP_ROOT for use in compile file
export VIP_ROOT

# Create directories
$(shell mkdir -p $(LOG_DIR) $(WAVE_DIR) $(COV_DIR))

# Common compile options
COMMON_OPTS = +define+UVM_NO_DEPRECATED +define+UVM_OBJECT_MUST_HAVE_CONSTRUCTOR

# Waveform dump options
DUMP_FSDB ?= 0
DUMP_VCD ?= 0
FSDB_FILE ?= $(WAVE_DIR)/$(TEST)_$(SEED).fsdb
VCD_FILE ?= $(WAVE_DIR)/$(TEST)_$(SEED).vcd

# Add waveform defines
ifeq ($(DUMP_FSDB), 1)
    COMMON_OPTS += +define+DUMP_FSDB
    VERDI_HOME ?= /home/eda_tools/synopsys/verdi/W-2024.09-SP1
    VCS_COMP_OPTS += -P $(VERDI_HOME)/share/PLI/VCS/LINUX64/novas.tab $(VERDI_HOME)/share/PLI/VCS/LINUX64/pli.a
endif

ifeq ($(DUMP_VCD), 1)
    COMMON_OPTS += +define+DUMP_VCD
endif

# VCS options
VCS_COMP_OPTS = -full64 -sverilog -ntb_opts uvm-1.2 -timescale=1ns/1ps
VCS_COMP_OPTS += -debug_access+all +vcs+lic+wait -lca -kdb
VCS_COMP_OPTS += $(COMMON_OPTS)

# Runtime options
VCS_RUN_OPTS = +UVM_TESTNAME=$(TEST) +ntb_random_seed=$(SEED)

# Add FSDB runtime options
ifeq ($(DUMP_FSDB), 1)
    VCS_RUN_OPTS += +fsdb_file=$(FSDB_FILE)
endif

# Verbosity level
UVM_VERBOSITY ?= UVM_MEDIUM
VCS_RUN_OPTS += +UVM_VERBOSITY=$(UVM_VERBOSITY)

# Targets
.PHONY: all compile run clean help

all: run

compile:
\t@echo "======================================"
\t@echo "Compiling AXI4 VIP Environment"
\t@echo "======================================"
\tVIP_ROOT=$(VIP_ROOT) vcs $(VCS_COMP_OPTS) -f $(VIP_ROOT)/sim/axi4_compile.f -l $(LOG_DIR)/compile.log

run: compile
\t@echo "======================================"
\t@echo "Running Test: $(TEST)"
\t@echo "======================================"
\t./simv $(VCS_RUN_OPTS) -l $(LOG_DIR)/$(TEST)_$(SEED).log

run_fsdb: 
\t$(MAKE) run DUMP_FSDB=1

run_vcd:
\t$(MAKE) run DUMP_VCD=1

verdi:
\tverdi -ssf $(FSDB_FILE) &

clean:
\trm -rf simv* csrc *.log *.key
\trm -rf $(LOG_DIR)/* $(WAVE_DIR)/* $(COV_DIR)/*
\trm -rf DVEfiles ucli.key vc_hdrs.h .inter.vpd.uvm

help:
\t@echo "Available targets:"
\t@echo "  compile    - Compile the design"
\t@echo "  run        - Run simulation (TEST=test_name SEED=value)"
\t@echo "  run_fsdb   - Run with FSDB dumping"
\t@echo "  run_vcd    - Run with VCD dumping"
\t@echo "  verdi      - Open Verdi with FSDB"
\t@echo "  clean      - Clean generated files"
\t@echo ""
\t@echo "Options:"
\t@echo "  TEST=<test_name>   - Specify test to run"
\t@echo "  SEED=<value>       - Random seed"
\t@echo "  DUMP_FSDB=1        - Enable FSDB dumping"
\t@echo "  DUMP_VCD=1         - Enable VCD dumping"
\t@echo "  UVM_VERBOSITY=<level> - Set verbosity level"
"""
        
        with open(makefile_path, 'w') as f:
            f.write(makefile_content)
'''
        # Find a good place to insert the method
        insert_pos = content.find('def _create_sim_makefile(self, env_path):')
        if insert_pos > 0:
            content = content[:insert_pos] + enhanced_makefile_method + '\n' + content[insert_pos:]
            patches_applied += 1
            print(f"‚úì Patch {patches_applied}: Added enhanced makefile methods")
    
    # Write the patched content back
    with open(generator_file, 'w') as f:
        f.write(content)
    
    print(f"\n‚úÖ Successfully applied {patches_applied} patches")
    print(f"üìÅ Backup saved as: {backup_file}")
    
    return True

def verify_patch():
    """Verify the patch was applied correctly"""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    src_dir = os.path.join(script_dir, "..", "src")
    generator_file = os.path.join(src_dir, "vip_environment_generator.py")
    
    with open(generator_file, 'r') as f:
        content = f.read()
    
    # Check critical patterns are fixed
    checks = [
        ('axi4_compile.f")', True),  # Should use axi4_compile.f
        ('axi4_vip_rtl_compile.f', False),  # Should NOT use this
        ('TEST ?= axi4_base_test', True),  # Should use standard test name
    ]
    
    all_good = True
    for pattern, should_exist in checks:
        exists = pattern in content
        if exists != should_exist:
            status = "‚ùå"
            all_good = False
        else:
            status = "‚úÖ"
        
        if should_exist:
            print(f"{status} Pattern '{pattern}' {'found' if exists else 'NOT found'} (expected: present)")
        else:
            print(f"{status} Pattern '{pattern}' {'found' if exists else 'NOT found'} (expected: absent)")
    
    return all_good

if __name__ == "__main__":
    print("=== VIP Generator 16x16 Structure Match Patch ===")
    print("This patch ensures the generated VIP matches the 16x16_vip reference structure\n")
    
    if patch_vip_environment_generator():
        print("\nüîç Verifying patch...")
        if verify_patch():
            print("\n‚úÖ Patch successfully applied and verified!")
            print("The VIP generator will now create structures matching the 16x16_vip reference.")
        else:
            print("\n‚ö†Ô∏è  Some verification checks failed. Please review the changes.")
    else:
        print("\n‚ùå Failed to apply patch")
        sys.exit(1)