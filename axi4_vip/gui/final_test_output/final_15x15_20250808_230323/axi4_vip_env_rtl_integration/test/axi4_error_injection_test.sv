//==============================================================================
// AXI4 Error Injection Test
// Generated by AMBA Bus Matrix Configuration Tool
// Date: 2025-08-08 23:03:23
//==============================================================================

class axi4_error_injection_test extends axi4_base_test;
    
    `uvm_component_utils(axi4_error_injection_test)
    
    // Constructor
    function new(string name = "axi4_error_injection_test", uvm_component parent = null);
        super.new(name, parent);
    endfunction
    
    // Build phase
    function void build_phase(uvm_phase phase);
        super.build_phase(phase);
        // Configuration for large matrices
        bit disable_unused_masters = 0;
        int active_master_count = num_masters;
        
        // For very large configurations, limit active masters
        if (num_masters > 8 && disable_unused_masters) begin
            active_master_count = 8;
            `uvm_info(get_type_name(), $sformatf("Large config detected: limiting to %0d active masters", active_master_count), UVM_LOW)
        end

        
        // Enable error injection in environment
        env_cfg.enable_error_injection = 1;
        env_cfg.error_rate = 5; // 5% error rate
    endfunction
    
    // Run phase
    task run_phase(uvm_phase phase);
        axi4_virtual_error_seq error_seq;
        
        phase.raise_objection(this);
        
        `uvm_info(get_type_name(), "Starting error injection test", UVM_LOW)
        
        // Run sequence with error scenarios
        error_seq = axi4_virtual_error_seq::type_id::create("error_seq");
        error_seq.test_slave_errors = 1;
        error_seq.test_decode_errors = 1;
        error_seq.test_exclusive_errors = 1;
        error_seq.start(env.v_seqr);
        
        `uvm_info(get_type_name(), "Completed error injection test", UVM_LOW)
        
        phase.drop_objection(this);
    endtask
    
endclass : axi4_error_injection_test
