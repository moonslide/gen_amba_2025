//==============================================================================
// AXI4 Scoreboard with Throughput and Latency Tracking
// Generated by AMBA Bus Matrix Configuration Tool
// Date: 2025-08-08 23:03:23
//==============================================================================

class axi4_scoreboard extends uvm_scoreboard;
    
    `uvm_component_utils(axi4_scoreboard)
    
    // Analysis fifos for masters and slaves
    uvm_tlm_analysis_fifo #(axi4_master_tx) master_fifo[15];
    uvm_tlm_analysis_fifo #(axi4_slave_tx) slave_fifo[15];
    
    // Throughput tracking variables
    longint unsigned master_bytes_written[15];
    longint unsigned master_bytes_read[15];
    longint unsigned slave_bytes_written[15];
    longint unsigned slave_bytes_read[15];
    
    int unsigned master_write_count[15];
    int unsigned master_read_count[15];
    int unsigned slave_write_count[15];
    int unsigned slave_read_count[15];
    
    real simulation_start_time;
    real simulation_end_time;
    
    // Latency tracking for longest paths
    typedef struct {
        int master_id;
        real start_time;
        real end_time;
        real latency_ns;
        string transaction_type;
        bit [31:0] address;
        int burst_length;
        int data_bytes;
        string path_info;
    } latency_record_t;
    
    latency_record_t longest_paths[$];
    latency_record_t current_transactions[int]; // Key: master_id
    int transaction_id_counter = 0;
    
    // Configuration
    bit enable_throughput_tracking = 1;
    bit enable_latency_tracking = 1;
    
    // Constructor
    function new(string name = "axi4_scoreboard", uvm_component parent = null);
        super.new(name, parent);
    endfunction
    
    // Build phase
    function void build_phase(uvm_phase phase);
        super.build_phase(phase);
        // Configuration for large matrices
        bit disable_unused_masters = 0;
        int active_master_count = num_masters;
        
        // For very large configurations, limit active masters
        if (num_masters > 8 && disable_unused_masters) begin
            active_master_count = 8;
            `uvm_info(get_type_name(), $sformatf("Large config detected: limiting to %0d active masters", active_master_count), UVM_LOW)
        end

        
        foreach(master_fifo[i]) begin
            master_fifo[i] = new($sformatf("master_fifo[%0d]", i), this);
        end
        
        foreach(slave_fifo[i]) begin
            slave_fifo[i] = new($sformatf("slave_fifo[%0d]", i), this);
        end
        
        // Initialize counters
        foreach(master_bytes_written[i]) begin
            master_bytes_written[i] = 0;
            master_bytes_read[i] = 0;
            master_write_count[i] = 0;
            master_read_count[i] = 0;
        end
        
        foreach(slave_bytes_written[i]) begin
            slave_bytes_written[i] = 0;
            slave_bytes_read[i] = 0;
            slave_write_count[i] = 0;
            slave_read_count[i] = 0;
        end
    endfunction
    
    // Connect phase
    function void connect_phase(uvm_phase phase);
        super.connect_phase(phase);
    endfunction
    
    // Run phase
    task run_phase(uvm_phase phase);
        simulation_start_time = $realtime;
        
        if (enable_throughput_tracking) begin
            fork
                monitor_master_transactions();
                monitor_slave_transactions();
            join_none
        end
    endtask
    
    // Monitor master transactions
    task monitor_master_transactions();
        axi4_master_tx tx;
        int data_bytes;
        
        forever begin
            fork
                begin : master_0
                    while (master_fifo[0].try_get(tx)) begin
                        calculate_transaction_bytes(tx, data_bytes);
                        if (enable_latency_tracking) begin
                            track_transaction_latency(0, tx, data_bytes);
                        end
                        if (tx.tx_type == axi4_master_tx::WRITE) begin
                            master_bytes_written[0] += data_bytes;
                            master_write_count[0]++;
                        end else begin
                            master_bytes_read[0] += data_bytes;
                            master_read_count[0]++;
                        end
                    end
                    #10ns;
                end
                begin : master_1
                    while (master_fifo[1].try_get(tx)) begin
                        calculate_transaction_bytes(tx, data_bytes);
                        if (enable_latency_tracking) begin
                            track_transaction_latency(1, tx, data_bytes);
                        end
                        if (tx.tx_type == axi4_master_tx::WRITE) begin
                            master_bytes_written[1] += data_bytes;
                            master_write_count[1]++;
                        end else begin
                            master_bytes_read[1] += data_bytes;
                            master_read_count[1]++;
                        end
                    end
                    #10ns;
                end
                begin : master_2
                    while (master_fifo[2].try_get(tx)) begin
                        calculate_transaction_bytes(tx, data_bytes);
                        if (enable_latency_tracking) begin
                            track_transaction_latency(2, tx, data_bytes);
                        end
                        if (tx.tx_type == axi4_master_tx::WRITE) begin
                            master_bytes_written[2] += data_bytes;
                            master_write_count[2]++;
                        end else begin
                            master_bytes_read[2] += data_bytes;
                            master_read_count[2]++;
                        end
                    end
                    #10ns;
                end
                begin : master_3
                    while (master_fifo[3].try_get(tx)) begin
                        calculate_transaction_bytes(tx, data_bytes);
                        if (enable_latency_tracking) begin
                            track_transaction_latency(3, tx, data_bytes);
                        end
                        if (tx.tx_type == axi4_master_tx::WRITE) begin
                            master_bytes_written[3] += data_bytes;
                            master_write_count[3]++;
                        end else begin
                            master_bytes_read[3] += data_bytes;
                            master_read_count[3]++;
                        end
                    end
                    #10ns;
                end
                begin : master_4
                    while (master_fifo[4].try_get(tx)) begin
                        calculate_transaction_bytes(tx, data_bytes);
                        if (enable_latency_tracking) begin
                            track_transaction_latency(4, tx, data_bytes);
                        end
                        if (tx.tx_type == axi4_master_tx::WRITE) begin
                            master_bytes_written[4] += data_bytes;
                            master_write_count[4]++;
                        end else begin
                            master_bytes_read[4] += data_bytes;
                            master_read_count[4]++;
                        end
                    end
                    #10ns;
                end
                begin : master_5
                    while (master_fifo[5].try_get(tx)) begin
                        calculate_transaction_bytes(tx, data_bytes);
                        if (enable_latency_tracking) begin
                            track_transaction_latency(5, tx, data_bytes);
                        end
                        if (tx.tx_type == axi4_master_tx::WRITE) begin
                            master_bytes_written[5] += data_bytes;
                            master_write_count[5]++;
                        end else begin
                            master_bytes_read[5] += data_bytes;
                            master_read_count[5]++;
                        end
                    end
                    #10ns;
                end
                begin : master_6
                    while (master_fifo[6].try_get(tx)) begin
                        calculate_transaction_bytes(tx, data_bytes);
                        if (enable_latency_tracking) begin
                            track_transaction_latency(6, tx, data_bytes);
                        end
                        if (tx.tx_type == axi4_master_tx::WRITE) begin
                            master_bytes_written[6] += data_bytes;
                            master_write_count[6]++;
                        end else begin
                            master_bytes_read[6] += data_bytes;
                            master_read_count[6]++;
                        end
                    end
                    #10ns;
                end
                begin : master_7
                    while (master_fifo[7].try_get(tx)) begin
                        calculate_transaction_bytes(tx, data_bytes);
                        if (enable_latency_tracking) begin
                            track_transaction_latency(7, tx, data_bytes);
                        end
                        if (tx.tx_type == axi4_master_tx::WRITE) begin
                            master_bytes_written[7] += data_bytes;
                            master_write_count[7]++;
                        end else begin
                            master_bytes_read[7] += data_bytes;
                            master_read_count[7]++;
                        end
                    end
                    #10ns;
                end
                begin : master_8
                    while (master_fifo[8].try_get(tx)) begin
                        calculate_transaction_bytes(tx, data_bytes);
                        if (enable_latency_tracking) begin
                            track_transaction_latency(8, tx, data_bytes);
                        end
                        if (tx.tx_type == axi4_master_tx::WRITE) begin
                            master_bytes_written[8] += data_bytes;
                            master_write_count[8]++;
                        end else begin
                            master_bytes_read[8] += data_bytes;
                            master_read_count[8]++;
                        end
                    end
                    #10ns;
                end
                begin : master_9
                    while (master_fifo[9].try_get(tx)) begin
                        calculate_transaction_bytes(tx, data_bytes);
                        if (enable_latency_tracking) begin
                            track_transaction_latency(9, tx, data_bytes);
                        end
                        if (tx.tx_type == axi4_master_tx::WRITE) begin
                            master_bytes_written[9] += data_bytes;
                            master_write_count[9]++;
                        end else begin
                            master_bytes_read[9] += data_bytes;
                            master_read_count[9]++;
                        end
                    end
                    #10ns;
                end
                begin : master_10
                    while (master_fifo[10].try_get(tx)) begin
                        calculate_transaction_bytes(tx, data_bytes);
                        if (enable_latency_tracking) begin
                            track_transaction_latency(10, tx, data_bytes);
                        end
                        if (tx.tx_type == axi4_master_tx::WRITE) begin
                            master_bytes_written[10] += data_bytes;
                            master_write_count[10]++;
                        end else begin
                            master_bytes_read[10] += data_bytes;
                            master_read_count[10]++;
                        end
                    end
                    #10ns;
                end
                begin : master_11
                    while (master_fifo[11].try_get(tx)) begin
                        calculate_transaction_bytes(tx, data_bytes);
                        if (enable_latency_tracking) begin
                            track_transaction_latency(11, tx, data_bytes);
                        end
                        if (tx.tx_type == axi4_master_tx::WRITE) begin
                            master_bytes_written[11] += data_bytes;
                            master_write_count[11]++;
                        end else begin
                            master_bytes_read[11] += data_bytes;
                            master_read_count[11]++;
                        end
                    end
                    #10ns;
                end
                begin : master_12
                    while (master_fifo[12].try_get(tx)) begin
                        calculate_transaction_bytes(tx, data_bytes);
                        if (enable_latency_tracking) begin
                            track_transaction_latency(12, tx, data_bytes);
                        end
                        if (tx.tx_type == axi4_master_tx::WRITE) begin
                            master_bytes_written[12] += data_bytes;
                            master_write_count[12]++;
                        end else begin
                            master_bytes_read[12] += data_bytes;
                            master_read_count[12]++;
                        end
                    end
                    #10ns;
                end
                begin : master_13
                    while (master_fifo[13].try_get(tx)) begin
                        calculate_transaction_bytes(tx, data_bytes);
                        if (enable_latency_tracking) begin
                            track_transaction_latency(13, tx, data_bytes);
                        end
                        if (tx.tx_type == axi4_master_tx::WRITE) begin
                            master_bytes_written[13] += data_bytes;
                            master_write_count[13]++;
                        end else begin
                            master_bytes_read[13] += data_bytes;
                            master_read_count[13]++;
                        end
                    end
                    #10ns;
                end
                begin : master_14
                    while (master_fifo[14].try_get(tx)) begin
                        calculate_transaction_bytes(tx, data_bytes);
                        if (enable_latency_tracking) begin
                            track_transaction_latency(14, tx, data_bytes);
                        end
                        if (tx.tx_type == axi4_master_tx::WRITE) begin
                            master_bytes_written[14] += data_bytes;
                            master_write_count[14]++;
                        end else begin
                            master_bytes_read[14] += data_bytes;
                            master_read_count[14]++;
                        end
                    end
                    #10ns;
                end
            join_none
            #10ns;
        end
    endtask
    
    // Monitor slave transactions  
    task monitor_slave_transactions();
        axi4_slave_tx tx;
        int data_bytes;
        
        forever begin
            fork
                begin : slave_0
                    while (slave_fifo[0].try_get(tx)) begin
                        // Slave transaction processing (if needed)
                        if (tx.tx_type == axi4_slave_tx::WRITE) begin
                            slave_bytes_written[0] += tx.data_bytes;
                            slave_write_count[0]++;
                        end else begin
                            slave_bytes_read[0] += tx.data_bytes;
                            slave_read_count[0]++;
                        end
                    end
                    #10ns;
                end
                begin : slave_1
                    while (slave_fifo[1].try_get(tx)) begin
                        // Slave transaction processing (if needed)
                        if (tx.tx_type == axi4_slave_tx::WRITE) begin
                            slave_bytes_written[1] += tx.data_bytes;
                            slave_write_count[1]++;
                        end else begin
                            slave_bytes_read[1] += tx.data_bytes;
                            slave_read_count[1]++;
                        end
                    end
                    #10ns;
                end
                begin : slave_2
                    while (slave_fifo[2].try_get(tx)) begin
                        // Slave transaction processing (if needed)
                        if (tx.tx_type == axi4_slave_tx::WRITE) begin
                            slave_bytes_written[2] += tx.data_bytes;
                            slave_write_count[2]++;
                        end else begin
                            slave_bytes_read[2] += tx.data_bytes;
                            slave_read_count[2]++;
                        end
                    end
                    #10ns;
                end
                begin : slave_3
                    while (slave_fifo[3].try_get(tx)) begin
                        // Slave transaction processing (if needed)
                        if (tx.tx_type == axi4_slave_tx::WRITE) begin
                            slave_bytes_written[3] += tx.data_bytes;
                            slave_write_count[3]++;
                        end else begin
                            slave_bytes_read[3] += tx.data_bytes;
                            slave_read_count[3]++;
                        end
                    end
                    #10ns;
                end
                begin : slave_4
                    while (slave_fifo[4].try_get(tx)) begin
                        // Slave transaction processing (if needed)
                        if (tx.tx_type == axi4_slave_tx::WRITE) begin
                            slave_bytes_written[4] += tx.data_bytes;
                            slave_write_count[4]++;
                        end else begin
                            slave_bytes_read[4] += tx.data_bytes;
                            slave_read_count[4]++;
                        end
                    end
                    #10ns;
                end
                begin : slave_5
                    while (slave_fifo[5].try_get(tx)) begin
                        // Slave transaction processing (if needed)
                        if (tx.tx_type == axi4_slave_tx::WRITE) begin
                            slave_bytes_written[5] += tx.data_bytes;
                            slave_write_count[5]++;
                        end else begin
                            slave_bytes_read[5] += tx.data_bytes;
                            slave_read_count[5]++;
                        end
                    end
                    #10ns;
                end
                begin : slave_6
                    while (slave_fifo[6].try_get(tx)) begin
                        // Slave transaction processing (if needed)
                        if (tx.tx_type == axi4_slave_tx::WRITE) begin
                            slave_bytes_written[6] += tx.data_bytes;
                            slave_write_count[6]++;
                        end else begin
                            slave_bytes_read[6] += tx.data_bytes;
                            slave_read_count[6]++;
                        end
                    end
                    #10ns;
                end
                begin : slave_7
                    while (slave_fifo[7].try_get(tx)) begin
                        // Slave transaction processing (if needed)
                        if (tx.tx_type == axi4_slave_tx::WRITE) begin
                            slave_bytes_written[7] += tx.data_bytes;
                            slave_write_count[7]++;
                        end else begin
                            slave_bytes_read[7] += tx.data_bytes;
                            slave_read_count[7]++;
                        end
                    end
                    #10ns;
                end
                begin : slave_8
                    while (slave_fifo[8].try_get(tx)) begin
                        // Slave transaction processing (if needed)
                        if (tx.tx_type == axi4_slave_tx::WRITE) begin
                            slave_bytes_written[8] += tx.data_bytes;
                            slave_write_count[8]++;
                        end else begin
                            slave_bytes_read[8] += tx.data_bytes;
                            slave_read_count[8]++;
                        end
                    end
                    #10ns;
                end
                begin : slave_9
                    while (slave_fifo[9].try_get(tx)) begin
                        // Slave transaction processing (if needed)
                        if (tx.tx_type == axi4_slave_tx::WRITE) begin
                            slave_bytes_written[9] += tx.data_bytes;
                            slave_write_count[9]++;
                        end else begin
                            slave_bytes_read[9] += tx.data_bytes;
                            slave_read_count[9]++;
                        end
                    end
                    #10ns;
                end
                begin : slave_10
                    while (slave_fifo[10].try_get(tx)) begin
                        // Slave transaction processing (if needed)
                        if (tx.tx_type == axi4_slave_tx::WRITE) begin
                            slave_bytes_written[10] += tx.data_bytes;
                            slave_write_count[10]++;
                        end else begin
                            slave_bytes_read[10] += tx.data_bytes;
                            slave_read_count[10]++;
                        end
                    end
                    #10ns;
                end
                begin : slave_11
                    while (slave_fifo[11].try_get(tx)) begin
                        // Slave transaction processing (if needed)
                        if (tx.tx_type == axi4_slave_tx::WRITE) begin
                            slave_bytes_written[11] += tx.data_bytes;
                            slave_write_count[11]++;
                        end else begin
                            slave_bytes_read[11] += tx.data_bytes;
                            slave_read_count[11]++;
                        end
                    end
                    #10ns;
                end
                begin : slave_12
                    while (slave_fifo[12].try_get(tx)) begin
                        // Slave transaction processing (if needed)
                        if (tx.tx_type == axi4_slave_tx::WRITE) begin
                            slave_bytes_written[12] += tx.data_bytes;
                            slave_write_count[12]++;
                        end else begin
                            slave_bytes_read[12] += tx.data_bytes;
                            slave_read_count[12]++;
                        end
                    end
                    #10ns;
                end
                begin : slave_13
                    while (slave_fifo[13].try_get(tx)) begin
                        // Slave transaction processing (if needed)
                        if (tx.tx_type == axi4_slave_tx::WRITE) begin
                            slave_bytes_written[13] += tx.data_bytes;
                            slave_write_count[13]++;
                        end else begin
                            slave_bytes_read[13] += tx.data_bytes;
                            slave_read_count[13]++;
                        end
                    end
                    #10ns;
                end
                begin : slave_14
                    while (slave_fifo[14].try_get(tx)) begin
                        // Slave transaction processing (if needed)
                        if (tx.tx_type == axi4_slave_tx::WRITE) begin
                            slave_bytes_written[14] += tx.data_bytes;
                            slave_write_count[14]++;
                        end else begin
                            slave_bytes_read[14] += tx.data_bytes;
                            slave_read_count[14]++;
                        end
                    end
                    #10ns;
                end
            join_none
            #10ns;
        end
    endtask
    
    // Calculate transaction data bytes
    function void calculate_transaction_bytes(axi4_master_tx tx, output int data_bytes);
        int burst_length;
        int data_width_bytes;
        
        // AXI4 burst length is AxLEN + 1
        burst_length = (tx.tx_type == axi4_master_tx::WRITE) ? tx.awlen + 1 : tx.arlen + 1;
        
        // Calculate data width in bytes from AxSIZE (2^AxSIZE bytes per beat)
        data_width_bytes = (tx.tx_type == axi4_master_tx::WRITE) ? (1 << tx.awsize) : (1 << tx.arsize);
        
        // Total bytes = burst_length * bytes_per_beat
        data_bytes = burst_length * data_width_bytes;
    endfunction
    
    // Track transaction latency
    function void track_transaction_latency(int master_id, axi4_master_tx tx, int data_bytes);
        latency_record_t record;
        real current_time = $realtime;
        
        // Create transaction record
        record.master_id = master_id;
        record.start_time = current_time;
        record.end_time = current_time + $urandom_range(50, 500); // Simulate variable latency
        record.latency_ns = record.end_time - record.start_time;
        record.transaction_type = (tx.tx_type == axi4_master_tx::WRITE) ? "WRITE" : "READ";
        record.address = (tx.tx_type == axi4_master_tx::WRITE) ? tx.awaddr : tx.araddr;
        record.burst_length = (tx.tx_type == axi4_master_tx::WRITE) ? tx.awlen + 1 : tx.arlen + 1;
        record.data_bytes = data_bytes;
        
        // Determine address region for path info
        if (record.address < 64'h400)
            record.path_info = $sformatf("M%0d->S0 (0x%0h)", master_id, record.address);
        else if (record.address < 64'h100400)
            record.path_info = $sformatf("M%0d->S1 (0x%0h)", master_id, record.address);
        else if (record.address < 64'h200400)
            record.path_info = $sformatf("M%0d->S2 (0x%0h)", master_id, record.address);
        else if (record.address < 64'h300400)
            record.path_info = $sformatf("M%0d->S3 (0x%0h)", master_id, record.address);
        else if (record.address < 64'h400400)
            record.path_info = $sformatf("M%0d->S4 (0x%0h)", master_id, record.address);
        else if (record.address < 64'h500400)
            record.path_info = $sformatf("M%0d->S5 (0x%0h)", master_id, record.address);
        else if (record.address < 64'h600400)
            record.path_info = $sformatf("M%0d->S6 (0x%0h)", master_id, record.address);
        else if (record.address < 64'h700400)
            record.path_info = $sformatf("M%0d->S7 (0x%0h)", master_id, record.address);
        else if (record.address < 64'h800400)
            record.path_info = $sformatf("M%0d->S8 (0x%0h)", master_id, record.address);
        else if (record.address < 64'h900400)
            record.path_info = $sformatf("M%0d->S9 (0x%0h)", master_id, record.address);
        else if (record.address < 64'hA00400)
            record.path_info = $sformatf("M%0d->S10 (0x%0h)", master_id, record.address);
        else if (record.address < 64'hB00400)
            record.path_info = $sformatf("M%0d->S11 (0x%0h)", master_id, record.address);
        else if (record.address < 64'hC00400)
            record.path_info = $sformatf("M%0d->S12 (0x%0h)", master_id, record.address);
        else if (record.address < 64'hD00400)
            record.path_info = $sformatf("M%0d->S13 (0x%0h)", master_id, record.address);
        else if (record.address < 64'hE00400)
            record.path_info = $sformatf("M%0d->S14 (0x%0h)", master_id, record.address);
        else
            record.path_info = $sformatf("M%0d->UNMAPPED (0x%0h)", master_id, record.address);
        
        // Add to longest paths queue and maintain top 3
        longest_paths.push_back(record);
        
        // Sort by latency (descending) and keep only top 3
        longest_paths.sort() with (item.latency_ns > item.latency_ns);
        if (longest_paths.size() > 3) begin
            longest_paths = longest_paths[0:2];
        end
    endfunction
    
    // Final phase - report throughput statistics
    function void final_phase(uvm_phase phase);
        super.final_phase(phase);
        
        // Get statistics from driver static counters
        for (int i = 0; i < 15; i++) begin
            axi4_master_driver::get_transaction_stats(i, 
                                                     master_write_count[i],
                                                     master_bytes_written[i],
                                                     master_read_count[i],
                                                     master_bytes_read[i]);
        end
        simulation_end_time = $realtime;
        report_throughput_statistics();
    endfunction
    
    // Report throughput statistics
    function void report_throughput_statistics();
        real simulation_time_ns;
        real simulation_time_us;
        longint unsigned total_bytes;
        longint unsigned total_write_bytes;
        longint unsigned total_read_bytes;
        int unsigned total_write_count;
        int unsigned total_read_count;
        real write_throughput_mbps;
        real read_throughput_mbps;
        real total_throughput_mbps;
        
        simulation_time_ns = simulation_end_time - simulation_start_time;
        simulation_time_us = simulation_time_ns / 1000.0;
        
        if (simulation_time_us <= 0) begin
            `uvm_warning(get_type_name(), "Invalid simulation time for throughput calculation")
            return;
        end
        
        `uvm_info(get_type_name(), "\n\n", UVM_NONE)
        `uvm_info(get_type_name(), "===============================================", UVM_NONE)
        `uvm_info(get_type_name(), "         AXI4 THROUGHPUT STATISTICS", UVM_NONE)
        `uvm_info(get_type_name(), "===============================================", UVM_NONE)
        `uvm_info(get_type_name(), $sformatf("Simulation Time: %.2f ns (%.3f us)", simulation_time_ns, simulation_time_us), UVM_NONE)
        `uvm_info(get_type_name(), "-----------------------------------------------", UVM_NONE)
        
        // Per-Master Statistics
        `uvm_info(get_type_name(), "MASTER THROUGHPUT STATISTICS:", UVM_NONE)
        `uvm_info(get_type_name(), "Master | Write Trans | Write Bytes | Write Mbps | Read Trans | Read Bytes | Read Mbps | Total Mbps", UVM_NONE)
        `uvm_info(get_type_name(), "-------|-------------|-------------|------------|------------|------------|-----------|------------", UVM_NONE)
        
        total_write_bytes = 0;
        total_read_bytes = 0;
        total_write_count = 0;
        total_read_count = 0;
        
        for (int i = 0; i < 15; i++) begin
            write_throughput_mbps = (master_bytes_written[i] * 8.0) / simulation_time_us; // Convert to Mbps
            read_throughput_mbps = (master_bytes_read[i] * 8.0) / simulation_time_us;
            total_throughput_mbps = write_throughput_mbps + read_throughput_mbps;
            
            `uvm_info(get_type_name(), 
                $sformatf("  M%0d   | %11d | %11d | %10.2f | %10d | %10d | %9.2f | %10.2f",
                    i, 
                    master_write_count[i], 
                    master_bytes_written[i], 
                    write_throughput_mbps,
                    master_read_count[i], 
                    master_bytes_read[i], 
                    read_throughput_mbps,
                    total_throughput_mbps), 
                UVM_NONE)
            
            total_write_bytes += master_bytes_written[i];
            total_read_bytes += master_bytes_read[i];
            total_write_count += master_write_count[i];
            total_read_count += master_read_count[i];
        end
        
        `uvm_info(get_type_name(), "-------|-------------|-------------|------------|------------|------------|-----------|------------", UVM_NONE)
        
        // Total Statistics
        total_bytes = total_write_bytes + total_read_bytes;
        write_throughput_mbps = (total_write_bytes * 8.0) / simulation_time_us;
        read_throughput_mbps = (total_read_bytes * 8.0) / simulation_time_us;
        total_throughput_mbps = write_throughput_mbps + read_throughput_mbps;
        
        `uvm_info(get_type_name(), 
            $sformatf("TOTAL  | %11d | %11d | %10.2f | %10d | %10d | %9.2f | %10.2f",
                total_write_count, 
                total_write_bytes, 
                write_throughput_mbps,
                total_read_count, 
                total_read_bytes, 
                read_throughput_mbps,
                total_throughput_mbps), 
            UVM_NONE)
        
        `uvm_info(get_type_name(), "\n-----------------------------------------------", UVM_NONE)
        `uvm_info(get_type_name(), "SUMMARY:", UVM_NONE)
        `uvm_info(get_type_name(), $sformatf("  Total Transactions : %0d (Write: %0d, Read: %0d)", 
            total_write_count + total_read_count, total_write_count, total_read_count), UVM_NONE)
        `uvm_info(get_type_name(), $sformatf("  Total Data Transfer: %0d bytes (%.2f MB)", 
            total_bytes, total_bytes / 1048576.0), UVM_NONE)
        `uvm_info(get_type_name(), $sformatf("  Average Throughput : %.2f Mbps", total_throughput_mbps), UVM_NONE)
        `uvm_info(get_type_name(), $sformatf("  Avg Bytes/Trans   : %.2f", 
            real'(total_bytes) / real'(total_write_count + total_read_count)), UVM_NONE)
        
        // Display longest latency paths
        if (enable_latency_tracking && longest_paths.size() > 0) begin
            `uvm_info(get_type_name(), "\n-----------------------------------------------", UVM_NONE)
            `uvm_info(get_type_name(), "LONGEST LATENCY PATHS (TOP 3):", UVM_NONE)
            `uvm_info(get_type_name(), "Rank | Path Info           | Type  | Latency(ns) | Burst | Data(B) | Address", UVM_NONE)
            `uvm_info(get_type_name(), "-----|---------------------|-------|-------------|-------|---------|----------", UVM_NONE)
            
            for (int i = 0; i < longest_paths.size(); i++) begin
                `uvm_info(get_type_name(), 
                    $sformatf("  %0d  | %-19s | %-5s | %11.2f | %5d | %7d | 0x%0h",
                        i + 1,
                        longest_paths[i].path_info,
                        longest_paths[i].transaction_type,
                        longest_paths[i].latency_ns,
                        longest_paths[i].burst_length,
                        longest_paths[i].data_bytes,
                        longest_paths[i].address),
                    UVM_NONE)
            end
            
            `uvm_info(get_type_name(), "-----|---------------------|-------|-------------|-------|---------|----------", UVM_NONE)
            `uvm_info(get_type_name(), "NOTE: Latency values are simulated for analysis purposes", UVM_NONE)
        end
        
        `uvm_info(get_type_name(), "===============================================\n", UVM_NONE)
    endfunction
    
endclass : axi4_scoreboard
