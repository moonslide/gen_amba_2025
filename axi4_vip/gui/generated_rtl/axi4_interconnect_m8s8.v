//==============================================================================
// AXI4 Interconnect - 8 Masters x 8 Slaves
// Generated by AMBA Bus Matrix Configuration Tool
// Date: 2025-07-25 10:33:20
// Compliant with AMBA AXI4 Protocol Specification (IHI0022D)
//==============================================================================

module axi4_interconnect_m8s8 #(
    parameter DATA_WIDTH = 128,
    parameter ADDR_WIDTH = 40,
    parameter ID_WIDTH   = 4,
    parameter USER_WIDTH = 1
)(
    input wire                          aclk,
    input wire                          aresetn,
    
    // Master 0 - CPU_Cluster_0
    input  wire [5:0]  m0_awid,
    input  wire [ADDR_WIDTH-1:0]        m0_awaddr,
    input  wire [7:0]                   m0_awlen,
    input  wire [2:0]                   m0_awsize,
    input  wire [1:0]                   m0_awburst,
    input  wire                         m0_awlock,
    input  wire [3:0]                   m0_awcache,
    input  wire [2:0]                   m0_awprot,
    input  wire [3:0]                   m0_awqos,
    input  wire [3:0]                   m0_awregion,
    input  wire [3:0] m0_awuser,
    input  wire                         m0_awvalid,
    output wire                         m0_awready,
    input  wire [DATA_WIDTH-1:0]        m0_wdata,
    input  wire [DATA_WIDTH/8-1:0]      m0_wstrb,
    input  wire                         m0_wlast,
    input  wire [3:0] m0_wuser,
    input  wire                         m0_wvalid,
    output wire                         m0_wready,
    output wire [5:0] m0_bid,
    output wire [1:0]                   m0_bresp,
    output wire [3:0] m0_buser,
    output wire                         m0_bvalid,
    input  wire                         m0_bready,
    input  wire [5:0]  m0_arid,
    input  wire [ADDR_WIDTH-1:0]        m0_araddr,
    input  wire [7:0]                   m0_arlen,
    input  wire [2:0]                   m0_arsize,
    input  wire [1:0]                   m0_arburst,
    input  wire                         m0_arlock,
    input  wire [3:0]                   m0_arcache,
    input  wire [2:0]                   m0_arprot,
    input  wire [3:0]                   m0_arqos,
    input  wire [3:0]                   m0_arregion,
    input  wire [3:0] m0_aruser,
    input  wire                         m0_arvalid,
    output wire                         m0_arready,
    output wire [5:0] m0_rid,
    output wire [DATA_WIDTH-1:0]        m0_rdata,
    output wire [1:0]                   m0_rresp,
    output wire                         m0_rlast,
    output wire [3:0] m0_ruser,
    output wire                         m0_rvalid,
    input  wire                         m0_rready,
    // Master 1 - CPU_Cluster_1
    input  wire [5:0]  m1_awid,
    input  wire [ADDR_WIDTH-1:0]        m1_awaddr,
    input  wire [7:0]                   m1_awlen,
    input  wire [2:0]                   m1_awsize,
    input  wire [1:0]                   m1_awburst,
    input  wire                         m1_awlock,
    input  wire [3:0]                   m1_awcache,
    input  wire [2:0]                   m1_awprot,
    input  wire [3:0]                   m1_awqos,
    input  wire [3:0]                   m1_awregion,
    input  wire [3:0] m1_awuser,
    input  wire                         m1_awvalid,
    output wire                         m1_awready,
    input  wire [DATA_WIDTH-1:0]        m1_wdata,
    input  wire [DATA_WIDTH/8-1:0]      m1_wstrb,
    input  wire                         m1_wlast,
    input  wire [3:0] m1_wuser,
    input  wire                         m1_wvalid,
    output wire                         m1_wready,
    output wire [5:0] m1_bid,
    output wire [1:0]                   m1_bresp,
    output wire [3:0] m1_buser,
    output wire                         m1_bvalid,
    input  wire                         m1_bready,
    input  wire [5:0]  m1_arid,
    input  wire [ADDR_WIDTH-1:0]        m1_araddr,
    input  wire [7:0]                   m1_arlen,
    input  wire [2:0]                   m1_arsize,
    input  wire [1:0]                   m1_arburst,
    input  wire                         m1_arlock,
    input  wire [3:0]                   m1_arcache,
    input  wire [2:0]                   m1_arprot,
    input  wire [3:0]                   m1_arqos,
    input  wire [3:0]                   m1_arregion,
    input  wire [3:0] m1_aruser,
    input  wire                         m1_arvalid,
    output wire                         m1_arready,
    output wire [5:0] m1_rid,
    output wire [DATA_WIDTH-1:0]        m1_rdata,
    output wire [1:0]                   m1_rresp,
    output wire                         m1_rlast,
    output wire [3:0] m1_ruser,
    output wire                         m1_rvalid,
    input  wire                         m1_rready,
    // Master 2 - GPU
    input  wire [7:0]  m2_awid,
    input  wire [ADDR_WIDTH-1:0]        m2_awaddr,
    input  wire [7:0]                   m2_awlen,
    input  wire [2:0]                   m2_awsize,
    input  wire [1:0]                   m2_awburst,
    input  wire                         m2_awlock,
    input  wire [3:0]                   m2_awcache,
    input  wire [2:0]                   m2_awprot,
    input  wire [3:0]                   m2_awqos,
    input  wire [3:0]                   m2_awregion,
    input  wire [7:0] m2_awuser,
    input  wire                         m2_awvalid,
    output wire                         m2_awready,
    input  wire [DATA_WIDTH-1:0]        m2_wdata,
    input  wire [DATA_WIDTH/8-1:0]      m2_wstrb,
    input  wire                         m2_wlast,
    input  wire [7:0] m2_wuser,
    input  wire                         m2_wvalid,
    output wire                         m2_wready,
    output wire [7:0] m2_bid,
    output wire [1:0]                   m2_bresp,
    output wire [7:0] m2_buser,
    output wire                         m2_bvalid,
    input  wire                         m2_bready,
    input  wire [7:0]  m2_arid,
    input  wire [ADDR_WIDTH-1:0]        m2_araddr,
    input  wire [7:0]                   m2_arlen,
    input  wire [2:0]                   m2_arsize,
    input  wire [1:0]                   m2_arburst,
    input  wire                         m2_arlock,
    input  wire [3:0]                   m2_arcache,
    input  wire [2:0]                   m2_arprot,
    input  wire [3:0]                   m2_arqos,
    input  wire [3:0]                   m2_arregion,
    input  wire [7:0] m2_aruser,
    input  wire                         m2_arvalid,
    output wire                         m2_arready,
    output wire [7:0] m2_rid,
    output wire [DATA_WIDTH-1:0]        m2_rdata,
    output wire [1:0]                   m2_rresp,
    output wire                         m2_rlast,
    output wire [7:0] m2_ruser,
    output wire                         m2_rvalid,
    input  wire                         m2_rready,
    // Master 3 - Video_Encoder
    input  wire [3:0]  m3_awid,
    input  wire [ADDR_WIDTH-1:0]        m3_awaddr,
    input  wire [7:0]                   m3_awlen,
    input  wire [2:0]                   m3_awsize,
    input  wire [1:0]                   m3_awburst,
    input  wire                         m3_awlock,
    input  wire [3:0]                   m3_awcache,
    input  wire [2:0]                   m3_awprot,
    input  wire [3:0]                   m3_awqos,
    input  wire [3:0]                   m3_awregion,
    input  wire                         m3_awvalid,
    output wire                         m3_awready,
    input  wire [DATA_WIDTH-1:0]        m3_wdata,
    input  wire [DATA_WIDTH/8-1:0]      m3_wstrb,
    input  wire                         m3_wlast,
    input  wire                         m3_wvalid,
    output wire                         m3_wready,
    output wire [3:0] m3_bid,
    output wire [1:0]                   m3_bresp,
    output wire                         m3_bvalid,
    input  wire                         m3_bready,
    input  wire [3:0]  m3_arid,
    input  wire [ADDR_WIDTH-1:0]        m3_araddr,
    input  wire [7:0]                   m3_arlen,
    input  wire [2:0]                   m3_arsize,
    input  wire [1:0]                   m3_arburst,
    input  wire                         m3_arlock,
    input  wire [3:0]                   m3_arcache,
    input  wire [2:0]                   m3_arprot,
    input  wire [3:0]                   m3_arqos,
    input  wire [3:0]                   m3_arregion,
    input  wire                         m3_arvalid,
    output wire                         m3_arready,
    output wire [3:0] m3_rid,
    output wire [DATA_WIDTH-1:0]        m3_rdata,
    output wire [1:0]                   m3_rresp,
    output wire                         m3_rlast,
    output wire                         m3_rvalid,
    input  wire                         m3_rready,
    // Master 4 - Video_Decoder
    input  wire [3:0]  m4_awid,
    input  wire [ADDR_WIDTH-1:0]        m4_awaddr,
    input  wire [7:0]                   m4_awlen,
    input  wire [2:0]                   m4_awsize,
    input  wire [1:0]                   m4_awburst,
    input  wire                         m4_awlock,
    input  wire [3:0]                   m4_awcache,
    input  wire [2:0]                   m4_awprot,
    input  wire [3:0]                   m4_awqos,
    input  wire [3:0]                   m4_awregion,
    input  wire                         m4_awvalid,
    output wire                         m4_awready,
    input  wire [DATA_WIDTH-1:0]        m4_wdata,
    input  wire [DATA_WIDTH/8-1:0]      m4_wstrb,
    input  wire                         m4_wlast,
    input  wire                         m4_wvalid,
    output wire                         m4_wready,
    output wire [3:0] m4_bid,
    output wire [1:0]                   m4_bresp,
    output wire                         m4_bvalid,
    input  wire                         m4_bready,
    input  wire [3:0]  m4_arid,
    input  wire [ADDR_WIDTH-1:0]        m4_araddr,
    input  wire [7:0]                   m4_arlen,
    input  wire [2:0]                   m4_arsize,
    input  wire [1:0]                   m4_arburst,
    input  wire                         m4_arlock,
    input  wire [3:0]                   m4_arcache,
    input  wire [2:0]                   m4_arprot,
    input  wire [3:0]                   m4_arqos,
    input  wire [3:0]                   m4_arregion,
    input  wire                         m4_arvalid,
    output wire                         m4_arready,
    output wire [3:0] m4_rid,
    output wire [DATA_WIDTH-1:0]        m4_rdata,
    output wire [1:0]                   m4_rresp,
    output wire                         m4_rlast,
    output wire                         m4_rvalid,
    input  wire                         m4_rready,
    // Master 5 - DMA_Engine_0
    input  wire [3:0]  m5_awid,
    input  wire [ADDR_WIDTH-1:0]        m5_awaddr,
    input  wire [7:0]                   m5_awlen,
    input  wire [2:0]                   m5_awsize,
    input  wire [1:0]                   m5_awburst,
    input  wire                         m5_awlock,
    input  wire [3:0]                   m5_awcache,
    input  wire [2:0]                   m5_awprot,
    input  wire [3:0]                   m5_awqos,
    input  wire [3:0]                   m5_awregion,
    input  wire                         m5_awvalid,
    output wire                         m5_awready,
    input  wire [DATA_WIDTH-1:0]        m5_wdata,
    input  wire [DATA_WIDTH/8-1:0]      m5_wstrb,
    input  wire                         m5_wlast,
    input  wire                         m5_wvalid,
    output wire                         m5_wready,
    output wire [3:0] m5_bid,
    output wire [1:0]                   m5_bresp,
    output wire                         m5_bvalid,
    input  wire                         m5_bready,
    input  wire [3:0]  m5_arid,
    input  wire [ADDR_WIDTH-1:0]        m5_araddr,
    input  wire [7:0]                   m5_arlen,
    input  wire [2:0]                   m5_arsize,
    input  wire [1:0]                   m5_arburst,
    input  wire                         m5_arlock,
    input  wire [3:0]                   m5_arcache,
    input  wire [2:0]                   m5_arprot,
    input  wire [3:0]                   m5_arqos,
    input  wire [3:0]                   m5_arregion,
    input  wire                         m5_arvalid,
    output wire                         m5_arready,
    output wire [3:0] m5_rid,
    output wire [DATA_WIDTH-1:0]        m5_rdata,
    output wire [1:0]                   m5_rresp,
    output wire                         m5_rlast,
    output wire                         m5_rvalid,
    input  wire                         m5_rready,
    // Master 6 - DMA_Engine_1
    input  wire [3:0]  m6_awid,
    input  wire [ADDR_WIDTH-1:0]        m6_awaddr,
    input  wire [7:0]                   m6_awlen,
    input  wire [2:0]                   m6_awsize,
    input  wire [1:0]                   m6_awburst,
    input  wire                         m6_awlock,
    input  wire [3:0]                   m6_awcache,
    input  wire [2:0]                   m6_awprot,
    input  wire [3:0]                   m6_awqos,
    input  wire [3:0]                   m6_awregion,
    input  wire                         m6_awvalid,
    output wire                         m6_awready,
    input  wire [DATA_WIDTH-1:0]        m6_wdata,
    input  wire [DATA_WIDTH/8-1:0]      m6_wstrb,
    input  wire                         m6_wlast,
    input  wire                         m6_wvalid,
    output wire                         m6_wready,
    output wire [3:0] m6_bid,
    output wire [1:0]                   m6_bresp,
    output wire                         m6_bvalid,
    input  wire                         m6_bready,
    input  wire [3:0]  m6_arid,
    input  wire [ADDR_WIDTH-1:0]        m6_araddr,
    input  wire [7:0]                   m6_arlen,
    input  wire [2:0]                   m6_arsize,
    input  wire [1:0]                   m6_arburst,
    input  wire                         m6_arlock,
    input  wire [3:0]                   m6_arcache,
    input  wire [2:0]                   m6_arprot,
    input  wire [3:0]                   m6_arqos,
    input  wire [3:0]                   m6_arregion,
    input  wire                         m6_arvalid,
    output wire                         m6_arready,
    output wire [3:0] m6_rid,
    output wire [DATA_WIDTH-1:0]        m6_rdata,
    output wire [1:0]                   m6_rresp,
    output wire                         m6_rlast,
    output wire                         m6_rvalid,
    input  wire                         m6_rready,
    // Master 7 - PCIe_Controller
    input  wire [7:0]  m7_awid,
    input  wire [ADDR_WIDTH-1:0]        m7_awaddr,
    input  wire [7:0]                   m7_awlen,
    input  wire [2:0]                   m7_awsize,
    input  wire [1:0]                   m7_awburst,
    input  wire                         m7_awlock,
    input  wire [3:0]                   m7_awcache,
    input  wire [2:0]                   m7_awprot,
    input  wire [3:0]                   m7_awqos,
    input  wire [3:0]                   m7_awregion,
    input  wire [15:0] m7_awuser,
    input  wire                         m7_awvalid,
    output wire                         m7_awready,
    input  wire [DATA_WIDTH-1:0]        m7_wdata,
    input  wire [DATA_WIDTH/8-1:0]      m7_wstrb,
    input  wire                         m7_wlast,
    input  wire [15:0] m7_wuser,
    input  wire                         m7_wvalid,
    output wire                         m7_wready,
    output wire [7:0] m7_bid,
    output wire [1:0]                   m7_bresp,
    output wire [15:0] m7_buser,
    output wire                         m7_bvalid,
    input  wire                         m7_bready,
    input  wire [7:0]  m7_arid,
    input  wire [ADDR_WIDTH-1:0]        m7_araddr,
    input  wire [7:0]                   m7_arlen,
    input  wire [2:0]                   m7_arsize,
    input  wire [1:0]                   m7_arburst,
    input  wire                         m7_arlock,
    input  wire [3:0]                   m7_arcache,
    input  wire [2:0]                   m7_arprot,
    input  wire [3:0]                   m7_arqos,
    input  wire [3:0]                   m7_arregion,
    input  wire [15:0] m7_aruser,
    input  wire                         m7_arvalid,
    output wire                         m7_arready,
    output wire [7:0] m7_rid,
    output wire [DATA_WIDTH-1:0]        m7_rdata,
    output wire [1:0]                   m7_rresp,
    output wire                         m7_rlast,
    output wire [15:0] m7_ruser,
    output wire                         m7_rvalid,
    input  wire                         m7_rready,
    // Slave 0 - DDR4_Channel_0
    output wire [ID_WIDTH-1:0]          s0_awid,
    output wire [ADDR_WIDTH-1:0]        s0_awaddr,
    output wire [7:0]                   s0_awlen,
    output wire [2:0]                   s0_awsize,
    output wire [1:0]                   s0_awburst,
    output wire                         s0_awlock,
    output wire [3:0]                   s0_awcache,
    output wire [2:0]                   s0_awprot,
    output wire [3:0]                   s0_awqos,
    output wire [3:0]                   s0_awregion,
    output wire [USER_WIDTH-1:0]        s0_awuser,
    output wire                         s0_awvalid,
    input  wire                         s0_awready,
    output wire [DATA_WIDTH-1:0]        s0_wdata,
    output wire [DATA_WIDTH/8-1:0]      s0_wstrb,
    output wire                         s0_wlast,
    output wire [USER_WIDTH-1:0]        s0_wuser,
    output wire                         s0_wvalid,
    input  wire                         s0_wready,
    input  wire [ID_WIDTH-1:0]          s0_bid,
    input  wire [1:0]                   s0_bresp,
    input  wire [USER_WIDTH-1:0]        s0_buser,
    input  wire                         s0_bvalid,
    output wire                         s0_bready,
    output wire [ID_WIDTH-1:0]          s0_arid,
    output wire [ADDR_WIDTH-1:0]        s0_araddr,
    output wire [7:0]                   s0_arlen,
    output wire [2:0]                   s0_arsize,
    output wire [1:0]                   s0_arburst,
    output wire                         s0_arlock,
    output wire [3:0]                   s0_arcache,
    output wire [2:0]                   s0_arprot,
    output wire [3:0]                   s0_arqos,
    output wire [3:0]                   s0_arregion,
    output wire [USER_WIDTH-1:0]        s0_aruser,
    output wire                         s0_arvalid,
    input  wire                         s0_arready,
    input  wire [ID_WIDTH-1:0]          s0_rid,
    input  wire [DATA_WIDTH-1:0]        s0_rdata,
    input  wire [1:0]                   s0_rresp,
    input  wire                         s0_rlast,
    input  wire [USER_WIDTH-1:0]        s0_ruser,
    input  wire                         s0_rvalid,
    output wire                         s0_rready,

    // Slave 1 - DDR4_Channel_1
    output wire [ID_WIDTH-1:0]          s1_awid,
    output wire [ADDR_WIDTH-1:0]        s1_awaddr,
    output wire [7:0]                   s1_awlen,
    output wire [2:0]                   s1_awsize,
    output wire [1:0]                   s1_awburst,
    output wire                         s1_awlock,
    output wire [3:0]                   s1_awcache,
    output wire [2:0]                   s1_awprot,
    output wire [3:0]                   s1_awqos,
    output wire [3:0]                   s1_awregion,
    output wire [USER_WIDTH-1:0]        s1_awuser,
    output wire                         s1_awvalid,
    input  wire                         s1_awready,
    output wire [DATA_WIDTH-1:0]        s1_wdata,
    output wire [DATA_WIDTH/8-1:0]      s1_wstrb,
    output wire                         s1_wlast,
    output wire [USER_WIDTH-1:0]        s1_wuser,
    output wire                         s1_wvalid,
    input  wire                         s1_wready,
    input  wire [ID_WIDTH-1:0]          s1_bid,
    input  wire [1:0]                   s1_bresp,
    input  wire [USER_WIDTH-1:0]        s1_buser,
    input  wire                         s1_bvalid,
    output wire                         s1_bready,
    output wire [ID_WIDTH-1:0]          s1_arid,
    output wire [ADDR_WIDTH-1:0]        s1_araddr,
    output wire [7:0]                   s1_arlen,
    output wire [2:0]                   s1_arsize,
    output wire [1:0]                   s1_arburst,
    output wire                         s1_arlock,
    output wire [3:0]                   s1_arcache,
    output wire [2:0]                   s1_arprot,
    output wire [3:0]                   s1_arqos,
    output wire [3:0]                   s1_arregion,
    output wire [USER_WIDTH-1:0]        s1_aruser,
    output wire                         s1_arvalid,
    input  wire                         s1_arready,
    input  wire [ID_WIDTH-1:0]          s1_rid,
    input  wire [DATA_WIDTH-1:0]        s1_rdata,
    input  wire [1:0]                   s1_rresp,
    input  wire                         s1_rlast,
    input  wire [USER_WIDTH-1:0]        s1_ruser,
    input  wire                         s1_rvalid,
    output wire                         s1_rready,

    // Slave 2 - L3_Cache_SRAM
    output wire [ID_WIDTH-1:0]          s2_awid,
    output wire [ADDR_WIDTH-1:0]        s2_awaddr,
    output wire [7:0]                   s2_awlen,
    output wire [2:0]                   s2_awsize,
    output wire [1:0]                   s2_awburst,
    output wire                         s2_awlock,
    output wire [3:0]                   s2_awcache,
    output wire [2:0]                   s2_awprot,
    output wire [3:0]                   s2_awqos,
    output wire [3:0]                   s2_awregion,
    output wire [USER_WIDTH-1:0]        s2_awuser,
    output wire                         s2_awvalid,
    input  wire                         s2_awready,
    output wire [DATA_WIDTH-1:0]        s2_wdata,
    output wire [DATA_WIDTH/8-1:0]      s2_wstrb,
    output wire                         s2_wlast,
    output wire [USER_WIDTH-1:0]        s2_wuser,
    output wire                         s2_wvalid,
    input  wire                         s2_wready,
    input  wire [ID_WIDTH-1:0]          s2_bid,
    input  wire [1:0]                   s2_bresp,
    input  wire [USER_WIDTH-1:0]        s2_buser,
    input  wire                         s2_bvalid,
    output wire                         s2_bready,
    output wire [ID_WIDTH-1:0]          s2_arid,
    output wire [ADDR_WIDTH-1:0]        s2_araddr,
    output wire [7:0]                   s2_arlen,
    output wire [2:0]                   s2_arsize,
    output wire [1:0]                   s2_arburst,
    output wire                         s2_arlock,
    output wire [3:0]                   s2_arcache,
    output wire [2:0]                   s2_arprot,
    output wire [3:0]                   s2_arqos,
    output wire [3:0]                   s2_arregion,
    output wire [USER_WIDTH-1:0]        s2_aruser,
    output wire                         s2_arvalid,
    input  wire                         s2_arready,
    input  wire [ID_WIDTH-1:0]          s2_rid,
    input  wire [DATA_WIDTH-1:0]        s2_rdata,
    input  wire [1:0]                   s2_rresp,
    input  wire                         s2_rlast,
    input  wire [USER_WIDTH-1:0]        s2_ruser,
    input  wire                         s2_rvalid,
    output wire                         s2_rready,

    // Slave 3 - Boot_ROM
    output wire [ID_WIDTH-1:0]          s3_awid,
    output wire [ADDR_WIDTH-1:0]        s3_awaddr,
    output wire [7:0]                   s3_awlen,
    output wire [2:0]                   s3_awsize,
    output wire [1:0]                   s3_awburst,
    output wire                         s3_awlock,
    output wire [3:0]                   s3_awcache,
    output wire [2:0]                   s3_awprot,
    output wire [3:0]                   s3_awqos,
    output wire [3:0]                   s3_awregion,
    output wire [USER_WIDTH-1:0]        s3_awuser,
    output wire                         s3_awvalid,
    input  wire                         s3_awready,
    output wire [DATA_WIDTH-1:0]        s3_wdata,
    output wire [DATA_WIDTH/8-1:0]      s3_wstrb,
    output wire                         s3_wlast,
    output wire [USER_WIDTH-1:0]        s3_wuser,
    output wire                         s3_wvalid,
    input  wire                         s3_wready,
    input  wire [ID_WIDTH-1:0]          s3_bid,
    input  wire [1:0]                   s3_bresp,
    input  wire [USER_WIDTH-1:0]        s3_buser,
    input  wire                         s3_bvalid,
    output wire                         s3_bready,
    output wire [ID_WIDTH-1:0]          s3_arid,
    output wire [ADDR_WIDTH-1:0]        s3_araddr,
    output wire [7:0]                   s3_arlen,
    output wire [2:0]                   s3_arsize,
    output wire [1:0]                   s3_arburst,
    output wire                         s3_arlock,
    output wire [3:0]                   s3_arcache,
    output wire [2:0]                   s3_arprot,
    output wire [3:0]                   s3_arqos,
    output wire [3:0]                   s3_arregion,
    output wire [USER_WIDTH-1:0]        s3_aruser,
    output wire                         s3_arvalid,
    input  wire                         s3_arready,
    input  wire [ID_WIDTH-1:0]          s3_rid,
    input  wire [DATA_WIDTH-1:0]        s3_rdata,
    input  wire [1:0]                   s3_rresp,
    input  wire                         s3_rlast,
    input  wire [USER_WIDTH-1:0]        s3_ruser,
    input  wire                         s3_rvalid,
    output wire                         s3_rready,

    // Slave 4 - System_Registers
    output wire [ID_WIDTH-1:0]          s4_awid,
    output wire [ADDR_WIDTH-1:0]        s4_awaddr,
    output wire [7:0]                   s4_awlen,
    output wire [2:0]                   s4_awsize,
    output wire [1:0]                   s4_awburst,
    output wire                         s4_awlock,
    output wire [3:0]                   s4_awcache,
    output wire [2:0]                   s4_awprot,
    output wire [3:0]                   s4_awqos,
    output wire [3:0]                   s4_awregion,
    output wire [USER_WIDTH-1:0]        s4_awuser,
    output wire                         s4_awvalid,
    input  wire                         s4_awready,
    output wire [DATA_WIDTH-1:0]        s4_wdata,
    output wire [DATA_WIDTH/8-1:0]      s4_wstrb,
    output wire                         s4_wlast,
    output wire [USER_WIDTH-1:0]        s4_wuser,
    output wire                         s4_wvalid,
    input  wire                         s4_wready,
    input  wire [ID_WIDTH-1:0]          s4_bid,
    input  wire [1:0]                   s4_bresp,
    input  wire [USER_WIDTH-1:0]        s4_buser,
    input  wire                         s4_bvalid,
    output wire                         s4_bready,
    output wire [ID_WIDTH-1:0]          s4_arid,
    output wire [ADDR_WIDTH-1:0]        s4_araddr,
    output wire [7:0]                   s4_arlen,
    output wire [2:0]                   s4_arsize,
    output wire [1:0]                   s4_arburst,
    output wire                         s4_arlock,
    output wire [3:0]                   s4_arcache,
    output wire [2:0]                   s4_arprot,
    output wire [3:0]                   s4_arqos,
    output wire [3:0]                   s4_arregion,
    output wire [USER_WIDTH-1:0]        s4_aruser,
    output wire                         s4_arvalid,
    input  wire                         s4_arready,
    input  wire [ID_WIDTH-1:0]          s4_rid,
    input  wire [DATA_WIDTH-1:0]        s4_rdata,
    input  wire [1:0]                   s4_rresp,
    input  wire                         s4_rlast,
    input  wire [USER_WIDTH-1:0]        s4_ruser,
    input  wire                         s4_rvalid,
    output wire                         s4_rready,

    // Slave 5 - PCIe_Config_Space
    output wire [ID_WIDTH-1:0]          s5_awid,
    output wire [ADDR_WIDTH-1:0]        s5_awaddr,
    output wire [7:0]                   s5_awlen,
    output wire [2:0]                   s5_awsize,
    output wire [1:0]                   s5_awburst,
    output wire                         s5_awlock,
    output wire [3:0]                   s5_awcache,
    output wire [2:0]                   s5_awprot,
    output wire [3:0]                   s5_awqos,
    output wire [3:0]                   s5_awregion,
    output wire [USER_WIDTH-1:0]        s5_awuser,
    output wire                         s5_awvalid,
    input  wire                         s5_awready,
    output wire [DATA_WIDTH-1:0]        s5_wdata,
    output wire [DATA_WIDTH/8-1:0]      s5_wstrb,
    output wire                         s5_wlast,
    output wire [USER_WIDTH-1:0]        s5_wuser,
    output wire                         s5_wvalid,
    input  wire                         s5_wready,
    input  wire [ID_WIDTH-1:0]          s5_bid,
    input  wire [1:0]                   s5_bresp,
    input  wire [USER_WIDTH-1:0]        s5_buser,
    input  wire                         s5_bvalid,
    output wire                         s5_bready,
    output wire [ID_WIDTH-1:0]          s5_arid,
    output wire [ADDR_WIDTH-1:0]        s5_araddr,
    output wire [7:0]                   s5_arlen,
    output wire [2:0]                   s5_arsize,
    output wire [1:0]                   s5_arburst,
    output wire                         s5_arlock,
    output wire [3:0]                   s5_arcache,
    output wire [2:0]                   s5_arprot,
    output wire [3:0]                   s5_arqos,
    output wire [3:0]                   s5_arregion,
    output wire [USER_WIDTH-1:0]        s5_aruser,
    output wire                         s5_arvalid,
    input  wire                         s5_arready,
    input  wire [ID_WIDTH-1:0]          s5_rid,
    input  wire [DATA_WIDTH-1:0]        s5_rdata,
    input  wire [1:0]                   s5_rresp,
    input  wire                         s5_rlast,
    input  wire [USER_WIDTH-1:0]        s5_ruser,
    input  wire                         s5_rvalid,
    output wire                         s5_rready,

    // Slave 6 - Crypto_Engine
    output wire [ID_WIDTH-1:0]          s6_awid,
    output wire [ADDR_WIDTH-1:0]        s6_awaddr,
    output wire [7:0]                   s6_awlen,
    output wire [2:0]                   s6_awsize,
    output wire [1:0]                   s6_awburst,
    output wire                         s6_awlock,
    output wire [3:0]                   s6_awcache,
    output wire [2:0]                   s6_awprot,
    output wire [3:0]                   s6_awqos,
    output wire [3:0]                   s6_awregion,
    output wire [USER_WIDTH-1:0]        s6_awuser,
    output wire                         s6_awvalid,
    input  wire                         s6_awready,
    output wire [DATA_WIDTH-1:0]        s6_wdata,
    output wire [DATA_WIDTH/8-1:0]      s6_wstrb,
    output wire                         s6_wlast,
    output wire [USER_WIDTH-1:0]        s6_wuser,
    output wire                         s6_wvalid,
    input  wire                         s6_wready,
    input  wire [ID_WIDTH-1:0]          s6_bid,
    input  wire [1:0]                   s6_bresp,
    input  wire [USER_WIDTH-1:0]        s6_buser,
    input  wire                         s6_bvalid,
    output wire                         s6_bready,
    output wire [ID_WIDTH-1:0]          s6_arid,
    output wire [ADDR_WIDTH-1:0]        s6_araddr,
    output wire [7:0]                   s6_arlen,
    output wire [2:0]                   s6_arsize,
    output wire [1:0]                   s6_arburst,
    output wire                         s6_arlock,
    output wire [3:0]                   s6_arcache,
    output wire [2:0]                   s6_arprot,
    output wire [3:0]                   s6_arqos,
    output wire [3:0]                   s6_arregion,
    output wire [USER_WIDTH-1:0]        s6_aruser,
    output wire                         s6_arvalid,
    input  wire                         s6_arready,
    input  wire [ID_WIDTH-1:0]          s6_rid,
    input  wire [DATA_WIDTH-1:0]        s6_rdata,
    input  wire [1:0]                   s6_rresp,
    input  wire                         s6_rlast,
    input  wire [USER_WIDTH-1:0]        s6_ruser,
    input  wire                         s6_rvalid,
    output wire                         s6_rready,

    // Slave 7 - Debug_APB_Bridge
    output wire [ID_WIDTH-1:0]          s7_awid,
    output wire [ADDR_WIDTH-1:0]        s7_awaddr,
    output wire [7:0]                   s7_awlen,
    output wire [2:0]                   s7_awsize,
    output wire [1:0]                   s7_awburst,
    output wire                         s7_awlock,
    output wire [3:0]                   s7_awcache,
    output wire [2:0]                   s7_awprot,
    output wire [3:0]                   s7_awqos,
    output wire [3:0]                   s7_awregion,
    output wire [USER_WIDTH-1:0]        s7_awuser,
    output wire                         s7_awvalid,
    input  wire                         s7_awready,
    output wire [DATA_WIDTH-1:0]        s7_wdata,
    output wire [DATA_WIDTH/8-1:0]      s7_wstrb,
    output wire                         s7_wlast,
    output wire [USER_WIDTH-1:0]        s7_wuser,
    output wire                         s7_wvalid,
    input  wire                         s7_wready,
    input  wire [ID_WIDTH-1:0]          s7_bid,
    input  wire [1:0]                   s7_bresp,
    input  wire [USER_WIDTH-1:0]        s7_buser,
    input  wire                         s7_bvalid,
    output wire                         s7_bready,
    output wire [ID_WIDTH-1:0]          s7_arid,
    output wire [ADDR_WIDTH-1:0]        s7_araddr,
    output wire [7:0]                   s7_arlen,
    output wire [2:0]                   s7_arsize,
    output wire [1:0]                   s7_arburst,
    output wire                         s7_arlock,
    output wire [3:0]                   s7_arcache,
    output wire [2:0]                   s7_arprot,
    output wire [3:0]                   s7_arqos,
    output wire [3:0]                   s7_arregion,
    output wire [USER_WIDTH-1:0]        s7_aruser,
    output wire                         s7_arvalid,
    input  wire                         s7_arready,
    input  wire [ID_WIDTH-1:0]          s7_rid,
    input  wire [DATA_WIDTH-1:0]        s7_rdata,
    input  wire [1:0]                   s7_rresp,
    input  wire                         s7_rlast,
    input  wire [USER_WIDTH-1:0]        s7_ruser,
    input  wire                         s7_rvalid,
    output wire                         s7_rready
);

//------------------------------------------------------------------------------
// Internal Signals
//------------------------------------------------------------------------------

wire [7:0] m0_slave_select;
wire [7:0] m1_slave_select;
wire [7:0] m2_slave_select;
wire [7:0] m3_slave_select;
wire [7:0] m4_slave_select;
wire [7:0] m5_slave_select;
wire [7:0] m6_slave_select;
wire [7:0] m7_slave_select;

wire [7:0] s0_master_grant;
wire [7:0] s1_master_grant;
wire [7:0] s2_master_grant;
wire [7:0] s3_master_grant;
wire [7:0] s4_master_grant;
wire [7:0] s5_master_grant;
wire [7:0] s6_master_grant;
wire [7:0] s7_master_grant;

//------------------------------------------------------------------------------
// Address Decoder Instances
//------------------------------------------------------------------------------

axi4_address_decoder #(
    .ADDR_WIDTH(ADDR_WIDTH),
    .NUM_SLAVES(8)
) u_addr_decoder_m0 (
    .awaddr(m0_awaddr),
    .awvalid(m0_awvalid),
    .awprot(m0_awprot),
    .araddr(m0_araddr),
    .arvalid(m0_arvalid),
    .arprot(m0_arprot),
    .master_id(0),
    .slave_select(m0_slave_select),
    .access_error(m0_access_error)
);

axi4_address_decoder #(
    .ADDR_WIDTH(ADDR_WIDTH),
    .NUM_SLAVES(8)
) u_addr_decoder_m1 (
    .awaddr(m1_awaddr),
    .awvalid(m1_awvalid),
    .awprot(m1_awprot),
    .araddr(m1_araddr),
    .arvalid(m1_arvalid),
    .arprot(m1_arprot),
    .master_id(1),
    .slave_select(m1_slave_select),
    .access_error(m1_access_error)
);

axi4_address_decoder #(
    .ADDR_WIDTH(ADDR_WIDTH),
    .NUM_SLAVES(8)
) u_addr_decoder_m2 (
    .awaddr(m2_awaddr),
    .awvalid(m2_awvalid),
    .awprot(m2_awprot),
    .araddr(m2_araddr),
    .arvalid(m2_arvalid),
    .arprot(m2_arprot),
    .master_id(2),
    .slave_select(m2_slave_select),
    .access_error(m2_access_error)
);

axi4_address_decoder #(
    .ADDR_WIDTH(ADDR_WIDTH),
    .NUM_SLAVES(8)
) u_addr_decoder_m3 (
    .awaddr(m3_awaddr),
    .awvalid(m3_awvalid),
    .awprot(m3_awprot),
    .araddr(m3_araddr),
    .arvalid(m3_arvalid),
    .arprot(m3_arprot),
    .master_id(3),
    .slave_select(m3_slave_select),
    .access_error(m3_access_error)
);

axi4_address_decoder #(
    .ADDR_WIDTH(ADDR_WIDTH),
    .NUM_SLAVES(8)
) u_addr_decoder_m4 (
    .awaddr(m4_awaddr),
    .awvalid(m4_awvalid),
    .awprot(m4_awprot),
    .araddr(m4_araddr),
    .arvalid(m4_arvalid),
    .arprot(m4_arprot),
    .master_id(4),
    .slave_select(m4_slave_select),
    .access_error(m4_access_error)
);

axi4_address_decoder #(
    .ADDR_WIDTH(ADDR_WIDTH),
    .NUM_SLAVES(8)
) u_addr_decoder_m5 (
    .awaddr(m5_awaddr),
    .awvalid(m5_awvalid),
    .awprot(m5_awprot),
    .araddr(m5_araddr),
    .arvalid(m5_arvalid),
    .arprot(m5_arprot),
    .master_id(5),
    .slave_select(m5_slave_select),
    .access_error(m5_access_error)
);

axi4_address_decoder #(
    .ADDR_WIDTH(ADDR_WIDTH),
    .NUM_SLAVES(8)
) u_addr_decoder_m6 (
    .awaddr(m6_awaddr),
    .awvalid(m6_awvalid),
    .awprot(m6_awprot),
    .araddr(m6_araddr),
    .arvalid(m6_arvalid),
    .arprot(m6_arprot),
    .master_id(6),
    .slave_select(m6_slave_select),
    .access_error(m6_access_error)
);

axi4_address_decoder #(
    .ADDR_WIDTH(ADDR_WIDTH),
    .NUM_SLAVES(8)
) u_addr_decoder_m7 (
    .awaddr(m7_awaddr),
    .awvalid(m7_awvalid),
    .awprot(m7_awprot),
    .araddr(m7_araddr),
    .arvalid(m7_arvalid),
    .arprot(m7_arprot),
    .master_id(7),
    .slave_select(m7_slave_select),
    .access_error(m7_access_error)
);

//------------------------------------------------------------------------------
// Arbiter Instances
//------------------------------------------------------------------------------

axi4_arbiter #(
    .NUM_MASTERS(8),
    .ARBITRATION("QOS")
) u_arbiter_s0 (
    .aclk(aclk),
    .aresetn(aresetn),
    .master0_request(m0_slave_select[0]),
    .master0_priority(15),
    .master1_request(m1_slave_select[0]),
    .master1_priority(14),
    .master2_request(m2_slave_select[0]),
    .master2_priority(12),
    .master3_request(m3_slave_select[0]),
    .master3_priority(10),
    .master4_request(m4_slave_select[0]),
    .master4_priority(9),
    .master5_request(m5_slave_select[0]),
    .master5_priority(8),
    .master6_request(m6_slave_select[0]),
    .master6_priority(7),
    .master7_request(m7_slave_select[0]),
    .master7_priority(11),
    .grant(s0_master_grant)
);

axi4_arbiter #(
    .NUM_MASTERS(8),
    .ARBITRATION("QOS")
) u_arbiter_s1 (
    .aclk(aclk),
    .aresetn(aresetn),
    .master0_request(m0_slave_select[1]),
    .master0_priority(15),
    .master1_request(m1_slave_select[1]),
    .master1_priority(14),
    .master2_request(m2_slave_select[1]),
    .master2_priority(12),
    .master3_request(m3_slave_select[1]),
    .master3_priority(10),
    .master4_request(m4_slave_select[1]),
    .master4_priority(9),
    .master5_request(m5_slave_select[1]),
    .master5_priority(8),
    .master6_request(m6_slave_select[1]),
    .master6_priority(7),
    .master7_request(m7_slave_select[1]),
    .master7_priority(11),
    .grant(s1_master_grant)
);

axi4_arbiter #(
    .NUM_MASTERS(8),
    .ARBITRATION("QOS")
) u_arbiter_s2 (
    .aclk(aclk),
    .aresetn(aresetn),
    .master0_request(m0_slave_select[2]),
    .master0_priority(15),
    .master1_request(m1_slave_select[2]),
    .master1_priority(14),
    .master2_request(m2_slave_select[2]),
    .master2_priority(12),
    .master3_request(m3_slave_select[2]),
    .master3_priority(10),
    .master4_request(m4_slave_select[2]),
    .master4_priority(9),
    .master5_request(m5_slave_select[2]),
    .master5_priority(8),
    .master6_request(m6_slave_select[2]),
    .master6_priority(7),
    .master7_request(m7_slave_select[2]),
    .master7_priority(11),
    .grant(s2_master_grant)
);

axi4_arbiter #(
    .NUM_MASTERS(8),
    .ARBITRATION("QOS")
) u_arbiter_s3 (
    .aclk(aclk),
    .aresetn(aresetn),
    .master0_request(m0_slave_select[3]),
    .master0_priority(15),
    .master1_request(m1_slave_select[3]),
    .master1_priority(14),
    .master2_request(m2_slave_select[3]),
    .master2_priority(12),
    .master3_request(m3_slave_select[3]),
    .master3_priority(10),
    .master4_request(m4_slave_select[3]),
    .master4_priority(9),
    .master5_request(m5_slave_select[3]),
    .master5_priority(8),
    .master6_request(m6_slave_select[3]),
    .master6_priority(7),
    .master7_request(m7_slave_select[3]),
    .master7_priority(11),
    .grant(s3_master_grant)
);

axi4_arbiter #(
    .NUM_MASTERS(8),
    .ARBITRATION("QOS")
) u_arbiter_s4 (
    .aclk(aclk),
    .aresetn(aresetn),
    .master0_request(m0_slave_select[4]),
    .master0_priority(15),
    .master1_request(m1_slave_select[4]),
    .master1_priority(14),
    .master2_request(m2_slave_select[4]),
    .master2_priority(12),
    .master3_request(m3_slave_select[4]),
    .master3_priority(10),
    .master4_request(m4_slave_select[4]),
    .master4_priority(9),
    .master5_request(m5_slave_select[4]),
    .master5_priority(8),
    .master6_request(m6_slave_select[4]),
    .master6_priority(7),
    .master7_request(m7_slave_select[4]),
    .master7_priority(11),
    .grant(s4_master_grant)
);

axi4_arbiter #(
    .NUM_MASTERS(8),
    .ARBITRATION("QOS")
) u_arbiter_s5 (
    .aclk(aclk),
    .aresetn(aresetn),
    .master0_request(m0_slave_select[5]),
    .master0_priority(15),
    .master1_request(m1_slave_select[5]),
    .master1_priority(14),
    .master2_request(m2_slave_select[5]),
    .master2_priority(12),
    .master3_request(m3_slave_select[5]),
    .master3_priority(10),
    .master4_request(m4_slave_select[5]),
    .master4_priority(9),
    .master5_request(m5_slave_select[5]),
    .master5_priority(8),
    .master6_request(m6_slave_select[5]),
    .master6_priority(7),
    .master7_request(m7_slave_select[5]),
    .master7_priority(11),
    .grant(s5_master_grant)
);

axi4_arbiter #(
    .NUM_MASTERS(8),
    .ARBITRATION("QOS")
) u_arbiter_s6 (
    .aclk(aclk),
    .aresetn(aresetn),
    .master0_request(m0_slave_select[6]),
    .master0_priority(15),
    .master1_request(m1_slave_select[6]),
    .master1_priority(14),
    .master2_request(m2_slave_select[6]),
    .master2_priority(12),
    .master3_request(m3_slave_select[6]),
    .master3_priority(10),
    .master4_request(m4_slave_select[6]),
    .master4_priority(9),
    .master5_request(m5_slave_select[6]),
    .master5_priority(8),
    .master6_request(m6_slave_select[6]),
    .master6_priority(7),
    .master7_request(m7_slave_select[6]),
    .master7_priority(11),
    .grant(s6_master_grant)
);

axi4_arbiter #(
    .NUM_MASTERS(8),
    .ARBITRATION("QOS")
) u_arbiter_s7 (
    .aclk(aclk),
    .aresetn(aresetn),
    .master0_request(m0_slave_select[7]),
    .master0_priority(15),
    .master1_request(m1_slave_select[7]),
    .master1_priority(14),
    .master2_request(m2_slave_select[7]),
    .master2_priority(12),
    .master3_request(m3_slave_select[7]),
    .master3_priority(10),
    .master4_request(m4_slave_select[7]),
    .master4_priority(9),
    .master5_request(m5_slave_select[7]),
    .master5_priority(8),
    .master6_request(m6_slave_select[7]),
    .master6_priority(7),
    .master7_request(m7_slave_select[7]),
    .master7_priority(11),
    .grant(s7_master_grant)
);

//------------------------------------------------------------------------------
// Crossbar Connections
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Access Error Response Generator
//------------------------------------------------------------------------------

// Master 0 error response handling
assign m0_bresp  = m0_access_error ? 2'b11 : 2'b00; // DECERR if access denied
assign m0_rresp  = m0_access_error ? 2'b11 : 2'b00; // DECERR if access denied
assign m0_bvalid = m0_access_error ? m0_awvalid : 1'b0;
assign m0_rvalid = m0_access_error ? m0_arvalid : 1'b0;
assign m0_rdata  = {DATA_WIDTH{1'b0}}; // Return zeros on error
assign m0_rlast  = 1'b1; // Single beat error response

// Master 1 error response handling
assign m1_bresp  = m1_access_error ? 2'b11 : 2'b00; // DECERR if access denied
assign m1_rresp  = m1_access_error ? 2'b11 : 2'b00; // DECERR if access denied
assign m1_bvalid = m1_access_error ? m1_awvalid : 1'b0;
assign m1_rvalid = m1_access_error ? m1_arvalid : 1'b0;
assign m1_rdata  = {DATA_WIDTH{1'b0}}; // Return zeros on error
assign m1_rlast  = 1'b1; // Single beat error response

// Master 2 error response handling
assign m2_bresp  = m2_access_error ? 2'b11 : 2'b00; // DECERR if access denied
assign m2_rresp  = m2_access_error ? 2'b11 : 2'b00; // DECERR if access denied
assign m2_bvalid = m2_access_error ? m2_awvalid : 1'b0;
assign m2_rvalid = m2_access_error ? m2_arvalid : 1'b0;
assign m2_rdata  = {DATA_WIDTH{1'b0}}; // Return zeros on error
assign m2_rlast  = 1'b1; // Single beat error response

// Master 3 error response handling
assign m3_bresp  = m3_access_error ? 2'b11 : 2'b00; // DECERR if access denied
assign m3_rresp  = m3_access_error ? 2'b11 : 2'b00; // DECERR if access denied
assign m3_bvalid = m3_access_error ? m3_awvalid : 1'b0;
assign m3_rvalid = m3_access_error ? m3_arvalid : 1'b0;
assign m3_rdata  = {DATA_WIDTH{1'b0}}; // Return zeros on error
assign m3_rlast  = 1'b1; // Single beat error response

// Master 4 error response handling
assign m4_bresp  = m4_access_error ? 2'b11 : 2'b00; // DECERR if access denied
assign m4_rresp  = m4_access_error ? 2'b11 : 2'b00; // DECERR if access denied
assign m4_bvalid = m4_access_error ? m4_awvalid : 1'b0;
assign m4_rvalid = m4_access_error ? m4_arvalid : 1'b0;
assign m4_rdata  = {DATA_WIDTH{1'b0}}; // Return zeros on error
assign m4_rlast  = 1'b1; // Single beat error response

// Master 5 error response handling
assign m5_bresp  = m5_access_error ? 2'b11 : 2'b00; // DECERR if access denied
assign m5_rresp  = m5_access_error ? 2'b11 : 2'b00; // DECERR if access denied
assign m5_bvalid = m5_access_error ? m5_awvalid : 1'b0;
assign m5_rvalid = m5_access_error ? m5_arvalid : 1'b0;
assign m5_rdata  = {DATA_WIDTH{1'b0}}; // Return zeros on error
assign m5_rlast  = 1'b1; // Single beat error response

// Master 6 error response handling
assign m6_bresp  = m6_access_error ? 2'b11 : 2'b00; // DECERR if access denied
assign m6_rresp  = m6_access_error ? 2'b11 : 2'b00; // DECERR if access denied
assign m6_bvalid = m6_access_error ? m6_awvalid : 1'b0;
assign m6_rvalid = m6_access_error ? m6_arvalid : 1'b0;
assign m6_rdata  = {DATA_WIDTH{1'b0}}; // Return zeros on error
assign m6_rlast  = 1'b1; // Single beat error response

// Master 7 error response handling
assign m7_bresp  = m7_access_error ? 2'b11 : 2'b00; // DECERR if access denied
assign m7_rresp  = m7_access_error ? 2'b11 : 2'b00; // DECERR if access denied
assign m7_bvalid = m7_access_error ? m7_awvalid : 1'b0;
assign m7_rvalid = m7_access_error ? m7_arvalid : 1'b0;
assign m7_rdata  = {DATA_WIDTH{1'b0}}; // Return zeros on error
assign m7_rlast  = 1'b1; // Single beat error response

// TODO: Implement full crossbar switch
// This is a simplified interconnect structure
// For production use, implement complete routing logic

// Slave 0 - DDR4_Channel_0
// Address range: 0x0 - 0x1FFFFFFFF
// Regions: 4

// Slave 1 - DDR4_Channel_1
// Address range: 0x200000000 - 0x3FFFFFFFF
// Regions: 4

// Slave 2 - L3_Cache_SRAM
// Address range: 0x400000000 - 0x400FFFFFF
// Regions: 2

// Slave 3 - Boot_ROM
// Address range: 0x1000000000 - 0x100003FFFF
// Regions: 1

// Slave 4 - System_Registers
// Security: Privileged access only
// Address range: 0x2000000000 - 0x200000FFFF
// Regions: 1

// Slave 5 - PCIe_Config_Space
// Address range: 0x4000000000 - 0x4003FFFFFF
// Regions: 4

// Slave 6 - Crypto_Engine
// Security: Secure access only
// Security: Privileged access only
// Address range: 0x8000000000 - 0x800003FFFF
// Regions: 1

// Slave 7 - Debug_APB_Bridge
// Security: Privileged access only
// Address range: 0x10000000000 - 0x100000FFFFF
// Regions: 1

endmodule
