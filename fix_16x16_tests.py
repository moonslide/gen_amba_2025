#!/usr/bin/env python3
"""
Fix the original 16x16_vip test directory by generating actual test files
"""

import os
import sys
from datetime import datetime

def generate_test_files(test_dir):
    """Generate test files in the specified directory"""
    
    # Ensure test directory exists
    os.makedirs(test_dir, exist_ok=True)
    
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # Test package
    with open(os.path.join(test_dir, "axi4_test_pkg.sv"), "w") as f:
        f.write(f"""//==============================================================================
// AXI4 Test Package
// Generated by AMBA Bus Matrix Configuration Tool
// Date: {timestamp}
//==============================================================================

package axi4_test_pkg;
    
    import uvm_pkg::*;
    `include "uvm_macros.svh"
    
    import axi4_globals_pkg::*;
    import axi4_master_pkg::*;
    import axi4_slave_pkg::*;
    import axi4_master_seq_pkg::*;
    import axi4_slave_seq_pkg::*;
    import axi4_virtual_seq_pkg::*;
    import axi4_env_pkg::*;
    
    // Include test files
    `include "axi4_base_test.sv"
    `include "axi4_basic_rw_test.sv"
    `include "axi4_burst_test.sv"
    `include "axi4_random_test.sv"
    `include "axi4_stress_test.sv"
    `include "axi4_qos_test.sv"
    `include "axi4_error_injection_test.sv"
    `include "axi4_performance_test.sv"
    `include "axi4_interleaved_test.sv"
    `include "axi4_boundary_test.sv"
    
endpackage : axi4_test_pkg
""")
    
    # Base test
    with open(os.path.join(test_dir, "axi4_base_test.sv"), "w") as f:
        f.write(f"""//==============================================================================
// AXI4 Base Test
// Generated by AMBA Bus Matrix Configuration Tool
// Date: {timestamp}
//==============================================================================

class axi4_base_test extends uvm_test;
    
    `uvm_component_utils(axi4_base_test)
    
    // Environment instance
    axi4_env env;
    
    // Environment configuration
    axi4_env_config env_cfg;
    
    // Constructor
    function new(string name = "axi4_base_test", uvm_component parent = null);
        super.new(name, parent);
    endfunction
    
    // Build phase
    function void build_phase(uvm_phase phase);
        super.build_phase(phase);
        
        // Create environment configuration
        env_cfg = axi4_env_config::type_id::create("env_cfg");
        
        // Initialize master and slave configurations for 16x16 matrix
        env_cfg.no_of_masters = 16;
        env_cfg.no_of_slaves = 16;
        
        // Set configuration
        uvm_config_db#(axi4_env_config)::set(this, "env*", "env_cfg", env_cfg);
        
        // Create environment
        env = axi4_env::type_id::create("env", this);
    endfunction
    
    // Start of simulation phase
    function void start_of_simulation_phase(uvm_phase phase);
        super.start_of_simulation_phase(phase);
        
        if ($test$plusargs("enable_wave")) begin
            `uvm_info(get_type_name(), "Enabling waveform dump", UVM_LOW)
            `ifdef DUMP_FSDB
                $fsdbDumpon();
            `elsif DUMP_VCD
                $dumpon();
            `endif
        end
    endfunction
    
    // Run phase
    virtual task run_phase(uvm_phase phase);
        axi4_basic_virtual_seq vseq;
        
        phase.raise_objection(this);
        
        // Create and start virtual sequence
        vseq = axi4_basic_virtual_seq::type_id::create("vseq");
        vseq.start(env.virtual_seqr);
        
        phase.drop_objection(this);
    endtask
    
endclass : axi4_base_test
""")
    
    # Stress test
    with open(os.path.join(test_dir, "axi4_stress_test.sv"), "w") as f:
        f.write(f"""//==============================================================================
// AXI4 Stress Test
// Generated by AMBA Bus Matrix Configuration Tool
// Date: {timestamp}
//==============================================================================

class axi4_stress_test extends axi4_base_test;
    
    `uvm_component_utils(axi4_stress_test)
    
    // Constructor
    function new(string name = "axi4_stress_test", uvm_component parent = null);
        super.new(name, parent);
    endfunction
    
    // Run phase
    virtual task run_phase(uvm_phase phase);
        axi4_stress_virtual_seq vseq;
        
        phase.raise_objection(this);
        
        // Create and start stress virtual sequence
        vseq = axi4_stress_virtual_seq::type_id::create("vseq");
        vseq.num_trans = 1000; // High transaction count for stress
        vseq.start(env.virtual_seqr);
        
        phase.drop_objection(this);
    endtask
    
endclass : axi4_stress_test
""")

    # QoS test
    with open(os.path.join(test_dir, "axi4_qos_test.sv"), "w") as f:
        f.write(f"""//==============================================================================
// AXI4 QoS Test
// Generated by AMBA Bus Matrix Configuration Tool
// Date: {timestamp}
//==============================================================================

class axi4_qos_test extends axi4_base_test;
    
    `uvm_component_utils(axi4_qos_test)
    
    // Constructor
    function new(string name = "axi4_qos_test", uvm_component parent = null);
        super.new(name, parent);
    endfunction
    
    // Run phase
    virtual task run_phase(uvm_phase phase);
        axi4_qos_virtual_seq vseq;
        
        phase.raise_objection(this);
        
        // Create and start QoS virtual sequence
        vseq = axi4_qos_virtual_seq::type_id::create("vseq");
        vseq.start(env.virtual_seqr);
        
        phase.drop_objection(this);
    endtask
    
endclass : axi4_qos_test
""")

    # Generate remaining test files
    test_files = [
        ("axi4_basic_rw_test.sv", "axi4_basic_rw_test", "axi4_basic_rw_virtual_seq"),
        ("axi4_burst_test.sv", "axi4_burst_test", "axi4_burst_virtual_seq"),
        ("axi4_random_test.sv", "axi4_random_test", "axi4_random_virtual_seq"),
        ("axi4_error_injection_test.sv", "axi4_error_injection_test", "axi4_error_virtual_seq"),
        ("axi4_performance_test.sv", "axi4_performance_test", "axi4_performance_virtual_seq"),
        ("axi4_interleaved_test.sv", "axi4_interleaved_test", "axi4_interleaved_virtual_seq"),
        ("axi4_boundary_test.sv", "axi4_boundary_test", "axi4_boundary_virtual_seq")
    ]
    
    for filename, classname, seqname in test_files:
        with open(os.path.join(test_dir, filename), "w") as f:
            f.write(f"""//==============================================================================
// {classname.replace('_', ' ').title()}
// Generated by AMBA Bus Matrix Configuration Tool  
// Date: {timestamp}
//==============================================================================

class {classname} extends axi4_base_test;
    
    `uvm_component_utils({classname})
    
    // Constructor
    function new(string name = "{classname}", uvm_component parent = null);
        super.new(name, parent);
    endfunction
    
    // Run phase
    virtual task run_phase(uvm_phase phase);
        {seqname} vseq;
        
        phase.raise_objection(this);
        
        // Create and start virtual sequence
        vseq = {seqname}::type_id::create("vseq");
        vseq.start(env.virtual_seqr);
        
        phase.drop_objection(this);
    endtask
    
endclass : {classname}
""")

    print(f"✅ Generated {len(test_files) + 4} test files in {test_dir}")
    return True

if __name__ == "__main__":
    test_dir = "/home/timtim01/eda_test/project/gen_amba_2025/16x16_vip/axi4_vip_env_rtl_integration/test"
    
    print(f"Generating test files in: {test_dir}")
    
    if generate_test_files(test_dir):
        print("✅ Successfully generated test files for 16x16_vip!")
        
        # List the generated files
        files = os.listdir(test_dir)
        print(f"Generated files: {sorted(files)}")
    else:
        print("❌ Failed to generate test files")
        sys.exit(1)