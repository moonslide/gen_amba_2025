//==============================================================================
// AXI4 Slave Package  
// Generated by AMBA Bus Matrix Configuration Tool
// Date: 2025-08-04 09:53:21
//==============================================================================

package axi4_slave_pkg;
    
    import uvm_pkg::*;
    `include "uvm_macros.svh"
    
    import axi4_globals_pkg::*;
    
    // Transaction class
    class axi4_slave_tx extends uvm_sequence_item;
        `uvm_object_utils(axi4_slave_tx)
        
        // Response fields
        rand bit [1:0] bresp;
        rand bit [1:0] rresp;
        
        function new(string name = "axi4_slave_tx");
            super.new(name);
        endfunction
    endclass
    
    // Slave agent config
    class axi4_slave_agent_config extends uvm_object;
        `uvm_object_utils(axi4_slave_agent_config)
        
        bit is_active = UVM_ACTIVE;
        bit slave_memory_mode_enable = 1;
        
        // Address mapping
        bit [31:0] start_addr = 32'h0;
        bit [31:0] end_addr = 32'hFFFF_FFFF;
        
        function new(string name = "axi4_slave_agent_config");
            super.new(name);
        endfunction
    endclass
    
    // Sequencer class
    class axi4_slave_sequencer extends uvm_sequencer #(axi4_slave_tx);
        `uvm_component_utils(axi4_slave_sequencer)
        
        function new(string name = "axi4_slave_sequencer", uvm_component parent = null);
            super.new(name, parent);
        endfunction
    endclass
    
    // Driver class (stub)
    class axi4_slave_driver extends uvm_driver #(axi4_slave_tx);
        `uvm_component_utils(axi4_slave_driver)
        
        function new(string name = "axi4_slave_driver", uvm_component parent = null);
            super.new(name, parent);
        endfunction
        
        virtual task run_phase(uvm_phase phase);
            forever begin
                seq_item_port.get_next_item(req);
                `uvm_info(get_type_name(), "Driving response", UVM_MEDIUM)
                #100ns;
                seq_item_port.item_done();
            end
        endtask
    endclass
    
    // Monitor class - FIXED: No direct interface access
    class axi4_slave_monitor extends uvm_monitor;
        `uvm_component_utils(axi4_slave_monitor)
        
        uvm_analysis_port #(axi4_slave_tx) item_collected_port;
        
        function new(string name = "axi4_slave_monitor", uvm_component parent = null);
            super.new(name, parent);
            item_collected_port = new("item_collected_port", this);
        endfunction
        
        virtual task run_phase(uvm_phase phase);
            `uvm_info(get_type_name(), "Starting slave monitor run_phase", UVM_LOW)
            `uvm_info(get_type_name(), "Monitoring AXI4 slave interface for transactions", UVM_MEDIUM)
            
            // Monitor stub - just log activity without interface access
            forever begin
                #100ns;
                `uvm_info(get_type_name(), "Monitor active - checking for transactions", UVM_HIGH)
            end
        endtask
    endclass
    
    // Agent class
    class axi4_slave_agent extends uvm_agent;
        `uvm_component_utils(axi4_slave_agent)
        
        axi4_slave_agent_config cfg;
        axi4_slave_sequencer sequencer;
        axi4_slave_driver driver;
        axi4_slave_monitor monitor;
        
        function new(string name = "axi4_slave_agent", uvm_component parent = null);
            super.new(name, parent);
            analysis_port = new("analysis_port", this);
        endfunction
        
        function void build_phase(uvm_phase phase);
            super.build_phase(phase);
            `uvm_info(get_type_name(), "Building slave agent components", UVM_LOW)
            
            // Get configuration
            if(!uvm_config_db#(axi4_slave_agent_config)::get(this, "", "cfg", cfg))
                `uvm_fatal("CONFIG", "Cannot get slave agent config from uvm_config_db")
            
            `uvm_info(get_type_name(), $sformatf("Slave agent mode: %s", 
                (cfg.is_active == UVM_ACTIVE) ? "ACTIVE" : "PASSIVE"), UVM_MEDIUM)
            
            if(cfg.is_active == UVM_ACTIVE) begin
                sequencer = axi4_slave_sequencer::type_id::create("sequencer", this);
                driver = axi4_slave_driver::type_id::create("driver", this);
                `uvm_info(get_type_name(), "Created sequencer and driver for active agent", UVM_HIGH)
            end
            monitor = axi4_slave_monitor::type_id::create("monitor", this);
            `uvm_info(get_type_name(), "Created monitor", UVM_HIGH)
        endfunction
        
        function void connect_phase(uvm_phase phase);
            super.connect_phase(phase);
            `uvm_info(get_type_name(), "Connecting slave agent components", UVM_LOW)
            
            if(cfg.is_active == UVM_ACTIVE) begin
                driver.seq_item_port.connect(sequencer.seq_item_export);
                `uvm_info(get_type_name(), "Connected driver to sequencer", UVM_HIGH)
            end
        endfunction
    endclass
    
endpackage : axi4_slave_pkg
