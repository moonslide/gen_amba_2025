//==============================================================================
// AXI4 Stress Test
// Generated by AMBA Bus Matrix Configuration Tool
// Date: 2025-08-09 12:32:51
//==============================================================================

class axi4_stress_test extends axi4_base_test;
    
    `uvm_component_utils(axi4_stress_test)
    
    // Constructor
    function new(string name = "axi4_stress_test", uvm_component parent = null);
        super.new(name, parent);
    endfunction
    
    // Run phase
    task run_phase(uvm_phase phase);
        axi4_virtual_stress_seq stress_seq;
        
        phase.raise_objection(this);
        
        `uvm_info(get_type_name(), "Starting stress test", UVM_LOW)
        
        // Run stress sequence with moderate traffic for finite completion
        stress_seq = axi4_virtual_stress_seq::type_id::create("stress_seq");
        stress_seq.num_iterations = 50;  // Reduced for reasonable test time
        stress_seq.enable_backpressure = 1;
        
        // Add timeout to prevent infinite run
        fork
            stress_seq.start(env.v_seqr);
            begin
                #100ms;  // 10 millisecond timeout
                `uvm_error(get_type_name(), "Stress test timed out after 10ms - possible infinite loop!")
            end
        join_any
        disable fork;
        
        `uvm_info(get_type_name(), "Completed stress test", UVM_LOW)
        
        phase.drop_objection(this);
    endtask
    
endclass : axi4_stress_test

    // Single Master Test for Debugging
    class axi4_single_master_test extends axi4_base_test;
        
        `uvm_component_utils(axi4_single_master_test)
        
        function new(string name = "axi4_single_master_test", uvm_component parent = null);
            super.new(name, parent);
        endfunction
        
        virtual task run_phase(uvm_phase phase);
            axi4_master_random_seq seq;
            
            phase.raise_objection(this);
            
            `uvm_info(get_type_name(), "Starting single master test", UVM_LOW)
            
            // Wait for reset
            #500ns;
            
            // Create and start sequence on master 0 only
            seq = axi4_master_random_seq::type_id::create("seq");
            seq.num_trans = 1; // Just 1 transaction
            
            `uvm_info(get_type_name(), "Starting sequence on master 0", UVM_LOW)
            seq.start(env.master_agent[0].sequencer);
            
            `uvm_info(get_type_name(), "Sequence completed", UVM_LOW)
            
            #1us;
            
            phase.drop_objection(this);
        endtask
        
    endclass : axi4_single_master_test

