//==============================================================================
// AXI4 Virtual Simple Crossbar Sequence - Reduced test for quick verification
//==============================================================================

class axi4_virtual_simple_crossbar_seq extends axi4_virtual_base_seq;
    `uvm_object_utils(axi4_virtual_simple_crossbar_seq)
    
    bit seq_done = 0;  // Completion flag
    
    function new(string name = "axi4_virtual_simple_crossbar_seq");
        super.new(name);
    endfunction
    
    virtual task body();
        axi4_master_simple_crossbar_seq master_seq;
        
        `uvm_info(get_type_name(), "Starting Simple Crossbar Virtual Sequence", UVM_LOW)
        `uvm_info(get_type_name(), "Testing ONLY first master to first slave for quick test", UVM_LOW)
        
        // Only test one master to one slave to ensure quick completion
        master_seq = axi4_master_simple_crossbar_seq::type_id::create("master_seq_0");
        master_seq.master_id = 0;
        
        // Start sequence with timeout
        fork
            begin
                master_seq.start(p_sequencer.master_seqr[0]);
                `uvm_info(get_type_name(), "Master 0 sequence completed", UVM_LOW)
            end
            begin
                #500; // 500ns timeout for sequence
                `uvm_info(get_type_name(), "Sequence timeout - continuing", UVM_LOW)
            end
        join_any
        
        // Kill any remaining threads
        disable fork;
        
        // Small delay
        #100;
        
        `uvm_info(get_type_name(), "Simple Crossbar Virtual Sequence Completed", UVM_LOW)
        seq_done = 1;  // Signal completion
    endtask
    
endclass
