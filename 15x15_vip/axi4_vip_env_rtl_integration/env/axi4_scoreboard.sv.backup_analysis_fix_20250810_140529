//==============================================================================
// AXI4 Scoreboard with Virtual Interface RTL WLAST Monitoring
// Uses proper SystemVerilog virtual interface instead of hierarchical references
// Generated by AMBA Bus Matrix Configuration Tool - ULTRATHINK Edition
//==============================================================================

    class axi4_scoreboard extends uvm_scoreboard;
        `uvm_component_utils(axi4_scoreboard)
        
        // Virtual interface for RTL signal monitoring
        virtual rtl_monitor_if rtl_mon_vif;
        
        // Analysis fifos for master and slave transactions - Array support for multiple masters/slaves
        uvm_tlm_analysis_fifo #(axi4_master_tx) master_fifo[15];  // 15x15 matrix support
        uvm_tlm_analysis_fifo #(axi4_slave_tx) slave_fifo[15];
        
        // WLAST tracking per master - VIP side
        int wlast_count_per_master[int];
        int write_transactions_per_master[int];
        int total_wlast_expected = 0;
        int total_wlast_observed = 0;
        
        // RTL WLAST signal monitoring - actual RTL side
        int rtl_wlast_count_per_master[15];
        int total_rtl_wlast_observed = 0;
        
        function new(string name = "axi4_scoreboard", uvm_component parent = null);
            super.new(name, parent);
            // Initialize RTL counters
            for (int i = 0; i < 15; i++) begin
                rtl_wlast_count_per_master[i] = 0;
            end
        endfunction
        
        function void build_phase(uvm_phase phase);
            super.build_phase(phase);
            
            // Create fifo arrays for 15x15 matrix support
            for (int i = 0; i < 15; i++) begin
                master_fifo[i] = new($sformatf("master_fifo_%0d", i), this);
                slave_fifo[i] = new($sformatf("slave_fifo_%0d", i), this);
            end
            
            // Get virtual interface from config DB
            if (!uvm_config_db#(virtual rtl_monitor_if)::get(this, "", "rtl_mon_vif", rtl_mon_vif)) begin
                `uvm_fatal(get_type_name(), "Failed to get rtl_mon_vif from config DB!")
            end
            
            `uvm_info(get_type_name(), "Scoreboard built with VIF-based RTL WLAST monitoring", UVM_LOW)
        endfunction
        
        virtual task run_phase(uvm_phase phase);
            `uvm_info(get_type_name(), "Starting scoreboard with VIF RTL WLAST monitoring", UVM_LOW)
            
            fork
                // Process all master fifos (VIP side)
                for (int i = 0; i < 15; i++) begin
                    automatic int master_id = i;
                    fork
                        process_master_transactions(master_id);
                    join_none
                end
                
                // Process all slave fifos (VIP side)
                for (int i = 0; i < 15; i++) begin
                    automatic int slave_id = i;
                    fork
                        process_slave_transactions(slave_id);
                    join_none
                end
                
                // Monitor actual RTL WLAST signals via virtual interface
                monitor_rtl_wlast_signals_vif();
                
                // Periodic validation and comparison
                wlast_validation_monitor();
            join_none
        endtask
        
        virtual task process_master_transactions(int master_idx);
            axi4_master_tx master_tx;
            forever begin
                master_fifo[master_idx].get(master_tx);
                
                if (master_tx.tx_type == axi4_master_tx::WRITE) begin
                    if (!wlast_count_per_master.exists(master_tx.awid)) begin
                        wlast_count_per_master[master_tx.awid] = 0;
                        write_transactions_per_master[master_tx.awid] = 0;
                    end
                    
                    write_transactions_per_master[master_tx.awid]++;
                    total_wlast_expected++;
                    
                    `uvm_info(get_type_name(), $sformatf("VIP Master[%0d] ID=%0d WRITE: expected WLAST count now %0d", 
                              master_idx, master_tx.awid, write_transactions_per_master[master_tx.awid]), UVM_MEDIUM)
                end
                
                `uvm_info(get_type_name(), $sformatf("Processed VIP master[%0d] transaction: ID=%0d, TYPE=%s", 
                          master_idx, (master_tx.tx_type == axi4_master_tx::WRITE) ? master_tx.awid : master_tx.arid,
                          master_tx.tx_type.name()), UVM_HIGH)
            end
        endtask
        
        virtual task process_slave_transactions(int slave_idx);
            axi4_slave_tx slave_tx;
            forever begin
                slave_fifo[slave_idx].get(slave_tx);
                `uvm_info(get_type_name(), $sformatf("Processed VIP slave[%0d] transaction", slave_idx), UVM_HIGH)
            end
        endtask
        
        // NEW: Monitor RTL WLAST signals via virtual interface (SystemVerilog compliant)
        virtual task monitor_rtl_wlast_signals_vif();
            `uvm_info(get_type_name(), "Starting VIF-based RTL WLAST signal monitoring", UVM_LOW)
            
            fork
                // Monitor each master's RTL WLAST signal via virtual interface
                for (int i = 0; i < 15; i++) begin
                    automatic int master_id = i;
                    fork
                        monitor_master_rtl_wlast_vif(master_id);
                    join_none
                end
            join_none
        endtask
        
        // Monitor RTL WLAST for specific master using virtual interface
        virtual task monitor_master_rtl_wlast_vif(int master_id);
            bit handshake_detected;
            
            forever begin
                // Use virtual interface clocking block for proper synchronization
                @(rtl_mon_vif.mon_cb);
                
                // Check RTL WLAST handshake for this master via VIF
                if (master_id < 15) begin  // Only monitor masters 0-14
                    rtl_mon_vif.monitor_wlast_handshake(master_id, handshake_detected);
                    
                    if (handshake_detected) begin
                        rtl_wlast_count_per_master[master_id]++;
                        total_rtl_wlast_observed++;
                        `uvm_info(get_type_name(), $sformatf("*** RTL M%0d_WLAST VIF OBSERVED *** count: %0d", 
                                  master_id, rtl_wlast_count_per_master[master_id]), UVM_MEDIUM)
                    end
                end
            end
        endtask
        
        virtual task wlast_validation_monitor();
            // Periodic comparison between VIP and RTL WLAST counts
            forever begin
                #5000; // Check every 5us
                
                `uvm_info(get_type_name(), $sformatf("=== VIF WLAST COMPARISON ==="), UVM_MEDIUM)
                `uvm_info(get_type_name(), $sformatf("VIP Expected: %0d, RTL Observed: %0d", 
                          total_wlast_expected, total_rtl_wlast_observed), UVM_MEDIUM)
                
                for (int i = 0; i < 15; i++) begin // Check all 15 masters
                    if (rtl_wlast_count_per_master[i] > 0) begin
                        `uvm_info(get_type_name(), $sformatf("Master %0d RTL WLAST count: %0d", 
                                  i, rtl_wlast_count_per_master[i]), UVM_MEDIUM)
                    end
                end
            end
        endtask
        
        function void report_phase(uvm_phase phase);
            super.report_phase(phase);
            
            `uvm_info(get_type_name(), "=== SCOREBOARD VIF RTL WLAST REPORT ===", UVM_LOW)
            `uvm_info(get_type_name(), $sformatf("VIP Total Expected WLAST: %0d", total_wlast_expected), UVM_LOW)
            `uvm_info(get_type_name(), $sformatf("VIP Total Observed WLAST: %0d", total_wlast_observed), UVM_LOW)
            `uvm_info(get_type_name(), $sformatf("RTL Total Observed WLAST (VIF): %0d", total_rtl_wlast_observed), UVM_LOW)
            
            `uvm_info(get_type_name(), "--- Per-Master RTL WLAST Counts (VIF) ---", UVM_LOW)
            for (int i = 0; i < 15; i++) begin
                if (rtl_wlast_count_per_master[i] > 0) begin
                    `uvm_info(get_type_name(), $sformatf("Master %0d RTL WLAST: %0d", 
                              i, rtl_wlast_count_per_master[i]), UVM_LOW)
                end
            end
            
            `uvm_info(get_type_name(), "--- VIP vs RTL Comparison (VIF) ---", UVM_LOW)
            if (total_wlast_expected != total_rtl_wlast_observed) begin
                `uvm_error(get_type_name(), $sformatf("WLAST MISMATCH! VIP Expected: %0d, RTL Observed: %0d", 
                          total_wlast_expected, total_rtl_wlast_observed))
                `uvm_error(get_type_name(), "This indicates a potential issue with RTL interconnect or VIP driving")
            end else begin
                `uvm_info(get_type_name(), "âœ“ VIP and RTL WLAST counts match via VIF!", UVM_LOW)
            end
            
            // Check if RTL observed more WLAST than expected (user's concern)
            if (total_rtl_wlast_observed > total_wlast_expected) begin
                `uvm_error(get_type_name(), $sformatf("RTL EXTRA WLAST! RTL saw %0d WLAST but VIP expected only %0d", 
                          total_rtl_wlast_observed, total_wlast_expected))
                `uvm_error(get_type_name(), "RTL interconnect may be generating extra WLAST signals")
            end
        endfunction
    
    endclass : axi4_scoreboard