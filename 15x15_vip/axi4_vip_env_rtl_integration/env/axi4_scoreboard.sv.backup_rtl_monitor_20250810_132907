//==============================================================================
// AXI4 Scoreboard with Throughput and Latency Tracking
// Generated by AMBA Bus Matrix Configuration Tool
// Date: 2025-08-09 12:32:51
//==============================================================================

    class axi4_scoreboard extends uvm_scoreboard;
        `uvm_component_utils(axi4_scoreboard)
        
        // Analysis fifos for master and slave transactions - Array support for multiple masters/slaves
        uvm_tlm_analysis_fifo #(axi4_master_tx) master_fifo[15];  // 15x15 matrix support
        uvm_tlm_analysis_fifo #(axi4_slave_tx) slave_fifo[15];
        
        // WLAST tracking per master
        int wlast_count_per_master[int];
        int write_transactions_per_master[int];
        int total_wlast_expected = 0;
        int total_wlast_observed = 0;
        
        function new(string name = "axi4_scoreboard", uvm_component parent = null);
            super.new(name, parent);
        endfunction
        
        function void build_phase(uvm_phase phase);
            super.build_phase(phase);
            // Create fifo arrays for 15x15 matrix support
            for (int i = 0; i < 15; i++) begin
                master_fifo[i] = new($sformatf("master_fifo_%0d", i), this);
                slave_fifo[i] = new($sformatf("slave_fifo_%0d", i), this);
            end
            `uvm_info(get_type_name(), "Scoreboard built with WLAST tracking and 15x15 fifo arrays", UVM_LOW)
        endfunction
        
        virtual task run_phase(uvm_phase phase);
            `uvm_info(get_type_name(), "Starting scoreboard with WLAST monitoring and 15x15 fifo processing", UVM_LOW)
            
            fork
                // Process all master fifos
                for (int i = 0; i < 15; i++) begin
                    automatic int master_id = i;
                    fork
                        process_master_transactions(master_id);
                    join_none
                end
                
                // Process all slave fifos
                for (int i = 0; i < 15; i++) begin
                    automatic int slave_id = i;
                    fork
                        process_slave_transactions(slave_id);
                    join_none
                end
                
                wlast_validation_monitor();
            join_none
        endtask
        
        virtual task process_master_transactions(int master_idx);
            axi4_master_tx master_tx;
            forever begin
                master_fifo[master_idx].get(master_tx);
                
                if (master_tx.tx_type == axi4_master_tx::WRITE) begin
                    if (!wlast_count_per_master.exists(master_tx.awid)) begin
                        wlast_count_per_master[master_tx.awid] = 0;
                        write_transactions_per_master[master_tx.awid] = 0;
                    end
                    
                    write_transactions_per_master[master_tx.awid]++;
                    total_wlast_expected++;
                    
                    `uvm_info(get_type_name(), $sformatf("Master[%0d] ID=%0d WRITE transaction: expected WLAST count now %0d", 
                              master_idx, master_tx.awid, write_transactions_per_master[master_tx.awid]), UVM_MEDIUM)
                end
                
                `uvm_info(get_type_name(), $sformatf("Processed master[%0d] transaction: ID=%0d, TYPE=%s", 
                          master_idx, (master_tx.tx_type == axi4_master_tx::WRITE) ? master_tx.awid : master_tx.arid,
                          master_tx.tx_type.name()), UVM_HIGH)
            end
        endtask
        
        virtual task process_slave_transactions(int slave_idx);
            axi4_slave_tx slave_tx;
            forever begin
                slave_fifo[slave_idx].get(slave_tx);
                `uvm_info(get_type_name(), $sformatf("Processed slave[%0d] transaction", slave_idx), UVM_HIGH)
            end
        endtask
        
        virtual task wlast_validation_monitor();
            // Monitor interface for WLAST signals (if interface access is available)
            forever begin
                #1000; // Periodic validation
                `uvm_info(get_type_name(), $sformatf("WLAST Status - Expected: %0d, Observed: %0d", 
                          total_wlast_expected, total_wlast_observed), UVM_HIGH)
            end
        endtask
        
        function void report_phase(uvm_phase phase);
            super.report_phase(phase);
            
            `uvm_info(get_type_name(), "=== SCOREBOARD WLAST REPORT ===", UVM_LOW)
            `uvm_info(get_type_name(), $sformatf("Total Expected WLAST: %0d", total_wlast_expected), UVM_LOW)
            `uvm_info(get_type_name(), $sformatf("Total Observed WLAST: %0d", total_wlast_observed), UVM_LOW)
            
            foreach (wlast_count_per_master[master_id]) begin
                `uvm_info(get_type_name(), $sformatf("Master %0d - WLAST: %0d/%0d", 
                          master_id, wlast_count_per_master[master_id], write_transactions_per_master[master_id]), UVM_LOW)
            end
            
            if (total_wlast_expected != total_wlast_observed) begin
                `uvm_error(get_type_name(), $sformatf("WLAST VALIDATION FAILED! Expected: %0d, Observed: %0d", 
                          total_wlast_expected, total_wlast_observed))
            end else begin
                `uvm_info(get_type_name(), "âœ“ WLAST validation PASSED!", UVM_LOW)
            end
        endfunction : report_phase
    
    endclass : axi4_scoreboard
