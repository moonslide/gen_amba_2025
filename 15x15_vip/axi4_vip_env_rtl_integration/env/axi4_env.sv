//==============================================================================
// AXI4 Environment with Fixed Analysis Port Connectivity
// Properly connects master monitors to scoreboard analysis fifos
// Generated by AMBA Bus Matrix Configuration Tool - Analysis Port Fix
//==============================================================================

        import axi4_virtual_seqr_pkg::*;
    
class axi4_env extends uvm_env;
        `uvm_component_utils(axi4_env)
        
        // Master and slave agents
        axi4_master_agent master_agent[15];
        axi4_slave_agent slave_agent[15];
        
        // Scoreboard with analysis port connectivity
        axi4_scoreboard scoreboard;
        
        // Virtual sequencer for coordinated sequences
        axi4_virtual_sequencer v_seqr;
        
        // Environment configuration
        axi4_env_config env_cfg;
        
        function new(string name = "axi4_env", uvm_component parent = null);
            super.new(name, parent);
        endfunction
        
        function void build_phase(uvm_phase phase);
            super.build_phase(phase);
            
            // Get environment configuration
            if(!uvm_config_db#(axi4_env_config)::get(this, "", "env_cfg", env_cfg)) begin
                `uvm_warning(get_type_name(), "No environment config found, creating default")
                env_cfg = axi4_env_config::type_id::create("env_cfg");
            end
            
            // Set individual agent configurations
            for (int i = 0; i < 15; i++) begin
                uvm_config_db#(axi4_master_agent_config)::set(this, $sformatf("master_agent[%0d]*", i), "cfg", env_cfg.master_cfg[i]);
                uvm_config_db#(axi4_slave_agent_config)::set(this, $sformatf("slave_agent[%0d]*", i), "cfg", env_cfg.slave_cfg[i]);
            end
            
            // Set virtual interfaces from hvl_top (retrieved with specific names)
            for (int i = 0; i < 15; i++) begin
                virtual axi4_if master_vif, slave_vif;
                if(uvm_config_db#(virtual axi4_if)::get(this, "", $sformatf("master_if_%0d", i), master_vif)) begin
                    uvm_config_db#(virtual axi4_if)::set(this, $sformatf("master_agent[%0d]*", i), "vif", master_vif);
                end else begin
                    `uvm_warning(get_type_name(), $sformatf("Could not find master_if_%0d", i))
                end
                
                if(uvm_config_db#(virtual axi4_if)::get(this, "", $sformatf("slave_if_%0d", i), slave_vif)) begin
                    uvm_config_db#(virtual axi4_if)::set(this, $sformatf("slave_agent[%0d]*", i), "vif", slave_vif);
                end else begin
                    `uvm_warning(get_type_name(), $sformatf("Could not find slave_if_%0d", i))
                end
            end
            
            // Create scoreboard first
            scoreboard = axi4_scoreboard::type_id::create("scoreboard", this);
            
            // Create virtual sequencer
            v_seqr = axi4_virtual_sequencer::type_id::create("v_seqr", this);
            
            // Create master agents
            for (int i = 0; i < 15; i++) begin
                master_agent[i] = axi4_master_agent::type_id::create($sformatf("master_agent[%0d]", i), this);
            end
            
            // Create slave agents  
            for (int i = 0; i < 15; i++) begin
                slave_agent[i] = axi4_slave_agent::type_id::create($sformatf("slave_agent[%0d]", i), this);
            end
            
            `uvm_info(get_type_name(), "Environment built with 15x15 agents and connectivity", UVM_LOW)
        endfunction
        
        function void connect_phase(uvm_phase phase);
            super.connect_phase(phase);
            
            // CRITICAL FIX: Connect master monitor analysis ports to scoreboard fifos
            for (int i = 0; i < 15; i++) begin
                if (master_agent[i].monitor != null && scoreboard.master_fifo[i] != null) begin
                    master_agent[i].monitor.analysis_port.connect(scoreboard.master_fifo[i].analysis_export);
                    `uvm_info(get_type_name(), $sformatf("Connected master[%0d] monitor → scoreboard fifo[%0d]", i, i), UVM_MEDIUM)
                end else begin
                    `uvm_warning(get_type_name(), $sformatf("Failed to connect master[%0d] monitor analysis port", i))
                end
            end
            
            // Connect slave monitor analysis ports to scoreboard fifos  
            for (int i = 0; i < 15; i++) begin
                if (slave_agent[i].monitor != null && scoreboard.slave_fifo[i] != null) begin
                    slave_agent[i].monitor.analysis_port.connect(scoreboard.slave_fifo[i].analysis_export);
                    `uvm_info(get_type_name(), $sformatf("Connected slave[%0d] monitor → scoreboard fifo[%0d]", i, i), UVM_MEDIUM)
                end else begin
                    `uvm_warning(get_type_name(), $sformatf("Failed to connect slave[%0d] monitor analysis port", i))
                end
            end            
            // Connect virtual sequencer to master sequencers
            for (int i = 0; i < 15; i++) begin
                if (master_agent[i].sequencer != null) begin
                    v_seqr.master_seqr[i] = master_agent[i].sequencer;
                    `uvm_info(get_type_name(), $sformatf("Connected virtual sequencer to master[%0d]", i), UVM_MEDIUM)
                end
            end
            

            
            `uvm_info(get_type_name(), "✓ Analysis port connectivity established for all agents", UVM_LOW)
        endfunction
        
    endclass