//==============================================================================
// DUT Wrapper for 15x15 Real RTL Integration
// Connects AXI interfaces to real axi4_interconnect_m15s15 RTL module
// Generated by AMBA Bus Matrix Configuration Tool
// Date: 2025-08-09
//==============================================================================

module dut_wrapper #(
    parameter ADDR_WIDTH = 64,
    parameter DATA_WIDTH = 256,
    parameter ID_WIDTH   = 10,
    parameter NUM_MASTERS = 15,
    parameter NUM_SLAVES = 15
) (
    input  logic clk,
    input  logic rst_n,
    axi4_if.slave master_if[NUM_MASTERS],  // Master interfaces from VIP
    axi4_if.master slave_if[NUM_SLAVES]    // Slave interfaces to VIP slave BFMs
);

    // The real RTL uses ID_WIDTH=4 internally, we need to adapt
    localparam RTL_ID_WIDTH = 4;
    localparam SLAVE_ID_WIDTH = RTL_ID_WIDTH + $clog2(NUM_MASTERS);
    
    // Wire declarations for all master signals
    // Master 0
    wire [RTL_ID_WIDTH-1:0]     m0_awid;
    wire [ADDR_WIDTH-1:0]       m0_awaddr;
    wire [7:0]                  m0_awlen;
    wire [2:0]                  m0_awsize;
    wire [1:0]                  m0_awburst;
    wire                        m0_awlock;
    wire [3:0]                  m0_awcache;
    wire [2:0]                  m0_awprot;
    wire [3:0]                  m0_awqos;
    wire                        m0_awvalid;
    wire                        m0_awready;
    wire [DATA_WIDTH-1:0]       m0_wdata;
    wire [DATA_WIDTH/8-1:0]     m0_wstrb;
    wire                        m0_wlast;
    wire                        m0_wvalid;
    wire                        m0_wready;
    wire [RTL_ID_WIDTH-1:0]     m0_bid;
    wire [1:0]                  m0_bresp;
    wire                        m0_bvalid;
    wire                        m0_bready;
    wire [RTL_ID_WIDTH-1:0]     m0_arid;
    wire [ADDR_WIDTH-1:0]       m0_araddr;
    wire [7:0]                  m0_arlen;
    wire [2:0]                  m0_arsize;
    wire [1:0]                  m0_arburst;
    wire                        m0_arlock;
    wire [3:0]                  m0_arcache;
    wire [2:0]                  m0_arprot;
    wire [3:0]                  m0_arqos;
    wire                        m0_arvalid;
    wire                        m0_arready;
    wire [RTL_ID_WIDTH-1:0]     m0_rid;
    wire [DATA_WIDTH-1:0]       m0_rdata;
    wire [1:0]                  m0_rresp;
    wire                        m0_rlast;
    wire                        m0_rvalid;
    wire                        m0_rready;

    // Similar declarations for Masters 1-14 (abbreviated for space)
    `include "master_wire_declarations.svh"
    
    // Wire declarations for all slave signals
    // Slave 0
    wire [SLAVE_ID_WIDTH-1:0]   s0_awid;
    wire [ADDR_WIDTH-1:0]       s0_awaddr;
    wire [7:0]                  s0_awlen;
    wire [2:0]                  s0_awsize;
    wire [1:0]                  s0_awburst;
    wire                        s0_awlock;
    wire [3:0]                  s0_awcache;
    wire [2:0]                  s0_awprot;
    wire [3:0]                  s0_awqos;
    wire                        s0_awvalid;
    wire                        s0_awready;
    wire [DATA_WIDTH-1:0]       s0_wdata;
    wire [DATA_WIDTH/8-1:0]     s0_wstrb;
    wire                        s0_wlast;
    wire                        s0_wvalid;
    wire                        s0_wready;
    wire [SLAVE_ID_WIDTH-1:0]   s0_bid;
    wire [1:0]                  s0_bresp;
    wire                        s0_bvalid;
    wire                        s0_bready;
    wire [SLAVE_ID_WIDTH-1:0]   s0_arid;
    wire [ADDR_WIDTH-1:0]       s0_araddr;
    wire [7:0]                  s0_arlen;
    wire [2:0]                  s0_arsize;
    wire [1:0]                  s0_arburst;
    wire                        s0_arlock;
    wire [3:0]                  s0_arcache;
    wire [2:0]                  s0_arprot;
    wire [3:0]                  s0_arqos;
    wire                        s0_arvalid;
    wire                        s0_arready;
    wire [SLAVE_ID_WIDTH-1:0]   s0_rid;
    wire [DATA_WIDTH-1:0]       s0_rdata;
    wire [1:0]                  s0_rresp;
    wire                        s0_rlast;
    wire                        s0_rvalid;
    wire                        s0_rready;

    // Similar declarations for Slaves 1-14 (abbreviated for space)
    `include "slave_wire_declarations.svh"
    
    // Connect master interfaces to wires
    // Master 0
    assign m0_awid     = master_if[0].awid[RTL_ID_WIDTH-1:0];
    assign m0_awaddr   = master_if[0].awaddr;
    assign m0_awlen    = master_if[0].awlen;
    assign m0_awsize   = master_if[0].awsize;
    assign m0_awburst  = master_if[0].awburst;
    assign m0_awlock   = master_if[0].awlock;
    assign m0_awcache  = master_if[0].awcache;
    assign m0_awprot   = master_if[0].awprot;
    assign m0_awqos    = master_if[0].awqos;
    assign m0_awvalid  = master_if[0].awvalid;
    assign master_if[0].awready = m0_awready;
    
    assign m0_wdata    = master_if[0].wdata;
    assign m0_wstrb    = master_if[0].wstrb;
    assign m0_wlast    = master_if[0].wlast;
    assign m0_wvalid   = master_if[0].wvalid;
    assign master_if[0].wready = m0_wready;
    
    assign master_if[0].bid    = {{(ID_WIDTH-RTL_ID_WIDTH){1'b0}}, m0_bid};
    assign master_if[0].bresp  = m0_bresp;
    assign master_if[0].bvalid = m0_bvalid;
    assign m0_bready   = master_if[0].bready;
    
    assign m0_arid     = master_if[0].arid[RTL_ID_WIDTH-1:0];
    assign m0_araddr   = master_if[0].araddr;
    assign m0_arlen    = master_if[0].arlen;
    assign m0_arsize   = master_if[0].arsize;
    assign m0_arburst  = master_if[0].arburst;
    assign m0_arlock   = master_if[0].arlock;
    assign m0_arcache  = master_if[0].arcache;
    assign m0_arprot   = master_if[0].arprot;
    assign m0_arqos    = master_if[0].arqos;
    assign m0_arvalid  = master_if[0].arvalid;
    assign master_if[0].arready = m0_arready;
    
    assign master_if[0].rid    = {{(ID_WIDTH-RTL_ID_WIDTH){1'b0}}, m0_rid};
    assign master_if[0].rdata  = m0_rdata;
    assign master_if[0].rresp  = m0_rresp;
    assign master_if[0].rlast  = m0_rlast;
    assign master_if[0].rvalid = m0_rvalid;
    assign m0_rready   = master_if[0].rready;

    // Include connections for remaining masters
    `include "master_interface_connections.svh"
    
    // Connect slave wires to interfaces
    // Slave 0
    assign slave_if[0].awid    = s0_awid;
    assign slave_if[0].awaddr  = s0_awaddr;
    assign slave_if[0].awlen   = s0_awlen;
    assign slave_if[0].awsize  = s0_awsize;
    assign slave_if[0].awburst = s0_awburst;
    assign slave_if[0].awlock  = s0_awlock;
    assign slave_if[0].awcache = s0_awcache;
    assign slave_if[0].awprot  = s0_awprot;
    assign slave_if[0].awqos   = s0_awqos;
    assign slave_if[0].awvalid = s0_awvalid;
    assign s0_awready  = slave_if[0].awready;
    
    assign slave_if[0].wdata   = s0_wdata;
    assign slave_if[0].wstrb   = s0_wstrb;
    assign slave_if[0].wlast   = s0_wlast;
    assign slave_if[0].wvalid  = s0_wvalid;
    assign s0_wready   = slave_if[0].wready;
    
    assign s0_bid      = slave_if[0].bid;
    assign s0_bresp    = slave_if[0].bresp;
    assign s0_bvalid   = slave_if[0].bvalid;
    assign slave_if[0].bready  = s0_bready;
    
    assign slave_if[0].arid    = s0_arid;
    assign slave_if[0].araddr  = s0_araddr;
    assign slave_if[0].arlen   = s0_arlen;
    assign slave_if[0].arsize  = s0_arsize;
    assign slave_if[0].arburst = s0_arburst;
    assign slave_if[0].arlock  = s0_arlock;
    assign slave_if[0].arcache = s0_arcache;
    assign slave_if[0].arprot  = s0_arprot;
    assign slave_if[0].arqos   = s0_arqos;
    assign slave_if[0].arvalid = s0_arvalid;
    assign s0_arready  = slave_if[0].arready;
    
    assign s0_rid      = slave_if[0].rid;
    assign s0_rdata    = slave_if[0].rdata;
    assign s0_rresp    = slave_if[0].rresp;
    assign s0_rlast    = slave_if[0].rlast;
    assign s0_rvalid   = slave_if[0].rvalid;
    assign slave_if[0].rready  = s0_rready;

    // Include connections for remaining slaves
    `include "slave_interface_connections.svh"
    
    // Instantiate the real RTL interconnect
    axi4_interconnect_m15s15 #(
        .DATA_WIDTH(DATA_WIDTH),
        .ADDR_WIDTH(ADDR_WIDTH),
        .ID_WIDTH(RTL_ID_WIDTH),
        .USER_WIDTH(1)
    ) real_interconnect (
        .aclk(clk),
        .aresetn(rst_n),
        
        // Master 0 connections
        .m0_awid(m0_awid),
        .m0_awaddr(m0_awaddr),
        .m0_awlen(m0_awlen),
        .m0_awsize(m0_awsize),
        .m0_awburst(m0_awburst),
        .m0_awlock(m0_awlock),
        .m0_awcache(m0_awcache),
        .m0_awprot(m0_awprot),
        .m0_awqos(m0_awqos),
        .m0_awvalid(m0_awvalid),
        .m0_awready(m0_awready),
        .m0_wdata(m0_wdata),
        .m0_wstrb(m0_wstrb),
        .m0_wlast(m0_wlast),
        .m0_wvalid(m0_wvalid),
        .m0_wready(m0_wready),
        .m0_bid(m0_bid),
        .m0_bresp(m0_bresp),
        .m0_bvalid(m0_bvalid),
        .m0_bready(m0_bready),
        .m0_arid(m0_arid),
        .m0_araddr(m0_araddr),
        .m0_arlen(m0_arlen),
        .m0_arsize(m0_arsize),
        .m0_arburst(m0_arburst),
        .m0_arlock(m0_arlock),
        .m0_arcache(m0_arcache),
        .m0_arprot(m0_arprot),
        .m0_arqos(m0_arqos),
        .m0_arvalid(m0_arvalid),
        .m0_arready(m0_arready),
        .m0_rid(m0_rid),
        .m0_rdata(m0_rdata),
        .m0_rresp(m0_rresp),
        .m0_rlast(m0_rlast),
        .m0_rvalid(m0_rvalid),
        .m0_rready(m0_rready),
        
        // Include remaining master/slave connections
        `include "interconnect_port_map.svh"
    );
    
    initial begin
        $display("[%0t] DUT Wrapper: Connected to REAL axi4_interconnect_m15s15 RTL", $time);
        $display("[%0t] DUT Wrapper: %0d Masters x %0d Slaves", NUM_MASTERS, NUM_SLAVES, $time);
        $display("[%0t] DUT Wrapper: Interface ID_WIDTH=%0d, RTL ID_WIDTH=%0d", ID_WIDTH, RTL_ID_WIDTH, $time);
    end

endmodule : dut_wrapper