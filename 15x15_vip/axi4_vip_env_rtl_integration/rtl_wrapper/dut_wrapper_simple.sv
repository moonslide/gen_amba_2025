//==============================================================================
// DUT Wrapper for 15x15 RTL Integration with Simple Interconnect
// Provides basic 1:1 routing for testing
// Generated by AMBA Bus Matrix Configuration Tool
// Date: 2025-08-09
//==============================================================================

module dut_wrapper #(
    parameter ADDR_WIDTH = 64,
    parameter DATA_WIDTH = 256,
    parameter ID_WIDTH   = 10,
    parameter NUM_MASTERS = 15,
    parameter NUM_SLAVES = 15
) (
    input  logic clk,
    input  logic rst_n,
    axi4_if.slave master_if[NUM_MASTERS],  // Master interfaces from VIP
    axi4_if.master slave_if[NUM_SLAVES]    // Slave interfaces to VIP slave BFMs
);

    // Simple 1:1 routing for testing
    // Master 0 -> Slave 0, Master 1 -> Slave 1, etc.
    
    genvar i;
    generate
        for (i = 0; i < NUM_MASTERS && i < NUM_SLAVES; i++) begin : gen_routing
            // Write Address Channel
            assign slave_if[i].awid     = master_if[i].awid;
            assign slave_if[i].awaddr   = master_if[i].awaddr;
            assign slave_if[i].awlen    = master_if[i].awlen;
            assign slave_if[i].awsize   = master_if[i].awsize;
            assign slave_if[i].awburst  = master_if[i].awburst;
            assign slave_if[i].awlock   = master_if[i].awlock;
            assign slave_if[i].awcache  = master_if[i].awcache;
            assign slave_if[i].awprot   = master_if[i].awprot;
            assign slave_if[i].awqos    = master_if[i].awqos;
            assign slave_if[i].awregion = master_if[i].awregion;
            assign slave_if[i].awvalid  = master_if[i].awvalid;
            assign master_if[i].awready = slave_if[i].awready;
            
            // Write Data Channel
            assign slave_if[i].wdata  = master_if[i].wdata;
            assign slave_if[i].wstrb  = master_if[i].wstrb;
            assign slave_if[i].wlast  = master_if[i].wlast;
            assign slave_if[i].wvalid = master_if[i].wvalid;
            assign master_if[i].wready = slave_if[i].wready;
            
            // Write Response Channel
            assign master_if[i].bid    = slave_if[i].bid;
            assign master_if[i].bresp  = slave_if[i].bresp;
            assign master_if[i].bvalid = slave_if[i].bvalid;
            assign slave_if[i].bready  = master_if[i].bready;
            
            // Read Address Channel
            assign slave_if[i].arid     = master_if[i].arid;
            assign slave_if[i].araddr   = master_if[i].araddr;
            assign slave_if[i].arlen    = master_if[i].arlen;
            assign slave_if[i].arsize   = master_if[i].arsize;
            assign slave_if[i].arburst  = master_if[i].arburst;
            assign slave_if[i].arlock   = master_if[i].arlock;
            assign slave_if[i].arcache  = master_if[i].arcache;
            assign slave_if[i].arprot   = master_if[i].arprot;
            assign slave_if[i].arqos    = master_if[i].arqos;
            assign slave_if[i].arregion = master_if[i].arregion;
            assign slave_if[i].arvalid  = master_if[i].arvalid;
            assign master_if[i].arready = slave_if[i].arready;
            
            // Read Data Channel
            assign master_if[i].rid    = slave_if[i].rid;
            assign master_if[i].rdata  = slave_if[i].rdata;
            assign master_if[i].rresp  = slave_if[i].rresp;
            assign master_if[i].rlast  = slave_if[i].rlast;
            assign master_if[i].rvalid = slave_if[i].rvalid;
            assign slave_if[i].rready  = master_if[i].rready;
        end
        
        // Handle any extra masters or slaves (tie off)
        for (i = NUM_SLAVES; i < NUM_MASTERS; i++) begin : gen_extra_masters
            // Tie off extra masters with default responses
            assign master_if[i].awready = 1'b0;
            assign master_if[i].wready  = 1'b0;
            assign master_if[i].bid     = '0;
            assign master_if[i].bresp   = 2'b11; // DECERR
            assign master_if[i].bvalid  = 1'b0;
            assign master_if[i].arready = 1'b0;
            assign master_if[i].rid     = '0;
            assign master_if[i].rdata   = '0;
            assign master_if[i].rresp   = 2'b11; // DECERR
            assign master_if[i].rlast   = 1'b0;
            assign master_if[i].rvalid  = 1'b0;
        end
        
        for (i = NUM_MASTERS; i < NUM_SLAVES; i++) begin : gen_extra_slaves
            // Tie off extra slaves
            assign slave_if[i].awid     = '0;
            assign slave_if[i].awaddr   = '0;
            assign slave_if[i].awlen    = '0;
            assign slave_if[i].awsize   = '0;
            assign slave_if[i].awburst  = '0;
            assign slave_if[i].awlock   = '0;
            assign slave_if[i].awcache  = '0;
            assign slave_if[i].awprot   = '0;
            assign slave_if[i].awqos    = '0;
            assign slave_if[i].awregion = '0;
            assign slave_if[i].awvalid  = 1'b0;
            
            assign slave_if[i].wdata  = '0;
            assign slave_if[i].wstrb  = '0;
            assign slave_if[i].wlast  = 1'b0;
            assign slave_if[i].wvalid = 1'b0;
            
            assign slave_if[i].bready = 1'b1;
            
            assign slave_if[i].arid     = '0;
            assign slave_if[i].araddr   = '0;
            assign slave_if[i].arlen    = '0;
            assign slave_if[i].arsize   = '0;
            assign slave_if[i].arburst  = '0;
            assign slave_if[i].arlock   = '0;
            assign slave_if[i].arcache  = '0;
            assign slave_if[i].arprot   = '0;
            assign slave_if[i].arqos    = '0;
            assign slave_if[i].arregion = '0;
            assign slave_if[i].arvalid  = 1'b0;
            
            assign slave_if[i].rready = 1'b1;
        end
    endgenerate
    
    initial begin
        $display("[%0t] DUT Wrapper: 15x15 Configuration with Simple 1:1 Routing", $time);
        $display("[%0t] DUT Wrapper: Master 0 -> Slave 0, Master 1 -> Slave 1, etc.", $time);
        $display("[%0t] DUT Wrapper: Basic connectivity for testing", $time);
    end

endmodule : dut_wrapper