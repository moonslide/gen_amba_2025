//==============================================================================
// AXI4 Master Simple Crossbar Sequence
// Generated by AMBA Bus Matrix Configuration Tool
// Tests connectivity from one master to 3 slaves for reduced complexity
// Date: 2025-08-11 14:17:57
//==============================================================================

class axi4_master_simple_crossbar_seq extends axi4_master_base_seq;
    `uvm_object_utils(axi4_master_simple_crossbar_seq)
    
    int master_id = 0;
    
    function new(string name = "axi4_master_simple_crossbar_seq");
        super.new(name);
    endfunction
    
    virtual task body();
        axi4_master_tx write_xtn;
        axi4_master_tx read_xtn;
        
        `uvm_info(get_type_name(), $sformatf("Master %0d: Starting simple crossbar test to 3 slaves", master_id), UVM_LOW)
        
        // Test connectivity to first 3 slaves only
        for (int slave = 0; slave < 3; slave++) begin
            bit [63:0] slave_base_addr;
            bit [255:0] data_pattern;
            
            // Calculate slave base address
            slave_base_addr = slave * 64'h10000000;
            data_pattern = {master_id[7:0], slave[7:0], 240'hABCD_1234};
            
            // Alternate write and read
            if (slave % 2 == 0) begin
                // WRITE TRANSACTION
                `uvm_info(get_type_name(), $sformatf("Master %0d: Writing to Slave %0d at addr 0x%0h", 
                          master_id, slave, slave_base_addr), UVM_LOW)
                
                write_xtn = axi4_master_tx::type_id::create("write_xtn");
                
                if (!write_xtn.randomize() with {
                    tx_type == WRITE;
                    awaddr == slave_base_addr + (master_id * 'h100);
                    awlen == 0;           // Single beat
                    awsize == 3'b011;     // 8 bytes
                    awburst == 2'b01;     // INCR
                    awid == master_id[3:0];
                    wdata.size() == 1;
                    wdata[0] == data_pattern;
                }) begin
                    `uvm_error(get_type_name(), "Write transaction randomization failed")
                end
                
                start_item(write_xtn);
                finish_item(write_xtn);
                
            end else begin
                // READ TRANSACTION
                `uvm_info(get_type_name(), $sformatf("Master %0d: Reading from Slave %0d at addr 0x%0h", 
                          master_id, slave, slave_base_addr), UVM_LOW)
                
                read_xtn = axi4_master_tx::type_id::create("read_xtn");
                
                if (!read_xtn.randomize() with {
                    tx_type == READ;
                    araddr == slave_base_addr + (master_id * 'h100);
                    arlen == 0;           // Single beat
                    arsize == 3'b011;     // 8 bytes
                    arburst == 2'b01;     // INCR
                    arid == master_id[3:0];
                }) begin
                    `uvm_error(get_type_name(), "Read transaction randomization failed")
                end
                
                start_item(read_xtn);
                finish_item(read_xtn);
            end
            
            // Delay between transactions
            #200;
        end
        
        `uvm_info(get_type_name(), $sformatf("Master %0d: Completed simple crossbar transactions", master_id), UVM_LOW)
    endtask
    
endclass
