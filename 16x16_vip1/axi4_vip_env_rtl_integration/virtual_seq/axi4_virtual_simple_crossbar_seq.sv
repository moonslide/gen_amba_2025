//==============================================================================
// AXI4 Virtual Simple Crossbar Sequence
// Generated by AMBA Bus Matrix Configuration Tool
// Coordinates simple crossbar test across first 3 masters
// Date: 2025-08-11 14:17:57
//==============================================================================

class axi4_virtual_simple_crossbar_seq extends axi4_virtual_base_seq;
    `uvm_object_utils(axi4_virtual_simple_crossbar_seq)
    
    bit seq_done = 0;  // Completion flag
    `uvm_object_utils(axi4_virtual_simple_crossbar_seq)
    
    bit seq_done = 0;  // Completion flag
    
    function new(string name = "axi4_virtual_simple_crossbar_seq");
        super.new(name);
    endfunction
    
    virtual task body();
        axi4_master_simple_crossbar_seq master_seq[3]; // Only use first 3 masters
        
        `uvm_info(get_type_name(), "Starting Simple Crossbar Virtual Sequence", UVM_LOW)
        `uvm_info(get_type_name(), "Testing first 3 masters accessing first 3 slaves", UVM_LOW)
        
        // Start sequences on first 3 masters only
        fork
            begin
                for (int m = 0; m < 3; m++) begin
                    automatic int master_id = m;
                    fork
                        begin
                            `uvm_info(get_type_name(), $sformatf("Starting sequence on Master %0d", master_id), UVM_LOW)
                            master_seq[master_id] = axi4_master_simple_crossbar_seq::type_id::create($sformatf("master_seq_%0d", master_id));
                            master_seq[master_id].master_id = master_id;
                            master_seq[master_id].start(p_sequencer.master_seqr[master_id]);
                            `uvm_info(get_type_name(), $sformatf("Master %0d sequence completed", master_id), UVM_LOW)
                        end
                    join_none
                end
                
                // Wait for all masters to complete
                wait fork;
            end
        join
        
        `uvm_info(get_type_name(), "All master sequences completed", UVM_LOW)
        
        // Small delay to ensure all responses are processed
        #1000;
        
        `uvm_info(get_type_name(), "Simple Crossbar Virtual Sequence Completed", UVM_LOW)
        seq_done = 1;  // Signal completion
    endtask
    
endclass
