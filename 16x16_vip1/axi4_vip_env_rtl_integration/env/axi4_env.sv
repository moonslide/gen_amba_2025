//==============================================================================
// AXI4 Environment
// Generated by AMBA Bus Matrix Configuration Tool
// Date: 2025-08-11 14:17:57
//==============================================================================

class axi4_env extends uvm_env;
    
    `uvm_component_utils(axi4_env)
    
    // Environment configuration
    axi4_env_config env_cfg;
    
    // Master agents
    axi4_master_agent master_agent[16];
    
    // Slave agents
    axi4_slave_agent slave_agent[16];
    
    // Virtual sequencer
    axi4_virtual_sequencer v_seqr;
    
    // Scoreboard
    axi4_scoreboard scoreboard;
    
    // Coverage
    axi4_protocol_coverage coverage;
    
    // Constructor
    function new(string name = "axi4_env", uvm_component parent = null);
        super.new(name, parent);
    endfunction
    
    // Build phase
    function void build_phase(uvm_phase phase);
        super.build_phase(phase);
        // Configuration for large matrices
        bit disable_unused_masters = 0;
        int active_master_count = NO_OF_MASTERS;
        
        // For very large configurations, limit active masters
        if (NO_OF_MASTERS > 8 && disable_unused_masters) begin
            active_master_count = 8;
            `uvm_info(get_type_name(), $sformatf("Large config detected: limiting to %0d active masters", active_master_count), UVM_LOW)
        end

        
        // Get configuration
        if(!uvm_config_db#(axi4_env_config)::get(this, "", "env_cfg", env_cfg))
            `uvm_fatal("CONFIG", "Cannot get env_cfg from uvm_config_db")
        
        // Set configurations before creating agents
        foreach(env_cfg.master_cfg[i]) begin
            uvm_config_db#(axi4_master_agent_config)::set(this, $sformatf("master_agent[%0d]*", i), "cfg", env_cfg.master_cfg[i]);
        end
        
        foreach(env_cfg.slave_cfg[i]) begin
            uvm_config_db#(axi4_slave_agent_config)::set(this, $sformatf("slave_agent[%0d]*", i), "cfg", env_cfg.slave_cfg[i]);
        end
        
        // Create agents and pass interfaces
        foreach(master_agent[i]) begin
            master_agent[i] = axi4_master_agent::type_id::create($sformatf("master_agent[%0d]", i), this);
            
            // Get and pass virtual interface to agent
            begin
                virtual axi4_if vif;
                if(uvm_config_db#(virtual axi4_if)::get(this, "", $sformatf("master_if_%0d", i), vif)) begin
                    uvm_config_db#(virtual axi4_if)::set(this, $sformatf("master_agent[%0d]*", i), "vif", vif);
                    `uvm_info(get_type_name(), $sformatf("Passed master_if_%0d to master_agent[%0d]", i, i), UVM_HIGH)
                end else begin
                    `uvm_warning(get_type_name(), $sformatf("master_if_%0d not found in config_db", i))
                end
            end
        end
        
        foreach(slave_agent[i]) begin
            slave_agent[i] = axi4_slave_agent::type_id::create($sformatf("slave_agent[%0d]", i), this);
            
            // Get and pass virtual interface to agent
            begin
                virtual axi4_if vif;
                if(uvm_config_db#(virtual axi4_if)::get(this, "", $sformatf("slave_if_%0d", i), vif)) begin
                    uvm_config_db#(virtual axi4_if)::set(this, $sformatf("slave_agent[%0d]*", i), "vif", vif);
                    `uvm_info(get_type_name(), $sformatf("Passed slave_if_%0d to slave_agent[%0d]", i, i), UVM_HIGH)
                end else begin
                    `uvm_warning(get_type_name(), $sformatf("slave_if_%0d not found in config_db", i))
                end
            end
        end
        
        // Create virtual sequencer
        v_seqr = axi4_virtual_sequencer::type_id::create("v_seqr", this);
        
        // Create scoreboard if enabled
        if(env_cfg.has_scoreboard) begin
            scoreboard = axi4_scoreboard::type_id::create("scoreboard", this);
        end
        
        // Create coverage if enabled
        if(env_cfg.has_coverage) begin
            coverage = axi4_protocol_coverage::type_id::create("coverage", this);
        end
    endfunction
    
    // Connect phase
    function void connect_phase(uvm_phase phase);
        super.connect_phase(phase);
        
        // Pass env_cfg to virtual sequencer
        v_seqr.env_cfg = env_cfg;
        
        // Connect sequencers to virtual sequencer
        foreach(master_agent[i]) begin
            v_seqr.master_seqr[i] = master_agent[i].sequencer;
        end
        
        foreach(slave_agent[i]) begin
            v_seqr.slave_seqr[i] = slave_agent[i].sequencer;
        end
        
        // Connect monitors to scoreboard
        if(env_cfg.has_scoreboard) begin
            foreach(master_agent[i]) begin
                master_agent[i].monitor.item_collected_port.connect(scoreboard.master_fifo[i].analysis_export);
            end
            
            foreach(slave_agent[i]) begin
                slave_agent[i].monitor.item_collected_port.connect(scoreboard.slave_fifo[i].analysis_export);
            end
        end
    endfunction
    
endclass : axi4_env
