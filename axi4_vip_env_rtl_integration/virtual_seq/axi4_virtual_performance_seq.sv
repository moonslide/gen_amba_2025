//==============================================================================
// AXI4 Virtual Performance Sequence
// Generated by AMBA Bus Matrix Configuration Tool
// Date: 2025-08-06 17:04:05
//==============================================================================

class axi4_virtual_performance_seq extends axi4_virtual_base_seq;
    
    `uvm_object_utils(axi4_virtual_performance_seq)
    
    // Parameters
    int num_iterations = 100;
    bit measure_latency = 0;
    real total_latency = 0;
    int latency_count = 0;
    
    // Constructor
    function new(string name = "axi4_virtual_performance_seq");
        super.new(name);
    endfunction
    
    // Body method
    virtual task body();
        axi4_master_write_seq write_seq;
        axi4_master_read_seq read_seq;
        real start_time, end_time;
        
        `uvm_info(get_type_name(), "Starting virtual performance sequence", UVM_MEDIUM)
        
        repeat(num_iterations) begin
            if (measure_latency) start_time = $realtime;
            
            // Write
            write_seq = axi4_master_write_seq::type_id::create("write_seq");
            write_seq.start(p_sequencer.master_seqr[0]);
            
            // Read
            read_seq = axi4_master_read_seq::type_id::create("read_seq");
            read_seq.start(p_sequencer.master_seqr[0]);
            
            if (measure_latency) begin
                end_time = $realtime;
                total_latency += (end_time - start_time);
                latency_count++;
            end
        end
        
        if (measure_latency && latency_count > 0) begin
            `uvm_info(get_type_name(), $sformatf("Average latency: %0.2f ns", total_latency/latency_count/1ns), UVM_LOW)
        end
    endtask : body
    
endclass : axi4_virtual_performance_seq
