//==============================================================================
// AXI4 Interconnect - 2 Masters x 3 Slaves
// Generated by AMBA Bus Matrix Configuration Tool
// Date: 2025-07-28 16:20:00
// Compliant with AMBA AXI4 Protocol Specification (IHI0022D)
//==============================================================================

module axi4_interconnect_m2s3 #(
    parameter DATA_WIDTH = 64,
    parameter ADDR_WIDTH = 32,
    parameter ID_WIDTH   = 4,
    parameter USER_WIDTH = 1
)(
    input wire                          aclk,
    input wire                          aresetn,
    
    // Master 0 - CPU
    // Write Address Channel
    input  wire [3:0]     m0_awid,
    input  wire [ADDR_WIDTH-1:0]   m0_awaddr,
    input  wire [7:0]              m0_awlen,
    input  wire [2:0]              m0_awsize,
    input  wire [1:0]              m0_awburst,
    input  wire                    m0_awlock,
    input  wire [3:0]              m0_awcache,
    input  wire [2:0]              m0_awprot,
    input  wire [3:0]              m0_awqos,
    input  wire                    m0_awvalid,
    output wire                    m0_awready,
    
    // Write Data Channel
    input  wire [DATA_WIDTH-1:0]   m0_wdata,
    input  wire [DATA_WIDTH/8-1:0] m0_wstrb,
    input  wire                    m0_wlast,
    input  wire                    m0_wvalid,
    output wire                    m0_wready,
    
    // Write Response Channel
    output wire [3:0]     m0_bid,
    output wire [1:0]              m0_bresp,
    output wire                    m0_bvalid,
    input  wire                    m0_bready,
    
    // Read Address Channel
    input  wire [3:0]     m0_arid,
    input  wire [ADDR_WIDTH-1:0]   m0_araddr,
    input  wire [7:0]              m0_arlen,
    input  wire [2:0]              m0_arsize,
    input  wire [1:0]              m0_arburst,
    input  wire                    m0_arlock,
    input  wire [3:0]              m0_arcache,
    input  wire [2:0]              m0_arprot,
    input  wire [3:0]              m0_arqos,
    input  wire                    m0_arvalid,
    output wire                    m0_arready,
    
    // Read Data Channel
    output wire [3:0]     m0_rid,
    output wire [DATA_WIDTH-1:0]   m0_rdata,
    output wire [1:0]              m0_rresp,
    output wire                    m0_rlast,
    output wire                    m0_rvalid,
    input  wire                    m0_rready,

    // Master 1 - DMA
    // Write Address Channel
    input  wire [3:0]     m1_awid,
    input  wire [ADDR_WIDTH-1:0]   m1_awaddr,
    input  wire [7:0]              m1_awlen,
    input  wire [2:0]              m1_awsize,
    input  wire [1:0]              m1_awburst,
    input  wire                    m1_awlock,
    input  wire [3:0]              m1_awcache,
    input  wire [2:0]              m1_awprot,
    input  wire [3:0]              m1_awqos,
    input  wire                    m1_awvalid,
    output wire                    m1_awready,
    
    // Write Data Channel
    input  wire [DATA_WIDTH-1:0]   m1_wdata,
    input  wire [DATA_WIDTH/8-1:0] m1_wstrb,
    input  wire                    m1_wlast,
    input  wire                    m1_wvalid,
    output wire                    m1_wready,
    
    // Write Response Channel
    output wire [3:0]     m1_bid,
    output wire [1:0]              m1_bresp,
    output wire                    m1_bvalid,
    input  wire                    m1_bready,
    
    // Read Address Channel
    input  wire [3:0]     m1_arid,
    input  wire [ADDR_WIDTH-1:0]   m1_araddr,
    input  wire [7:0]              m1_arlen,
    input  wire [2:0]              m1_arsize,
    input  wire [1:0]              m1_arburst,
    input  wire                    m1_arlock,
    input  wire [3:0]              m1_arcache,
    input  wire [2:0]              m1_arprot,
    input  wire [3:0]              m1_arqos,
    input  wire                    m1_arvalid,
    output wire                    m1_arready,
    
    // Read Data Channel
    output wire [3:0]     m1_rid,
    output wire [DATA_WIDTH-1:0]   m1_rdata,
    output wire [1:0]              m1_rresp,
    output wire                    m1_rlast,
    output wire                    m1_rvalid,
    input  wire                    m1_rready,

    // Slave 0 - DDR
    // Write Address Channel
    output wire [3:0]     s0_awid,
    output wire [ADDR_WIDTH-1:0]   s0_awaddr,
    output wire [7:0]              s0_awlen,
    output wire [2:0]              s0_awsize,
    output wire [1:0]              s0_awburst,
    output wire                    s0_awlock,
    output wire [3:0]              s0_awcache,
    output wire [2:0]              s0_awprot,
    output wire [3:0]              s0_awqos,
    output wire                    s0_awvalid,
    input  wire                    s0_awready,
    
    // Write Data Channel
    output wire [DATA_WIDTH-1:0]   s0_wdata,
    output wire [DATA_WIDTH/8-1:0] s0_wstrb,
    output wire                    s0_wlast,
    output wire                    s0_wvalid,
    input  wire                    s0_wready,
    
    // Write Response Channel
    input  wire [3:0]     s0_bid,
    input  wire [1:0]              s0_bresp,
    input  wire                    s0_bvalid,
    output wire                    s0_bready,
    
    // Read Address Channel
    output wire [3:0]     s0_arid,
    output wire [ADDR_WIDTH-1:0]   s0_araddr,
    output wire [7:0]              s0_arlen,
    output wire [2:0]              s0_arsize,
    output wire [1:0]              s0_arburst,
    output wire                    s0_arlock,
    output wire [3:0]              s0_arcache,
    output wire [2:0]              s0_arprot,
    output wire [3:0]              s0_arqos,
    output wire                    s0_arvalid,
    input  wire                    s0_arready,
    
    // Read Data Channel
    input  wire [3:0]     s0_rid,
    input  wire [DATA_WIDTH-1:0]   s0_rdata,
    input  wire [1:0]              s0_rresp,
    input  wire                    s0_rlast,
    input  wire                    s0_rvalid,
    output wire                    s0_rready,

    // Slave 1 - SRAM
    // Write Address Channel
    output wire [3:0]     s1_awid,
    output wire [ADDR_WIDTH-1:0]   s1_awaddr,
    output wire [7:0]              s1_awlen,
    output wire [2:0]              s1_awsize,
    output wire [1:0]              s1_awburst,
    output wire                    s1_awlock,
    output wire [3:0]              s1_awcache,
    output wire [2:0]              s1_awprot,
    output wire [3:0]              s1_awqos,
    output wire                    s1_awvalid,
    input  wire                    s1_awready,
    
    // Write Data Channel
    output wire [DATA_WIDTH-1:0]   s1_wdata,
    output wire [DATA_WIDTH/8-1:0] s1_wstrb,
    output wire                    s1_wlast,
    output wire                    s1_wvalid,
    input  wire                    s1_wready,
    
    // Write Response Channel
    input  wire [3:0]     s1_bid,
    input  wire [1:0]              s1_bresp,
    input  wire                    s1_bvalid,
    output wire                    s1_bready,
    
    // Read Address Channel
    output wire [3:0]     s1_arid,
    output wire [ADDR_WIDTH-1:0]   s1_araddr,
    output wire [7:0]              s1_arlen,
    output wire [2:0]              s1_arsize,
    output wire [1:0]              s1_arburst,
    output wire                    s1_arlock,
    output wire [3:0]              s1_arcache,
    output wire [2:0]              s1_arprot,
    output wire [3:0]              s1_arqos,
    output wire                    s1_arvalid,
    input  wire                    s1_arready,
    
    // Read Data Channel
    input  wire [3:0]     s1_rid,
    input  wire [DATA_WIDTH-1:0]   s1_rdata,
    input  wire [1:0]              s1_rresp,
    input  wire                    s1_rlast,
    input  wire                    s1_rvalid,
    output wire                    s1_rready,

    // Slave 2 - Peripherals
    // Write Address Channel
    output wire [3:0]     s2_awid,
    output wire [ADDR_WIDTH-1:0]   s2_awaddr,
    output wire [7:0]              s2_awlen,
    output wire [2:0]              s2_awsize,
    output wire [1:0]              s2_awburst,
    output wire                    s2_awlock,
    output wire [3:0]              s2_awcache,
    output wire [2:0]              s2_awprot,
    output wire [3:0]              s2_awqos,
    output wire                    s2_awvalid,
    input  wire                    s2_awready,
    
    // Write Data Channel
    output wire [DATA_WIDTH-1:0]   s2_wdata,
    output wire [DATA_WIDTH/8-1:0] s2_wstrb,
    output wire                    s2_wlast,
    output wire                    s2_wvalid,
    input  wire                    s2_wready,
    
    // Write Response Channel
    input  wire [3:0]     s2_bid,
    input  wire [1:0]              s2_bresp,
    input  wire                    s2_bvalid,
    output wire                    s2_bready,
    
    // Read Address Channel
    output wire [3:0]     s2_arid,
    output wire [ADDR_WIDTH-1:0]   s2_araddr,
    output wire [7:0]              s2_arlen,
    output wire [2:0]              s2_arsize,
    output wire [1:0]              s2_arburst,
    output wire                    s2_arlock,
    output wire [3:0]              s2_arcache,
    output wire [2:0]              s2_arprot,
    output wire [3:0]              s2_arqos,
    output wire                    s2_arvalid,
    input  wire                    s2_arready,
    
    // Read Data Channel
    input  wire [3:0]     s2_rid,
    input  wire [DATA_WIDTH-1:0]   s2_rdata,
    input  wire [1:0]              s2_rresp,
    input  wire                    s2_rlast,
    input  wire                    s2_rvalid,
    output wire                    s2_rready
);

//------------------------------------------------------------------------------
// Internal Signals
//------------------------------------------------------------------------------

wire [2:0] m0_slave_select;
wire [2:0] m1_slave_select;

wire [1:0] s0_master_grant;
wire [$clog2(2)-1:0] s0_grant_master;
wire s0_grant_valid;
wire [3:0] s0_granted_qos;
wire [ID_WIDTH-1:0] s0_granted_id;
wire [1:0] s1_master_grant;
wire [$clog2(2)-1:0] s1_grant_master;
wire s1_grant_valid;
wire [3:0] s1_granted_qos;
wire [ID_WIDTH-1:0] s1_granted_id;
wire [1:0] s2_master_grant;
wire [$clog2(2)-1:0] s2_grant_master;
wire s2_grant_valid;
wire [3:0] s2_granted_qos;
wire [ID_WIDTH-1:0] s2_granted_id;

//------------------------------------------------------------------------------
// Address Decoder Instances
//------------------------------------------------------------------------------

axi4_address_decoder #(
    .ADDR_WIDTH(ADDR_WIDTH),
    .NUM_SLAVES(3)
) u_addr_decoder_m0 (
    .awaddr(m0_awaddr),
    .awvalid(m0_awvalid),
    .awprot(m0_awprot),
    .araddr(m0_araddr),
    .arvalid(m0_arvalid),
    .arprot(m0_arprot),
    .master_id(1'd0),
    .slave_select(m0_slave_select),
    .access_error(m0_access_error)
);

axi4_address_decoder #(
    .ADDR_WIDTH(ADDR_WIDTH),
    .NUM_SLAVES(3)
) u_addr_decoder_m1 (
    .awaddr(m1_awaddr),
    .awvalid(m1_awvalid),
    .awprot(m1_awprot),
    .araddr(m1_araddr),
    .arvalid(m1_arvalid),
    .arprot(m1_arprot),
    .master_id(1'd1),
    .slave_select(m1_slave_select),
    .access_error(m1_access_error)
);

//------------------------------------------------------------------------------
// Arbiter Instances
//------------------------------------------------------------------------------

axi4_arbiter #(
    .NUM_MASTERS(2),
    .ARBITRATION("QOS"),
    .QOS_ENABLE(1),
    .ADDR_WIDTH(ADDR_WIDTH),
    .ID_WIDTH(ID_WIDTH)
) u_arbiter_s0 (
    .aclk(aclk),
    .aresetn(aresetn),
    
    // Scalable vectorized interface per AXI4 spec
    .master_request({m1_slave_select[0], m0_slave_select[0]}),
    .master_valid({(m1_awvalid || m1_arvalid), (m0_awvalid || m0_arvalid)}),
    .master_qos({m1_awqos, m0_awqos}),
    .master_id({m1_awid, m0_awid}),
    
    // Arbitration results
    .grant(s0_master_grant),
    .grant_master(s0_grant_master),
    .grant_valid(s0_grant_valid),
    .granted_qos(s0_granted_qos),
    .granted_id(s0_granted_id)
);

axi4_arbiter #(
    .NUM_MASTERS(2),
    .ARBITRATION("QOS"),
    .QOS_ENABLE(1),
    .ADDR_WIDTH(ADDR_WIDTH),
    .ID_WIDTH(ID_WIDTH)
) u_arbiter_s1 (
    .aclk(aclk),
    .aresetn(aresetn),
    
    // Scalable vectorized interface per AXI4 spec
    .master_request({m1_slave_select[1], m0_slave_select[1]}),
    .master_valid({(m1_awvalid || m1_arvalid), (m0_awvalid || m0_arvalid)}),
    .master_qos({m1_awqos, m0_awqos}),
    .master_id({m1_awid, m0_awid}),
    
    // Arbitration results
    .grant(s1_master_grant),
    .grant_master(s1_grant_master),
    .grant_valid(s1_grant_valid),
    .granted_qos(s1_granted_qos),
    .granted_id(s1_granted_id)
);

axi4_arbiter #(
    .NUM_MASTERS(2),
    .ARBITRATION("QOS"),
    .QOS_ENABLE(1),
    .ADDR_WIDTH(ADDR_WIDTH),
    .ID_WIDTH(ID_WIDTH)
) u_arbiter_s2 (
    .aclk(aclk),
    .aresetn(aresetn),
    
    // Scalable vectorized interface per AXI4 spec
    .master_request({m1_slave_select[2], m0_slave_select[2]}),
    .master_valid({(m1_awvalid || m1_arvalid), (m0_awvalid || m0_arvalid)}),
    .master_qos({m1_awqos, m0_awqos}),
    .master_id({m1_awid, m0_awid}),
    
    // Arbitration results
    .grant(s2_master_grant),
    .grant_master(s2_grant_master),
    .grant_valid(s2_grant_valid),
    .granted_qos(s2_granted_qos),
    .granted_id(s2_granted_id)
);

//------------------------------------------------------------------------------
// Crossbar Connections
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Access Error Response Generator
//------------------------------------------------------------------------------

// Master 0 error response handling
assign m0_bresp  = m0_access_error ? 2'b11 : 2'b00; // DECERR if access denied
assign m0_rresp  = m0_access_error ? 2'b11 : 2'b00; // DECERR if access denied
assign m0_bvalid = m0_access_error ? m0_awvalid : 1'b0;
assign m0_rvalid = m0_access_error ? m0_arvalid : 1'b0;
assign m0_rdata  = {DATA_WIDTH{1'b0}}; // Return zeros on error
assign m0_rlast  = 1'b1; // Single beat error response

// Master 1 error response handling
assign m1_bresp  = m1_access_error ? 2'b11 : 2'b00; // DECERR if access denied
assign m1_rresp  = m1_access_error ? 2'b11 : 2'b00; // DECERR if access denied
assign m1_bvalid = m1_access_error ? m1_awvalid : 1'b0;
assign m1_rvalid = m1_access_error ? m1_arvalid : 1'b0;
assign m1_rdata  = {DATA_WIDTH{1'b0}}; // Return zeros on error
assign m1_rlast  = 1'b1; // Single beat error response

// TODO: Implement full crossbar switch
// This is a simplified interconnect structure
// For production use, implement complete routing logic

// Slave 0 - DDR
// Address range: 0x0 - 0x3FFFFFFF
// Regions: 1

// Slave 1 - SRAM
// Address range: 0x40000000 - 0x4007FFFF
// Regions: 1

// Slave 2 - Peripherals
// Address range: 0x80000000 - 0x83FFFFFF
// Regions: 1

endmodule
