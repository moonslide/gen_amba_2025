//==============================================================================
// AXI4 Interface
// Generated by AMBA Bus Matrix Configuration Tool
// Date: 2025-07-29 14:34:40
//==============================================================================

interface axi4_if #(
    parameter ADDR_WIDTH = 32,
    parameter DATA_WIDTH = 32,
    parameter ID_WIDTH   = 4,
    parameter USER_WIDTH = 1
)(
    input logic aclk,
    input logic aresetn
);

    // Import global package
    import axi4_globals_pkg::*;
    
    // Write Address Channel
    logic [ID_WIDTH-1:0]     awid;
    logic [ADDR_WIDTH-1:0]   awaddr;
    logic [7:0]              awlen;
    logic [2:0]              awsize;
    logic [1:0]              awburst;
    logic                    awlock;
    logic [3:0]              awcache;
    logic [2:0]              awprot;
    logic [3:0]              awqos;
    logic [3:0]              awregion;
    logic [USER_WIDTH-1:0]   awuser;
    logic                    awvalid;
    logic                    awready;
    
    // Write Data Channel
    logic [DATA_WIDTH-1:0]   wdata;
    logic [STRB_WIDTH-1:0]   wstrb;
    logic                    wlast;
    logic [USER_WIDTH-1:0]   wuser;
    logic                    wvalid;
    logic                    wready;
    
    // Write Response Channel
    logic [ID_WIDTH-1:0]     bid;
    logic [1:0]              bresp;
    logic [USER_WIDTH-1:0]   buser;
    logic                    bvalid;
    logic                    bready;
    
    // Read Address Channel
    logic [ID_WIDTH-1:0]     arid;
    logic [ADDR_WIDTH-1:0]   araddr;
    logic [7:0]              arlen;
    logic [2:0]              arsize;
    logic [1:0]              arburst;
    logic                    arlock;
    logic [3:0]              arcache;
    logic [2:0]              arprot;
    logic [3:0]              arqos;
    logic [3:0]              arregion;
    logic [USER_WIDTH-1:0]   aruser;
    logic                    arvalid;
    logic                    arready;
    
    // Read Data Channel
    logic [ID_WIDTH-1:0]     rid;
    logic [DATA_WIDTH-1:0]   rdata;
    logic [1:0]              rresp;
    logic                    rlast;
    logic [USER_WIDTH-1:0]   ruser;
    logic                    rvalid;
    logic                    rready;
    
    // Modports
    modport master (
        input  aclk, aresetn,
        output awid, awaddr, awlen, awsize, awburst, awlock, awcache, awprot, awqos, awregion, awuser, awvalid,
        input  awready,
        output wdata, wstrb, wlast, wuser, wvalid,
        input  wready,
        input  bid, bresp, buser, bvalid,
        output bready,
        output arid, araddr, arlen, arsize, arburst, arlock, arcache, arprot, arqos, arregion, aruser, arvalid,
        input  arready,
        input  rid, rdata, rresp, rlast, ruser, rvalid,
        output rready
    );
    
    modport slave (
        input  aclk, aresetn,
        input  awid, awaddr, awlen, awsize, awburst, awlock, awcache, awprot, awqos, awregion, awuser, awvalid,
        output awready,
        input  wdata, wstrb, wlast, wuser, wvalid,
        output wready,
        output bid, bresp, buser, bvalid,
        input  bready,
        input  arid, araddr, arlen, arsize, arburst, arlock, arcache, arprot, arqos, arregion, aruser, arvalid,
        output arready,
        output rid, rdata, rresp, rlast, ruser, rvalid,
        input  rready
    );
    
    modport monitor (
        input aclk, aresetn,
        input awid, awaddr, awlen, awsize, awburst, awlock, awcache, awprot, awqos, awregion, awuser, awvalid, awready,
        input wdata, wstrb, wlast, wuser, wvalid, wready,
        input bid, bresp, buser, bvalid, bready,
        input arid, araddr, arlen, arsize, arburst, arlock, arcache, arprot, arqos, arregion, aruser, arvalid, arready,
        input rid, rdata, rresp, rlast, ruser, rvalid, rready
    );

    // Interface activity monitoring for debugging
    initial begin
        forever begin
            @(posedge aclk);
            
            // Monitor Write Address Channel Activity
            if (awvalid) begin
                $display("[%0t] AXI4_IF: WRITE_ADDR_CH active - addr=0x%0h, id=%0d, len=%0d, size=%0d, burst=%0d, valid=%b, ready=%b",
                    $time, awaddr, awid, awlen, awsize, awburst, awvalid, awready);
                if (awready) begin
                    $display("[%0t] AXI4_IF: WRITE_ADDR_CH handshake complete - qos=%0d, region=%0d, cache=0x%0h, prot=%0d",
                        $time, awqos, awregion, awcache, awprot);
                end
            end
            
            // Monitor Write Data Channel Activity
            if (wvalid) begin
                $display("[%0t] AXI4_IF: WRITE_DATA_CH active - data=0x%0h, strb=0x%0h, last=%b, valid=%b, ready=%b",
                    $time, wdata, wstrb, wlast, wvalid, wready);
            end
            
            // Monitor Write Response Channel Activity
            if (bvalid) begin
                $display("[%0t] AXI4_IF: WRITE_RESP_CH active - id=%0d, resp=%0d, valid=%b, ready=%b",
                    $time, bid, bresp, bvalid, bready);
            end
            
            // Monitor Read Address Channel Activity
            if (arvalid) begin
                $display("[%0t] AXI4_IF: READ_ADDR_CH active - addr=0x%0h, id=%0d, len=%0d, size=%0d, burst=%0d, valid=%b, ready=%b",
                    $time, araddr, arid, arlen, arsize, arburst, arvalid, arready);
                if (arready) begin
                    $display("[%0t] AXI4_IF: READ_ADDR_CH handshake complete - qos=%0d, region=%0d, cache=0x%0h, prot=%0d",
                        $time, arqos, arregion, arcache, arprot);
                end
            end
            
            // Monitor Read Data Channel Activity
            if (rvalid) begin
                $display("[%0t] AXI4_IF: READ_DATA_CH active - data=0x%0h, id=%0d, resp=%0d, last=%b, valid=%b, ready=%b",
                    $time, rdata, rid, rresp, rlast, rvalid, rready);
            end
        end
    end
    
    // Assertion to check for protocol violations
    property awvalid_stable;
        @(posedge aclk) disable iff (!aresetn)
        awvalid && !awready |-> ##1 awvalid;
    endproperty
    
    property arvalid_stable;
        @(posedge aclk) disable iff (!aresetn)
        arvalid && !arready |-> ##1 arvalid;
    endproperty
    
    property wvalid_stable;
        @(posedge aclk) disable iff (!aresetn)
        wvalid && !wready |-> ##1 wvalid;
    endproperty
    
    assert property (awvalid_stable) else
        $error("[%0t] AXI4_IF: AWVALID de-asserted before AWREADY", $time);
        
    assert property (arvalid_stable) else
        $error("[%0t] AXI4_IF: ARVALID de-asserted before ARREADY", $time);
        
    assert property (wvalid_stable) else
        $error("[%0t] AXI4_IF: WVALID de-asserted before WREADY", $time);

endinterface : axi4_if
