//==============================================================================
// AXI4 Global Package
// Generated by AMBA Bus Matrix Configuration Tool
// Date: 2025-08-04 17:04:14
//==============================================================================

package axi4_globals_pkg;
    
    // Import UVM package
    import uvm_pkg::*;
    `include "uvm_macros.svh"
    
    // Global parameters from GUI configuration
    parameter NO_OF_MASTERS    = 8;
    parameter NO_OF_SLAVES     = 8;
    parameter ADDRESS_WIDTH    = 32;
    parameter DATA_WIDTH       = 32;
    parameter ID_WIDTH         = 4;  // All masters use same ID width
    parameter STRB_WIDTH       = DATA_WIDTH/8;
    parameter USER_WIDTH       = 1;  // All masters use same USER width
    
    // Slave memory configuration
    parameter SLAVE_MEMORY_SIZE = 12288;  // 12KB default
    parameter MEMORY_WIDTH      = 8;
    parameter SLAVE_MEMORY_DEPTH = SLAVE_MEMORY_SIZE/MEMORY_WIDTH;
    
    // Transaction types
    typedef enum bit [1:0] {
        FIXED = 2'b00,
        INCR  = 2'b01,
        WRAP  = 2'b10,
        RSVD  = 2'b11
    } axi4_burst_type_e;
    
    // Response types
    typedef enum bit [1:0] {
        OKAY   = 2'b00,
        EXOKAY = 2'b01,
        SLVERR = 2'b10,
        DECERR = 2'b11
    } axi4_response_type_e;
    
    // Lock types
    typedef enum bit {
        NORMAL    = 1'b0,
        EXCLUSIVE = 1'b1
    } axi4_lock_type_e;
    
    // Size encoding
    typedef enum bit [2:0] {
        SIZE_1B   = 3'b000,
        SIZE_2B   = 3'b001,
        SIZE_4B   = 3'b010,
        SIZE_8B   = 3'b011,
        SIZE_16B  = 3'b100,
        SIZE_32B  = 3'b101,
        SIZE_64B  = 3'b110,
        SIZE_128B = 3'b111
    } axi4_size_e;
    
    // Cache encoding
    typedef struct packed {
        bit allocate;
        bit other_allocate;
        bit modifiable;
        bit bufferable;
    } axi4_cache_t;
    
    // Protection encoding
    typedef struct packed {
        bit instruction;
        bit nonsecure;
        bit privileged;
    } axi4_prot_t;
    
    // Slave configuration from GUI
    typedef struct {
        string name;
        bit [ADDRESS_WIDTH-1:0] base_addr;
        bit [ADDRESS_WIDTH-1:0] end_addr;
        int memory_size;
    } slave_config_t;
    
    // Master configuration from GUI
    typedef struct {
        string name;
        int id_width;
        bit qos_support;
        bit exclusive_support;
    } master_config_t;
    
    // Generated configurations
    master_config_t master_configs[NO_OF_MASTERS] = '{
        '{"master_0", 4, 1, 1},
        '{"master_1", 4, 1, 1},
        '{"master_2", 4, 1, 1},
        '{"master_3", 4, 1, 1},
        '{"master_4", 4, 1, 1},
        '{"master_5", 4, 1, 1},
        '{"master_6", 4, 1, 1},
        '{"master_7", 4, 1, 1}
    };

    slave_config_t slave_configs[NO_OF_SLAVES] = '{
        '{"slave_0", 'h0, 'h3FFFFFFFFF, 64'd274877906944},
        '{"slave_1", 'h10000000, 'h400FFFFFFF, 64'd274877906944},
        '{"slave_2", 'h20000000, 'h401FFFFFFF, 64'd274877906944},
        '{"slave_3", 'h30000000, 'h402FFFFFFF, 64'd274877906944},
        '{"slave_4", 'h40000000, 'h403FFFFFFF, 64'd274877906944},
        '{"slave_5", 'h50000000, 'h404FFFFFFF, 64'd274877906944},
        '{"slave_6", 'h60000000, 'h405FFFFFFF, 64'd274877906944},
        '{"slave_7", 'h70000000, 'h406FFFFFFF, 64'd274877906944}
    };

endpackage : axi4_globals_pkg
